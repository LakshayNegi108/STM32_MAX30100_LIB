
MAX30100_HRATE_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08008fc0  08008fc0  00018fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800976c  0800976c  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800976c  0800976c  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800976c  0800976c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800976c  0800976c  0001976c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08009774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000224  08009998  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08009998  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007184  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a4  00000000  00000000  000273d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00029778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c1  00000000  00000000  0002a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d23d  00000000  00000000  0003dd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006088a  00000000  00000000  0004af5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ab7e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  000ab838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000224 	.word	0x20000224
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008fa8 	.word	0x08008fa8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000228 	.word	0x20000228
 8000104:	08008fa8 	.word	0x08008fa8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fdfb 	bl	8002038 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd4b 	bl	8001ee8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fded 	bl	8002038 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fde3 	bl	8002038 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd73 	bl	8001f6c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd69 	bl	8001f6c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb6d 	bl	8000b90 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 faf9 	bl	8000ab8 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb5f 	bl	8000b90 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb55 	bl	8000b90 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb05 	bl	8000b04 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fafb 	bl	8000b04 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_f2uiz>:
 800051c:	219e      	movs	r1, #158	; 0x9e
 800051e:	b510      	push	{r4, lr}
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	f7ff fff0 	bl	8000508 <__aeabi_fcmpge>
 8000528:	2800      	cmp	r0, #0
 800052a:	d103      	bne.n	8000534 <__aeabi_f2uiz+0x18>
 800052c:	1c20      	adds	r0, r4, #0
 800052e:	f000 fe47 	bl	80011c0 <__aeabi_f2iz>
 8000532:	bd10      	pop	{r4, pc}
 8000534:	219e      	movs	r1, #158	; 0x9e
 8000536:	1c20      	adds	r0, r4, #0
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	f000 fc93 	bl	8000e64 <__aeabi_fsub>
 800053e:	f000 fe3f 	bl	80011c0 <__aeabi_f2iz>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	061b      	lsls	r3, r3, #24
 8000546:	469c      	mov	ip, r3
 8000548:	4460      	add	r0, ip
 800054a:	e7f2      	b.n	8000532 <__aeabi_f2uiz+0x16>

0800054c <__aeabi_fadd>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	46c6      	mov	lr, r8
 8000550:	0243      	lsls	r3, r0, #9
 8000552:	0a5b      	lsrs	r3, r3, #9
 8000554:	024e      	lsls	r6, r1, #9
 8000556:	0045      	lsls	r5, r0, #1
 8000558:	004f      	lsls	r7, r1, #1
 800055a:	00da      	lsls	r2, r3, #3
 800055c:	0fc4      	lsrs	r4, r0, #31
 800055e:	469c      	mov	ip, r3
 8000560:	0a70      	lsrs	r0, r6, #9
 8000562:	4690      	mov	r8, r2
 8000564:	b500      	push	{lr}
 8000566:	0e2d      	lsrs	r5, r5, #24
 8000568:	0e3f      	lsrs	r7, r7, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09b6      	lsrs	r6, r6, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d04b      	beq.n	800060a <__aeabi_fadd+0xbe>
 8000572:	1bea      	subs	r2, r5, r7
 8000574:	2a00      	cmp	r2, #0
 8000576:	dd36      	ble.n	80005e6 <__aeabi_fadd+0x9a>
 8000578:	2f00      	cmp	r7, #0
 800057a:	d061      	beq.n	8000640 <__aeabi_fadd+0xf4>
 800057c:	2dff      	cmp	r5, #255	; 0xff
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x36>
 8000580:	e0ad      	b.n	80006de <__aeabi_fadd+0x192>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	04db      	lsls	r3, r3, #19
 8000586:	431e      	orrs	r6, r3
 8000588:	2a1b      	cmp	r2, #27
 800058a:	dc00      	bgt.n	800058e <__aeabi_fadd+0x42>
 800058c:	e0d3      	b.n	8000736 <__aeabi_fadd+0x1ea>
 800058e:	2001      	movs	r0, #1
 8000590:	4643      	mov	r3, r8
 8000592:	1a18      	subs	r0, r3, r0
 8000594:	0143      	lsls	r3, r0, #5
 8000596:	d400      	bmi.n	800059a <__aeabi_fadd+0x4e>
 8000598:	e08c      	b.n	80006b4 <__aeabi_fadd+0x168>
 800059a:	0180      	lsls	r0, r0, #6
 800059c:	0987      	lsrs	r7, r0, #6
 800059e:	0038      	movs	r0, r7
 80005a0:	f002 fd26 	bl	8002ff0 <__clzsi2>
 80005a4:	3805      	subs	r0, #5
 80005a6:	4087      	lsls	r7, r0
 80005a8:	4285      	cmp	r5, r0
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_fadd+0x62>
 80005ac:	e0b6      	b.n	800071c <__aeabi_fadd+0x1d0>
 80005ae:	1a2d      	subs	r5, r5, r0
 80005b0:	48b3      	ldr	r0, [pc, #716]	; (8000880 <__aeabi_fadd+0x334>)
 80005b2:	4038      	ands	r0, r7
 80005b4:	0743      	lsls	r3, r0, #29
 80005b6:	d004      	beq.n	80005c2 <__aeabi_fadd+0x76>
 80005b8:	230f      	movs	r3, #15
 80005ba:	4003      	ands	r3, r0
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x76>
 80005c0:	3004      	adds	r0, #4
 80005c2:	0143      	lsls	r3, r0, #5
 80005c4:	d400      	bmi.n	80005c8 <__aeabi_fadd+0x7c>
 80005c6:	e078      	b.n	80006ba <__aeabi_fadd+0x16e>
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	2dfe      	cmp	r5, #254	; 0xfe
 80005cc:	d065      	beq.n	800069a <__aeabi_fadd+0x14e>
 80005ce:	0180      	lsls	r0, r0, #6
 80005d0:	0a43      	lsrs	r3, r0, #9
 80005d2:	469c      	mov	ip, r3
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	4663      	mov	r3, ip
 80005d8:	05d0      	lsls	r0, r2, #23
 80005da:	4318      	orrs	r0, r3
 80005dc:	07e4      	lsls	r4, r4, #31
 80005de:	4320      	orrs	r0, r4
 80005e0:	bc80      	pop	{r7}
 80005e2:	46b8      	mov	r8, r7
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d035      	beq.n	8000656 <__aeabi_fadd+0x10a>
 80005ea:	1b7a      	subs	r2, r7, r5
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xa6>
 80005f0:	e0af      	b.n	8000752 <__aeabi_fadd+0x206>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xae>
 80005f8:	e0a7      	b.n	800074a <__aeabi_fadd+0x1fe>
 80005fa:	1e53      	subs	r3, r2, #1
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0xb6>
 8000600:	e12f      	b.n	8000862 <__aeabi_fadd+0x316>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d069      	beq.n	80006da <__aeabi_fadd+0x18e>
 8000606:	001a      	movs	r2, r3
 8000608:	e0aa      	b.n	8000760 <__aeabi_fadd+0x214>
 800060a:	1be9      	subs	r1, r5, r7
 800060c:	2900      	cmp	r1, #0
 800060e:	dd70      	ble.n	80006f2 <__aeabi_fadd+0x1a6>
 8000610:	2f00      	cmp	r7, #0
 8000612:	d037      	beq.n	8000684 <__aeabi_fadd+0x138>
 8000614:	2dff      	cmp	r5, #255	; 0xff
 8000616:	d062      	beq.n	80006de <__aeabi_fadd+0x192>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431e      	orrs	r6, r3
 800061e:	291b      	cmp	r1, #27
 8000620:	dc00      	bgt.n	8000624 <__aeabi_fadd+0xd8>
 8000622:	e0b0      	b.n	8000786 <__aeabi_fadd+0x23a>
 8000624:	2001      	movs	r0, #1
 8000626:	4440      	add	r0, r8
 8000628:	0143      	lsls	r3, r0, #5
 800062a:	d543      	bpl.n	80006b4 <__aeabi_fadd+0x168>
 800062c:	3501      	adds	r5, #1
 800062e:	2dff      	cmp	r5, #255	; 0xff
 8000630:	d033      	beq.n	800069a <__aeabi_fadd+0x14e>
 8000632:	2301      	movs	r3, #1
 8000634:	4a93      	ldr	r2, [pc, #588]	; (8000884 <__aeabi_fadd+0x338>)
 8000636:	4003      	ands	r3, r0
 8000638:	0840      	lsrs	r0, r0, #1
 800063a:	4010      	ands	r0, r2
 800063c:	4318      	orrs	r0, r3
 800063e:	e7b9      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000640:	2e00      	cmp	r6, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0xfa>
 8000644:	e083      	b.n	800074e <__aeabi_fadd+0x202>
 8000646:	1e51      	subs	r1, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x102>
 800064c:	e0d8      	b.n	8000800 <__aeabi_fadd+0x2b4>
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d045      	beq.n	80006de <__aeabi_fadd+0x192>
 8000652:	000a      	movs	r2, r1
 8000654:	e798      	b.n	8000588 <__aeabi_fadd+0x3c>
 8000656:	27fe      	movs	r7, #254	; 0xfe
 8000658:	1c6a      	adds	r2, r5, #1
 800065a:	4217      	tst	r7, r2
 800065c:	d000      	beq.n	8000660 <__aeabi_fadd+0x114>
 800065e:	e086      	b.n	800076e <__aeabi_fadd+0x222>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x11a>
 8000664:	e0b7      	b.n	80007d6 <__aeabi_fadd+0x28a>
 8000666:	4643      	mov	r3, r8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x122>
 800066c:	e0f3      	b.n	8000856 <__aeabi_fadd+0x30a>
 800066e:	2200      	movs	r2, #0
 8000670:	2e00      	cmp	r6, #0
 8000672:	d0b0      	beq.n	80005d6 <__aeabi_fadd+0x8a>
 8000674:	1b98      	subs	r0, r3, r6
 8000676:	0143      	lsls	r3, r0, #5
 8000678:	d400      	bmi.n	800067c <__aeabi_fadd+0x130>
 800067a:	e0fa      	b.n	8000872 <__aeabi_fadd+0x326>
 800067c:	4643      	mov	r3, r8
 800067e:	000c      	movs	r4, r1
 8000680:	1af0      	subs	r0, r6, r3
 8000682:	e797      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x13e>
 8000688:	e0c8      	b.n	800081c <__aeabi_fadd+0x2d0>
 800068a:	1e4a      	subs	r2, r1, #1
 800068c:	2901      	cmp	r1, #1
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x146>
 8000690:	e0ae      	b.n	80007f0 <__aeabi_fadd+0x2a4>
 8000692:	29ff      	cmp	r1, #255	; 0xff
 8000694:	d023      	beq.n	80006de <__aeabi_fadd+0x192>
 8000696:	0011      	movs	r1, r2
 8000698:	e7c1      	b.n	800061e <__aeabi_fadd+0xd2>
 800069a:	2300      	movs	r3, #0
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	469c      	mov	ip, r3
 80006a0:	e799      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006a2:	21fe      	movs	r1, #254	; 0xfe
 80006a4:	1c6a      	adds	r2, r5, #1
 80006a6:	4211      	tst	r1, r2
 80006a8:	d077      	beq.n	800079a <__aeabi_fadd+0x24e>
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d0f5      	beq.n	800069a <__aeabi_fadd+0x14e>
 80006ae:	0015      	movs	r5, r2
 80006b0:	4446      	add	r6, r8
 80006b2:	0870      	lsrs	r0, r6, #1
 80006b4:	0743      	lsls	r3, r0, #29
 80006b6:	d000      	beq.n	80006ba <__aeabi_fadd+0x16e>
 80006b8:	e77e      	b.n	80005b8 <__aeabi_fadd+0x6c>
 80006ba:	08c3      	lsrs	r3, r0, #3
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d00e      	beq.n	80006de <__aeabi_fadd+0x192>
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	0a5b      	lsrs	r3, r3, #9
 80006c4:	469c      	mov	ip, r3
 80006c6:	b2ea      	uxtb	r2, r5
 80006c8:	e785      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d007      	beq.n	80006de <__aeabi_fadd+0x192>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	03d2      	lsls	r2, r2, #15
 80006d2:	4213      	tst	r3, r2
 80006d4:	d003      	beq.n	80006de <__aeabi_fadd+0x192>
 80006d6:	4210      	tst	r0, r2
 80006d8:	d101      	bne.n	80006de <__aeabi_fadd+0x192>
 80006da:	000c      	movs	r4, r1
 80006dc:	0003      	movs	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0db      	beq.n	800069a <__aeabi_fadd+0x14e>
 80006e2:	2080      	movs	r0, #128	; 0x80
 80006e4:	03c0      	lsls	r0, r0, #15
 80006e6:	4318      	orrs	r0, r3
 80006e8:	0240      	lsls	r0, r0, #9
 80006ea:	0a43      	lsrs	r3, r0, #9
 80006ec:	469c      	mov	ip, r3
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	e771      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d0d5      	beq.n	80006a2 <__aeabi_fadd+0x156>
 80006f6:	1b7a      	subs	r2, r7, r5
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d160      	bne.n	80007be <__aeabi_fadd+0x272>
 80006fc:	4643      	mov	r3, r8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d024      	beq.n	800074c <__aeabi_fadd+0x200>
 8000702:	1e53      	subs	r3, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d073      	beq.n	80007f0 <__aeabi_fadd+0x2a4>
 8000708:	2aff      	cmp	r2, #255	; 0xff
 800070a:	d0e7      	beq.n	80006dc <__aeabi_fadd+0x190>
 800070c:	001a      	movs	r2, r3
 800070e:	2a1b      	cmp	r2, #27
 8000710:	dc00      	bgt.n	8000714 <__aeabi_fadd+0x1c8>
 8000712:	e085      	b.n	8000820 <__aeabi_fadd+0x2d4>
 8000714:	2001      	movs	r0, #1
 8000716:	003d      	movs	r5, r7
 8000718:	1980      	adds	r0, r0, r6
 800071a:	e785      	b.n	8000628 <__aeabi_fadd+0xdc>
 800071c:	2320      	movs	r3, #32
 800071e:	003a      	movs	r2, r7
 8000720:	1b45      	subs	r5, r0, r5
 8000722:	0038      	movs	r0, r7
 8000724:	3501      	adds	r5, #1
 8000726:	40ea      	lsrs	r2, r5
 8000728:	1b5d      	subs	r5, r3, r5
 800072a:	40a8      	lsls	r0, r5
 800072c:	1e43      	subs	r3, r0, #1
 800072e:	4198      	sbcs	r0, r3
 8000730:	2500      	movs	r5, #0
 8000732:	4310      	orrs	r0, r2
 8000734:	e73e      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000736:	2320      	movs	r3, #32
 8000738:	0030      	movs	r0, r6
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	0031      	movs	r1, r6
 800073e:	4098      	lsls	r0, r3
 8000740:	40d1      	lsrs	r1, r2
 8000742:	1e43      	subs	r3, r0, #1
 8000744:	4198      	sbcs	r0, r3
 8000746:	4308      	orrs	r0, r1
 8000748:	e722      	b.n	8000590 <__aeabi_fadd+0x44>
 800074a:	000c      	movs	r4, r1
 800074c:	0003      	movs	r3, r0
 800074e:	0015      	movs	r5, r2
 8000750:	e7b4      	b.n	80006bc <__aeabi_fadd+0x170>
 8000752:	2fff      	cmp	r7, #255	; 0xff
 8000754:	d0c1      	beq.n	80006da <__aeabi_fadd+0x18e>
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	4640      	mov	r0, r8
 800075a:	04db      	lsls	r3, r3, #19
 800075c:	4318      	orrs	r0, r3
 800075e:	4680      	mov	r8, r0
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dd51      	ble.n	8000808 <__aeabi_fadd+0x2bc>
 8000764:	2001      	movs	r0, #1
 8000766:	000c      	movs	r4, r1
 8000768:	003d      	movs	r5, r7
 800076a:	1a30      	subs	r0, r6, r0
 800076c:	e712      	b.n	8000594 <__aeabi_fadd+0x48>
 800076e:	4643      	mov	r3, r8
 8000770:	1b9f      	subs	r7, r3, r6
 8000772:	017b      	lsls	r3, r7, #5
 8000774:	d42b      	bmi.n	80007ce <__aeabi_fadd+0x282>
 8000776:	2f00      	cmp	r7, #0
 8000778:	d000      	beq.n	800077c <__aeabi_fadd+0x230>
 800077a:	e710      	b.n	800059e <__aeabi_fadd+0x52>
 800077c:	2300      	movs	r3, #0
 800077e:	2400      	movs	r4, #0
 8000780:	2200      	movs	r2, #0
 8000782:	469c      	mov	ip, r3
 8000784:	e727      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000786:	2320      	movs	r3, #32
 8000788:	0032      	movs	r2, r6
 800078a:	0030      	movs	r0, r6
 800078c:	40ca      	lsrs	r2, r1
 800078e:	1a59      	subs	r1, r3, r1
 8000790:	4088      	lsls	r0, r1
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	4198      	sbcs	r0, r3
 8000796:	4310      	orrs	r0, r2
 8000798:	e745      	b.n	8000626 <__aeabi_fadd+0xda>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d14a      	bne.n	8000834 <__aeabi_fadd+0x2e8>
 800079e:	4643      	mov	r3, r8
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d063      	beq.n	800086c <__aeabi_fadd+0x320>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x260>
 80007aa:	e714      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80007ac:	0030      	movs	r0, r6
 80007ae:	4440      	add	r0, r8
 80007b0:	0143      	lsls	r3, r0, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fadd+0x26a>
 80007b4:	e77e      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <__aeabi_fadd+0x334>)
 80007b8:	3501      	adds	r5, #1
 80007ba:	4018      	ands	r0, r3
 80007bc:	e77a      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007be:	2fff      	cmp	r7, #255	; 0xff
 80007c0:	d08c      	beq.n	80006dc <__aeabi_fadd+0x190>
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	4641      	mov	r1, r8
 80007c6:	04db      	lsls	r3, r3, #19
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4688      	mov	r8, r1
 80007cc:	e79f      	b.n	800070e <__aeabi_fadd+0x1c2>
 80007ce:	4643      	mov	r3, r8
 80007d0:	000c      	movs	r4, r1
 80007d2:	1af7      	subs	r7, r6, r3
 80007d4:	e6e3      	b.n	800059e <__aeabi_fadd+0x52>
 80007d6:	4642      	mov	r2, r8
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x292>
 80007dc:	e775      	b.n	80006ca <__aeabi_fadd+0x17e>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fadd+0x298>
 80007e2:	e77a      	b.n	80006da <__aeabi_fadd+0x18e>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	2400      	movs	r4, #0
 80007ea:	469c      	mov	ip, r3
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	e6f2      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80007f0:	0030      	movs	r0, r6
 80007f2:	4440      	add	r0, r8
 80007f4:	2501      	movs	r5, #1
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0x2b0>
 80007fa:	e75b      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007fc:	2502      	movs	r5, #2
 80007fe:	e718      	b.n	8000632 <__aeabi_fadd+0xe6>
 8000800:	4643      	mov	r3, r8
 8000802:	2501      	movs	r5, #1
 8000804:	1b98      	subs	r0, r3, r6
 8000806:	e6c5      	b.n	8000594 <__aeabi_fadd+0x48>
 8000808:	2320      	movs	r3, #32
 800080a:	4644      	mov	r4, r8
 800080c:	4640      	mov	r0, r8
 800080e:	40d4      	lsrs	r4, r2
 8000810:	1a9a      	subs	r2, r3, r2
 8000812:	4090      	lsls	r0, r2
 8000814:	1e43      	subs	r3, r0, #1
 8000816:	4198      	sbcs	r0, r3
 8000818:	4320      	orrs	r0, r4
 800081a:	e7a4      	b.n	8000766 <__aeabi_fadd+0x21a>
 800081c:	000d      	movs	r5, r1
 800081e:	e74d      	b.n	80006bc <__aeabi_fadd+0x170>
 8000820:	2320      	movs	r3, #32
 8000822:	4641      	mov	r1, r8
 8000824:	4640      	mov	r0, r8
 8000826:	40d1      	lsrs	r1, r2
 8000828:	1a9a      	subs	r2, r3, r2
 800082a:	4090      	lsls	r0, r2
 800082c:	1e43      	subs	r3, r0, #1
 800082e:	4198      	sbcs	r0, r3
 8000830:	4308      	orrs	r0, r1
 8000832:	e770      	b.n	8000716 <__aeabi_fadd+0x1ca>
 8000834:	4642      	mov	r2, r8
 8000836:	2a00      	cmp	r2, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2f0>
 800083a:	e74f      	b.n	80006dc <__aeabi_fadd+0x190>
 800083c:	2e00      	cmp	r6, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2f6>
 8000840:	e74d      	b.n	80006de <__aeabi_fadd+0x192>
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	03d2      	lsls	r2, r2, #15
 8000846:	4213      	tst	r3, r2
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x300>
 800084a:	e748      	b.n	80006de <__aeabi_fadd+0x192>
 800084c:	4210      	tst	r0, r2
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0x306>
 8000850:	e745      	b.n	80006de <__aeabi_fadd+0x192>
 8000852:	0003      	movs	r3, r0
 8000854:	e743      	b.n	80006de <__aeabi_fadd+0x192>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d090      	beq.n	800077c <__aeabi_fadd+0x230>
 800085a:	000c      	movs	r4, r1
 800085c:	4684      	mov	ip, r0
 800085e:	2200      	movs	r2, #0
 8000860:	e6b9      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000862:	4643      	mov	r3, r8
 8000864:	000c      	movs	r4, r1
 8000866:	1af0      	subs	r0, r6, r3
 8000868:	3501      	adds	r5, #1
 800086a:	e693      	b.n	8000594 <__aeabi_fadd+0x48>
 800086c:	4684      	mov	ip, r0
 800086e:	2200      	movs	r2, #0
 8000870:	e6b1      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000872:	2800      	cmp	r0, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fadd+0x32c>
 8000876:	e71d      	b.n	80006b4 <__aeabi_fadd+0x168>
 8000878:	2300      	movs	r3, #0
 800087a:	2400      	movs	r4, #0
 800087c:	469c      	mov	ip, r3
 800087e:	e6aa      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000880:	fbffffff 	.word	0xfbffffff
 8000884:	7dffffff 	.word	0x7dffffff

08000888 <__aeabi_fdiv>:
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	464f      	mov	r7, r9
 800088c:	4646      	mov	r6, r8
 800088e:	46d6      	mov	lr, sl
 8000890:	0245      	lsls	r5, r0, #9
 8000892:	b5c0      	push	{r6, r7, lr}
 8000894:	0047      	lsls	r7, r0, #1
 8000896:	1c0c      	adds	r4, r1, #0
 8000898:	0a6d      	lsrs	r5, r5, #9
 800089a:	0e3f      	lsrs	r7, r7, #24
 800089c:	0fc6      	lsrs	r6, r0, #31
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fdiv+0x1c>
 80008a2:	e070      	b.n	8000986 <__aeabi_fdiv+0xfe>
 80008a4:	2fff      	cmp	r7, #255	; 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fdiv+0x22>
 80008a8:	e075      	b.n	8000996 <__aeabi_fdiv+0x10e>
 80008aa:	00eb      	lsls	r3, r5, #3
 80008ac:	2580      	movs	r5, #128	; 0x80
 80008ae:	04ed      	lsls	r5, r5, #19
 80008b0:	431d      	orrs	r5, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	4699      	mov	r9, r3
 80008b6:	469a      	mov	sl, r3
 80008b8:	3f7f      	subs	r7, #127	; 0x7f
 80008ba:	0260      	lsls	r0, r4, #9
 80008bc:	0a43      	lsrs	r3, r0, #9
 80008be:	4698      	mov	r8, r3
 80008c0:	0063      	lsls	r3, r4, #1
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0fe4      	lsrs	r4, r4, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d04e      	beq.n	8000968 <__aeabi_fdiv+0xe0>
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d046      	beq.n	800095c <__aeabi_fdiv+0xd4>
 80008ce:	4642      	mov	r2, r8
 80008d0:	00d0      	lsls	r0, r2, #3
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	4302      	orrs	r2, r0
 80008d8:	4690      	mov	r8, r2
 80008da:	2200      	movs	r2, #0
 80008dc:	3b7f      	subs	r3, #127	; 0x7f
 80008de:	0031      	movs	r1, r6
 80008e0:	1aff      	subs	r7, r7, r3
 80008e2:	464b      	mov	r3, r9
 80008e4:	4061      	eors	r1, r4
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	4313      	orrs	r3, r2
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d900      	bls.n	80008f0 <__aeabi_fdiv+0x68>
 80008ee:	e0b5      	b.n	8000a5c <__aeabi_fdiv+0x1d4>
 80008f0:	486e      	ldr	r0, [pc, #440]	; (8000aac <__aeabi_fdiv+0x224>)
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	58c3      	ldr	r3, [r0, r3]
 80008f6:	469f      	mov	pc, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4698      	mov	r8, r3
 80008fc:	0026      	movs	r6, r4
 80008fe:	4645      	mov	r5, r8
 8000900:	4692      	mov	sl, r2
 8000902:	4653      	mov	r3, sl
 8000904:	2b02      	cmp	r3, #2
 8000906:	d100      	bne.n	800090a <__aeabi_fdiv+0x82>
 8000908:	e089      	b.n	8000a1e <__aeabi_fdiv+0x196>
 800090a:	2b03      	cmp	r3, #3
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0x88>
 800090e:	e09e      	b.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d018      	beq.n	8000946 <__aeabi_fdiv+0xbe>
 8000914:	003b      	movs	r3, r7
 8000916:	337f      	adds	r3, #127	; 0x7f
 8000918:	2b00      	cmp	r3, #0
 800091a:	dd69      	ble.n	80009f0 <__aeabi_fdiv+0x168>
 800091c:	076a      	lsls	r2, r5, #29
 800091e:	d004      	beq.n	800092a <__aeabi_fdiv+0xa2>
 8000920:	220f      	movs	r2, #15
 8000922:	402a      	ands	r2, r5
 8000924:	2a04      	cmp	r2, #4
 8000926:	d000      	beq.n	800092a <__aeabi_fdiv+0xa2>
 8000928:	3504      	adds	r5, #4
 800092a:	012a      	lsls	r2, r5, #4
 800092c:	d503      	bpl.n	8000936 <__aeabi_fdiv+0xae>
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <__aeabi_fdiv+0x228>)
 8000930:	401d      	ands	r5, r3
 8000932:	003b      	movs	r3, r7
 8000934:	3380      	adds	r3, #128	; 0x80
 8000936:	2bfe      	cmp	r3, #254	; 0xfe
 8000938:	dd00      	ble.n	800093c <__aeabi_fdiv+0xb4>
 800093a:	e070      	b.n	8000a1e <__aeabi_fdiv+0x196>
 800093c:	01ad      	lsls	r5, r5, #6
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	b2d8      	uxtb	r0, r3
 8000942:	e002      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000944:	000e      	movs	r6, r1
 8000946:	2000      	movs	r0, #0
 8000948:	2500      	movs	r5, #0
 800094a:	05c0      	lsls	r0, r0, #23
 800094c:	4328      	orrs	r0, r5
 800094e:	07f6      	lsls	r6, r6, #31
 8000950:	4330      	orrs	r0, r6
 8000952:	bce0      	pop	{r5, r6, r7}
 8000954:	46ba      	mov	sl, r7
 8000956:	46b1      	mov	r9, r6
 8000958:	46a8      	mov	r8, r5
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d13f      	bne.n	80009e2 <__aeabi_fdiv+0x15a>
 8000962:	2202      	movs	r2, #2
 8000964:	3fff      	subs	r7, #255	; 0xff
 8000966:	e003      	b.n	8000970 <__aeabi_fdiv+0xe8>
 8000968:	4643      	mov	r3, r8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d12d      	bne.n	80009ca <__aeabi_fdiv+0x142>
 800096e:	2201      	movs	r2, #1
 8000970:	0031      	movs	r1, r6
 8000972:	464b      	mov	r3, r9
 8000974:	4061      	eors	r1, r4
 8000976:	b2c9      	uxtb	r1, r1
 8000978:	4313      	orrs	r3, r2
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d834      	bhi.n	80009e8 <__aeabi_fdiv+0x160>
 800097e:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <__aeabi_fdiv+0x22c>)
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	58c3      	ldr	r3, [r0, r3]
 8000984:	469f      	mov	pc, r3
 8000986:	2d00      	cmp	r5, #0
 8000988:	d113      	bne.n	80009b2 <__aeabi_fdiv+0x12a>
 800098a:	2304      	movs	r3, #4
 800098c:	4699      	mov	r9, r3
 800098e:	3b03      	subs	r3, #3
 8000990:	2700      	movs	r7, #0
 8000992:	469a      	mov	sl, r3
 8000994:	e791      	b.n	80008ba <__aeabi_fdiv+0x32>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d105      	bne.n	80009a6 <__aeabi_fdiv+0x11e>
 800099a:	2308      	movs	r3, #8
 800099c:	4699      	mov	r9, r3
 800099e:	3b06      	subs	r3, #6
 80009a0:	27ff      	movs	r7, #255	; 0xff
 80009a2:	469a      	mov	sl, r3
 80009a4:	e789      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009a6:	230c      	movs	r3, #12
 80009a8:	4699      	mov	r9, r3
 80009aa:	3b09      	subs	r3, #9
 80009ac:	27ff      	movs	r7, #255	; 0xff
 80009ae:	469a      	mov	sl, r3
 80009b0:	e783      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009b2:	0028      	movs	r0, r5
 80009b4:	f002 fb1c 	bl	8002ff0 <__clzsi2>
 80009b8:	2776      	movs	r7, #118	; 0x76
 80009ba:	1f43      	subs	r3, r0, #5
 80009bc:	409d      	lsls	r5, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	427f      	negs	r7, r7
 80009c2:	4699      	mov	r9, r3
 80009c4:	469a      	mov	sl, r3
 80009c6:	1a3f      	subs	r7, r7, r0
 80009c8:	e777      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009ca:	4640      	mov	r0, r8
 80009cc:	f002 fb10 	bl	8002ff0 <__clzsi2>
 80009d0:	4642      	mov	r2, r8
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	409a      	lsls	r2, r3
 80009d6:	2376      	movs	r3, #118	; 0x76
 80009d8:	425b      	negs	r3, r3
 80009da:	4690      	mov	r8, r2
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	2200      	movs	r2, #0
 80009e0:	e77d      	b.n	80008de <__aeabi_fdiv+0x56>
 80009e2:	23ff      	movs	r3, #255	; 0xff
 80009e4:	2203      	movs	r2, #3
 80009e6:	e77a      	b.n	80008de <__aeabi_fdiv+0x56>
 80009e8:	000e      	movs	r6, r1
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	2500      	movs	r5, #0
 80009ee:	e7ac      	b.n	800094a <__aeabi_fdiv+0xc2>
 80009f0:	2001      	movs	r0, #1
 80009f2:	1ac0      	subs	r0, r0, r3
 80009f4:	281b      	cmp	r0, #27
 80009f6:	dca6      	bgt.n	8000946 <__aeabi_fdiv+0xbe>
 80009f8:	379e      	adds	r7, #158	; 0x9e
 80009fa:	002a      	movs	r2, r5
 80009fc:	40bd      	lsls	r5, r7
 80009fe:	40c2      	lsrs	r2, r0
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	4315      	orrs	r5, r2
 8000a06:	076b      	lsls	r3, r5, #29
 8000a08:	d004      	beq.n	8000a14 <__aeabi_fdiv+0x18c>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	402b      	ands	r3, r5
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fdiv+0x18c>
 8000a12:	3504      	adds	r5, #4
 8000a14:	016b      	lsls	r3, r5, #5
 8000a16:	d544      	bpl.n	8000aa2 <__aeabi_fdiv+0x21a>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e795      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	2500      	movs	r5, #0
 8000a22:	e792      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a24:	2580      	movs	r5, #128	; 0x80
 8000a26:	2600      	movs	r6, #0
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	03ed      	lsls	r5, r5, #15
 8000a2c:	e78d      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	4698      	mov	r8, r3
 8000a32:	2080      	movs	r0, #128	; 0x80
 8000a34:	03c0      	lsls	r0, r0, #15
 8000a36:	4205      	tst	r5, r0
 8000a38:	d009      	beq.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4203      	tst	r3, r0
 8000a3e:	d106      	bne.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000a40:	4645      	mov	r5, r8
 8000a42:	4305      	orrs	r5, r0
 8000a44:	026d      	lsls	r5, r5, #9
 8000a46:	0026      	movs	r6, r4
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	0a6d      	lsrs	r5, r5, #9
 8000a4c:	e77d      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	03c0      	lsls	r0, r0, #15
 8000a52:	4305      	orrs	r5, r0
 8000a54:	026d      	lsls	r5, r5, #9
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	e776      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	016b      	lsls	r3, r5, #5
 8000a60:	0150      	lsls	r0, r2, #5
 8000a62:	4283      	cmp	r3, r0
 8000a64:	d219      	bcs.n	8000a9a <__aeabi_fdiv+0x212>
 8000a66:	221b      	movs	r2, #27
 8000a68:	2500      	movs	r5, #0
 8000a6a:	3f01      	subs	r7, #1
 8000a6c:	2601      	movs	r6, #1
 8000a6e:	001c      	movs	r4, r3
 8000a70:	006d      	lsls	r5, r5, #1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	db01      	blt.n	8000a7c <__aeabi_fdiv+0x1f4>
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	d801      	bhi.n	8000a80 <__aeabi_fdiv+0x1f8>
 8000a7c:	1a1b      	subs	r3, r3, r0
 8000a7e:	4335      	orrs	r5, r6
 8000a80:	3a01      	subs	r2, #1
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d1f3      	bne.n	8000a6e <__aeabi_fdiv+0x1e6>
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	4193      	sbcs	r3, r2
 8000a8a:	431d      	orrs	r5, r3
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	337f      	adds	r3, #127	; 0x7f
 8000a90:	000e      	movs	r6, r1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fdiv+0x210>
 8000a96:	e741      	b.n	800091c <__aeabi_fdiv+0x94>
 8000a98:	e7aa      	b.n	80009f0 <__aeabi_fdiv+0x168>
 8000a9a:	221a      	movs	r2, #26
 8000a9c:	2501      	movs	r5, #1
 8000a9e:	1a1b      	subs	r3, r3, r0
 8000aa0:	e7e4      	b.n	8000a6c <__aeabi_fdiv+0x1e4>
 8000aa2:	01ad      	lsls	r5, r5, #6
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	e74f      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	080091f8 	.word	0x080091f8
 8000ab0:	f7ffffff 	.word	0xf7ffffff
 8000ab4:	08009238 	.word	0x08009238

08000ab8 <__eqsf2>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	0042      	lsls	r2, r0, #1
 8000abc:	0245      	lsls	r5, r0, #9
 8000abe:	024e      	lsls	r6, r1, #9
 8000ac0:	004c      	lsls	r4, r1, #1
 8000ac2:	0fc3      	lsrs	r3, r0, #31
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	0e12      	lsrs	r2, r2, #24
 8000aca:	0a76      	lsrs	r6, r6, #9
 8000acc:	0e24      	lsrs	r4, r4, #24
 8000ace:	0fc9      	lsrs	r1, r1, #31
 8000ad0:	2aff      	cmp	r2, #255	; 0xff
 8000ad2:	d006      	beq.n	8000ae2 <__eqsf2+0x2a>
 8000ad4:	2cff      	cmp	r4, #255	; 0xff
 8000ad6:	d003      	beq.n	8000ae0 <__eqsf2+0x28>
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	d101      	bne.n	8000ae0 <__eqsf2+0x28>
 8000adc:	42b5      	cmp	r5, r6
 8000ade:	d006      	beq.n	8000aee <__eqsf2+0x36>
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d1fc      	bne.n	8000ae0 <__eqsf2+0x28>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d1fa      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d1f8      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d006      	beq.n	8000b00 <__eqsf2+0x48>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d1f3      	bne.n	8000ae0 <__eqsf2+0x28>
 8000af8:	0028      	movs	r0, r5
 8000afa:	1e43      	subs	r3, r0, #1
 8000afc:	4198      	sbcs	r0, r3
 8000afe:	e7ef      	b.n	8000ae0 <__eqsf2+0x28>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7ed      	b.n	8000ae0 <__eqsf2+0x28>

08000b04 <__gesf2>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	0245      	lsls	r5, r0, #9
 8000b0a:	024e      	lsls	r6, r1, #9
 8000b0c:	004c      	lsls	r4, r1, #1
 8000b0e:	0fc3      	lsrs	r3, r0, #31
 8000b10:	0a6d      	lsrs	r5, r5, #9
 8000b12:	0e12      	lsrs	r2, r2, #24
 8000b14:	0a76      	lsrs	r6, r6, #9
 8000b16:	0e24      	lsrs	r4, r4, #24
 8000b18:	0fc8      	lsrs	r0, r1, #31
 8000b1a:	2aff      	cmp	r2, #255	; 0xff
 8000b1c:	d01b      	beq.n	8000b56 <__gesf2+0x52>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d00e      	beq.n	8000b40 <__gesf2+0x3c>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d11b      	bne.n	8000b5e <__gesf2+0x5a>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d101      	bne.n	8000b2e <__gesf2+0x2a>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d01c      	beq.n	8000b68 <__gesf2+0x64>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d00c      	beq.n	8000b4c <__gesf2+0x48>
 8000b32:	4283      	cmp	r3, r0
 8000b34:	d01c      	beq.n	8000b70 <__gesf2+0x6c>
 8000b36:	2102      	movs	r1, #2
 8000b38:	1e58      	subs	r0, r3, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d122      	bne.n	8000b8a <__gesf2+0x86>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d1f4      	bne.n	8000b32 <__gesf2+0x2e>
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d1f2      	bne.n	8000b32 <__gesf2+0x2e>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f6      	bne.n	8000b3e <__gesf2+0x3a>
 8000b50:	2001      	movs	r0, #1
 8000b52:	4240      	negs	r0, r0
 8000b54:	e7f3      	b.n	8000b3e <__gesf2+0x3a>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d117      	bne.n	8000b8a <__gesf2+0x86>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d0f0      	beq.n	8000b40 <__gesf2+0x3c>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d1e7      	bne.n	8000b32 <__gesf2+0x2e>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d1e5      	bne.n	8000b32 <__gesf2+0x2e>
 8000b66:	e7e6      	b.n	8000b36 <__gesf2+0x32>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e7      	beq.n	8000b3e <__gesf2+0x3a>
 8000b6e:	e7e2      	b.n	8000b36 <__gesf2+0x32>
 8000b70:	42a2      	cmp	r2, r4
 8000b72:	dc05      	bgt.n	8000b80 <__gesf2+0x7c>
 8000b74:	dbea      	blt.n	8000b4c <__gesf2+0x48>
 8000b76:	42b5      	cmp	r5, r6
 8000b78:	d802      	bhi.n	8000b80 <__gesf2+0x7c>
 8000b7a:	d3e7      	bcc.n	8000b4c <__gesf2+0x48>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e7de      	b.n	8000b3e <__gesf2+0x3a>
 8000b80:	4243      	negs	r3, r0
 8000b82:	4158      	adcs	r0, r3
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	3801      	subs	r0, #1
 8000b88:	e7d9      	b.n	8000b3e <__gesf2+0x3a>
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	4240      	negs	r0, r0
 8000b8e:	e7d6      	b.n	8000b3e <__gesf2+0x3a>

08000b90 <__lesf2>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	0042      	lsls	r2, r0, #1
 8000b94:	0245      	lsls	r5, r0, #9
 8000b96:	024e      	lsls	r6, r1, #9
 8000b98:	004c      	lsls	r4, r1, #1
 8000b9a:	0fc3      	lsrs	r3, r0, #31
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	0a76      	lsrs	r6, r6, #9
 8000ba2:	0e24      	lsrs	r4, r4, #24
 8000ba4:	0fc8      	lsrs	r0, r1, #31
 8000ba6:	2aff      	cmp	r2, #255	; 0xff
 8000ba8:	d00b      	beq.n	8000bc2 <__lesf2+0x32>
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d00d      	beq.n	8000bca <__lesf2+0x3a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d11f      	bne.n	8000bf2 <__lesf2+0x62>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d116      	bne.n	8000be4 <__lesf2+0x54>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d114      	bne.n	8000be4 <__lesf2+0x54>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d010      	beq.n	8000be2 <__lesf2+0x52>
 8000bc0:	e009      	b.n	8000bd6 <__lesf2+0x46>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d10c      	bne.n	8000be0 <__lesf2+0x50>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d113      	bne.n	8000bf2 <__lesf2+0x62>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d108      	bne.n	8000be0 <__lesf2+0x50>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d008      	beq.n	8000be4 <__lesf2+0x54>
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	d012      	beq.n	8000bfc <__lesf2+0x6c>
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	1e58      	subs	r0, r3, #1
 8000bda:	4008      	ands	r0, r1
 8000bdc:	3801      	subs	r0, #1
 8000bde:	e000      	b.n	8000be2 <__lesf2+0x52>
 8000be0:	2002      	movs	r0, #2
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d1f4      	bne.n	8000bd2 <__lesf2+0x42>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1fa      	bne.n	8000be2 <__lesf2+0x52>
 8000bec:	2001      	movs	r0, #1
 8000bee:	4240      	negs	r0, r0
 8000bf0:	e7f7      	b.n	8000be2 <__lesf2+0x52>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d1ed      	bne.n	8000bd2 <__lesf2+0x42>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d1eb      	bne.n	8000bd2 <__lesf2+0x42>
 8000bfa:	e7ec      	b.n	8000bd6 <__lesf2+0x46>
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	dc05      	bgt.n	8000c0c <__lesf2+0x7c>
 8000c00:	dbf2      	blt.n	8000be8 <__lesf2+0x58>
 8000c02:	42b5      	cmp	r5, r6
 8000c04:	d802      	bhi.n	8000c0c <__lesf2+0x7c>
 8000c06:	d3ef      	bcc.n	8000be8 <__lesf2+0x58>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7ea      	b.n	8000be2 <__lesf2+0x52>
 8000c0c:	4243      	negs	r3, r0
 8000c0e:	4158      	adcs	r0, r3
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	3801      	subs	r0, #1
 8000c14:	e7e5      	b.n	8000be2 <__lesf2+0x52>
 8000c16:	46c0      	nop			; (mov r8, r8)

08000c18 <__aeabi_fmul>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	464f      	mov	r7, r9
 8000c1c:	4646      	mov	r6, r8
 8000c1e:	46d6      	mov	lr, sl
 8000c20:	0244      	lsls	r4, r0, #9
 8000c22:	0045      	lsls	r5, r0, #1
 8000c24:	b5c0      	push	{r6, r7, lr}
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	1c0f      	adds	r7, r1, #0
 8000c2a:	0e2d      	lsrs	r5, r5, #24
 8000c2c:	0fc6      	lsrs	r6, r0, #31
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fmul+0x1c>
 8000c32:	e08d      	b.n	8000d50 <__aeabi_fmul+0x138>
 8000c34:	2dff      	cmp	r5, #255	; 0xff
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fmul+0x22>
 8000c38:	e092      	b.n	8000d60 <__aeabi_fmul+0x148>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2080      	movs	r0, #128	; 0x80
 8000c3e:	4699      	mov	r9, r3
 8000c40:	469a      	mov	sl, r3
 8000c42:	00e4      	lsls	r4, r4, #3
 8000c44:	04c0      	lsls	r0, r0, #19
 8000c46:	4304      	orrs	r4, r0
 8000c48:	3d7f      	subs	r5, #127	; 0x7f
 8000c4a:	0278      	lsls	r0, r7, #9
 8000c4c:	0a43      	lsrs	r3, r0, #9
 8000c4e:	4698      	mov	r8, r3
 8000c50:	007b      	lsls	r3, r7, #1
 8000c52:	0e1b      	lsrs	r3, r3, #24
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x44>
 8000c5a:	e070      	b.n	8000d3e <__aeabi_fmul+0x126>
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fmul+0x4a>
 8000c60:	e086      	b.n	8000d70 <__aeabi_fmul+0x158>
 8000c62:	4642      	mov	r2, r8
 8000c64:	00d0      	lsls	r0, r2, #3
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	3b7f      	subs	r3, #127	; 0x7f
 8000c6a:	18ed      	adds	r5, r5, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	04d2      	lsls	r2, r2, #19
 8000c70:	4302      	orrs	r2, r0
 8000c72:	4690      	mov	r8, r2
 8000c74:	469c      	mov	ip, r3
 8000c76:	0031      	movs	r1, r6
 8000c78:	464b      	mov	r3, r9
 8000c7a:	4079      	eors	r1, r7
 8000c7c:	1c68      	adds	r0, r5, #1
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d81c      	bhi.n	8000cbc <__aeabi_fmul+0xa4>
 8000c82:	4a76      	ldr	r2, [pc, #472]	; (8000e5c <__aeabi_fmul+0x244>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	4644      	mov	r4, r8
 8000c8e:	46e2      	mov	sl, ip
 8000c90:	4653      	mov	r3, sl
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d00f      	beq.n	8000cb6 <__aeabi_fmul+0x9e>
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fmul+0x84>
 8000c9a:	e0d7      	b.n	8000e4c <__aeabi_fmul+0x234>
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d137      	bne.n	8000d10 <__aeabi_fmul+0xf8>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	07c9      	lsls	r1, r1, #31
 8000caa:	4308      	orrs	r0, r1
 8000cac:	bce0      	pop	{r5, r6, r7}
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46b1      	mov	r9, r6
 8000cb2:	46a8      	mov	r8, r5
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000cbc:	0c26      	lsrs	r6, r4, #16
 8000cbe:	0424      	lsls	r4, r4, #16
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	4644      	mov	r4, r8
 8000cc4:	0424      	lsls	r4, r4, #16
 8000cc6:	0c24      	lsrs	r4, r4, #16
 8000cc8:	4643      	mov	r3, r8
 8000cca:	0027      	movs	r7, r4
 8000ccc:	0c1b      	lsrs	r3, r3, #16
 8000cce:	4357      	muls	r7, r2
 8000cd0:	4374      	muls	r4, r6
 8000cd2:	435a      	muls	r2, r3
 8000cd4:	435e      	muls	r6, r3
 8000cd6:	1912      	adds	r2, r2, r4
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	189b      	adds	r3, r3, r2
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d903      	bls.n	8000ce8 <__aeabi_fmul+0xd0>
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0252      	lsls	r2, r2, #9
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	4466      	add	r6, ip
 8000ce8:	043f      	lsls	r7, r7, #16
 8000cea:	041a      	lsls	r2, r3, #16
 8000cec:	0c3f      	lsrs	r7, r7, #16
 8000cee:	19d2      	adds	r2, r2, r7
 8000cf0:	0194      	lsls	r4, r2, #6
 8000cf2:	1e67      	subs	r7, r4, #1
 8000cf4:	41bc      	sbcs	r4, r7
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	0e92      	lsrs	r2, r2, #26
 8000cfa:	199b      	adds	r3, r3, r6
 8000cfc:	4314      	orrs	r4, r2
 8000cfe:	019b      	lsls	r3, r3, #6
 8000d00:	431c      	orrs	r4, r3
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_fmul+0xf0>
 8000d06:	e09b      	b.n	8000e40 <__aeabi_fmul+0x228>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	0862      	lsrs	r2, r4, #1
 8000d0c:	401c      	ands	r4, r3
 8000d0e:	4314      	orrs	r4, r2
 8000d10:	0002      	movs	r2, r0
 8000d12:	327f      	adds	r2, #127	; 0x7f
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	dd64      	ble.n	8000de2 <__aeabi_fmul+0x1ca>
 8000d18:	0763      	lsls	r3, r4, #29
 8000d1a:	d004      	beq.n	8000d26 <__aeabi_fmul+0x10e>
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fmul+0x10e>
 8000d24:	3404      	adds	r4, #4
 8000d26:	0123      	lsls	r3, r4, #4
 8000d28:	d503      	bpl.n	8000d32 <__aeabi_fmul+0x11a>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	4b4c      	ldr	r3, [pc, #304]	; (8000e60 <__aeabi_fmul+0x248>)
 8000d2e:	3280      	adds	r2, #128	; 0x80
 8000d30:	401c      	ands	r4, r3
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	dcbf      	bgt.n	8000cb6 <__aeabi_fmul+0x9e>
 8000d36:	01a4      	lsls	r4, r4, #6
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	b2d0      	uxtb	r0, r2
 8000d3c:	e7b2      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d13d      	bne.n	8000dc0 <__aeabi_fmul+0x1a8>
 8000d44:	464a      	mov	r2, r9
 8000d46:	3301      	adds	r3, #1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	e792      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d129      	bne.n	8000da8 <__aeabi_fmul+0x190>
 8000d54:	2304      	movs	r3, #4
 8000d56:	4699      	mov	r9, r3
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	e774      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d11b      	bne.n	8000d9c <__aeabi_fmul+0x184>
 8000d64:	2308      	movs	r3, #8
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b06      	subs	r3, #6
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	e76c      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000d70:	4643      	mov	r3, r8
 8000d72:	35ff      	adds	r5, #255	; 0xff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <__aeabi_fmul+0x178>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	4691      	mov	r9, r2
 8000d80:	469c      	mov	ip, r3
 8000d82:	e778      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d84:	4653      	mov	r3, sl
 8000d86:	0031      	movs	r1, r6
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fmul+0x176>
 8000d8c:	e783      	b.n	8000c96 <__aeabi_fmul+0x7e>
 8000d8e:	e792      	b.n	8000cb6 <__aeabi_fmul+0x9e>
 8000d90:	2303      	movs	r3, #3
 8000d92:	464a      	mov	r2, r9
 8000d94:	431a      	orrs	r2, r3
 8000d96:	4691      	mov	r9, r2
 8000d98:	469c      	mov	ip, r3
 8000d9a:	e76c      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b09      	subs	r3, #9
 8000da2:	25ff      	movs	r5, #255	; 0xff
 8000da4:	469a      	mov	sl, r3
 8000da6:	e750      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000da8:	0020      	movs	r0, r4
 8000daa:	f002 f921 	bl	8002ff0 <__clzsi2>
 8000dae:	2576      	movs	r5, #118	; 0x76
 8000db0:	1f43      	subs	r3, r0, #5
 8000db2:	409c      	lsls	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	426d      	negs	r5, r5
 8000db8:	4699      	mov	r9, r3
 8000dba:	469a      	mov	sl, r3
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	e744      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	f002 f915 	bl	8002ff0 <__clzsi2>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	1f43      	subs	r3, r0, #5
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	2300      	movs	r3, #0
 8000dce:	1a2d      	subs	r5, r5, r0
 8000dd0:	4690      	mov	r8, r2
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	3d76      	subs	r5, #118	; 0x76
 8000dd6:	e74e      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000dd8:	2480      	movs	r4, #128	; 0x80
 8000dda:	2100      	movs	r1, #0
 8000ddc:	20ff      	movs	r0, #255	; 0xff
 8000dde:	03e4      	lsls	r4, r4, #15
 8000de0:	e760      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	2b1b      	cmp	r3, #27
 8000de8:	dd00      	ble.n	8000dec <__aeabi_fmul+0x1d4>
 8000dea:	e759      	b.n	8000ca0 <__aeabi_fmul+0x88>
 8000dec:	0022      	movs	r2, r4
 8000dee:	309e      	adds	r0, #158	; 0x9e
 8000df0:	40da      	lsrs	r2, r3
 8000df2:	4084      	lsls	r4, r0
 8000df4:	0013      	movs	r3, r2
 8000df6:	1e62      	subs	r2, r4, #1
 8000df8:	4194      	sbcs	r4, r2
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	0763      	lsls	r3, r4, #29
 8000dfe:	d004      	beq.n	8000e0a <__aeabi_fmul+0x1f2>
 8000e00:	230f      	movs	r3, #15
 8000e02:	4023      	ands	r3, r4
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d000      	beq.n	8000e0a <__aeabi_fmul+0x1f2>
 8000e08:	3404      	adds	r4, #4
 8000e0a:	0163      	lsls	r3, r4, #5
 8000e0c:	d51a      	bpl.n	8000e44 <__aeabi_fmul+0x22c>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2400      	movs	r4, #0
 8000e12:	e747      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e14:	2080      	movs	r0, #128	; 0x80
 8000e16:	03c0      	lsls	r0, r0, #15
 8000e18:	4204      	tst	r4, r0
 8000e1a:	d009      	beq.n	8000e30 <__aeabi_fmul+0x218>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4203      	tst	r3, r0
 8000e20:	d106      	bne.n	8000e30 <__aeabi_fmul+0x218>
 8000e22:	4644      	mov	r4, r8
 8000e24:	4304      	orrs	r4, r0
 8000e26:	0264      	lsls	r4, r4, #9
 8000e28:	0039      	movs	r1, r7
 8000e2a:	20ff      	movs	r0, #255	; 0xff
 8000e2c:	0a64      	lsrs	r4, r4, #9
 8000e2e:	e739      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	03c0      	lsls	r0, r0, #15
 8000e34:	4304      	orrs	r4, r0
 8000e36:	0264      	lsls	r4, r4, #9
 8000e38:	0031      	movs	r1, r6
 8000e3a:	20ff      	movs	r0, #255	; 0xff
 8000e3c:	0a64      	lsrs	r4, r4, #9
 8000e3e:	e731      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e40:	0028      	movs	r0, r5
 8000e42:	e765      	b.n	8000d10 <__aeabi_fmul+0xf8>
 8000e44:	01a4      	lsls	r4, r4, #6
 8000e46:	2000      	movs	r0, #0
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e72b      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	03c0      	lsls	r0, r0, #15
 8000e50:	4304      	orrs	r4, r0
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	e724      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08009278 	.word	0x08009278
 8000e60:	f7ffffff 	.word	0xf7ffffff

08000e64 <__aeabi_fsub>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	46ce      	mov	lr, r9
 8000e68:	4647      	mov	r7, r8
 8000e6a:	0243      	lsls	r3, r0, #9
 8000e6c:	0a5b      	lsrs	r3, r3, #9
 8000e6e:	024e      	lsls	r6, r1, #9
 8000e70:	00da      	lsls	r2, r3, #3
 8000e72:	4694      	mov	ip, r2
 8000e74:	0a72      	lsrs	r2, r6, #9
 8000e76:	4691      	mov	r9, r2
 8000e78:	0045      	lsls	r5, r0, #1
 8000e7a:	004a      	lsls	r2, r1, #1
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	0e2d      	lsrs	r5, r5, #24
 8000e80:	001f      	movs	r7, r3
 8000e82:	0fc4      	lsrs	r4, r0, #31
 8000e84:	0e12      	lsrs	r2, r2, #24
 8000e86:	0fc9      	lsrs	r1, r1, #31
 8000e88:	09b6      	lsrs	r6, r6, #6
 8000e8a:	2aff      	cmp	r2, #255	; 0xff
 8000e8c:	d05b      	beq.n	8000f46 <__aeabi_fsub+0xe2>
 8000e8e:	2001      	movs	r0, #1
 8000e90:	4041      	eors	r1, r0
 8000e92:	428c      	cmp	r4, r1
 8000e94:	d039      	beq.n	8000f0a <__aeabi_fsub+0xa6>
 8000e96:	1aa8      	subs	r0, r5, r2
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	dd5a      	ble.n	8000f52 <__aeabi_fsub+0xee>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d06a      	beq.n	8000f76 <__aeabi_fsub+0x112>
 8000ea0:	2dff      	cmp	r5, #255	; 0xff
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x42>
 8000ea4:	e0d9      	b.n	800105a <__aeabi_fsub+0x1f6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	04d2      	lsls	r2, r2, #19
 8000eaa:	4316      	orrs	r6, r2
 8000eac:	281b      	cmp	r0, #27
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_fsub+0x4e>
 8000eb0:	e0e9      	b.n	8001086 <__aeabi_fsub+0x222>
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	1a18      	subs	r0, r3, r0
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x5a>
 8000ebc:	e0b4      	b.n	8001028 <__aeabi_fsub+0x1c4>
 8000ebe:	0180      	lsls	r0, r0, #6
 8000ec0:	0987      	lsrs	r7, r0, #6
 8000ec2:	0038      	movs	r0, r7
 8000ec4:	f002 f894 	bl	8002ff0 <__clzsi2>
 8000ec8:	3805      	subs	r0, #5
 8000eca:	4087      	lsls	r7, r0
 8000ecc:	4285      	cmp	r5, r0
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_fsub+0x6e>
 8000ed0:	e0cc      	b.n	800106c <__aeabi_fsub+0x208>
 8000ed2:	1a2d      	subs	r5, r5, r0
 8000ed4:	48b5      	ldr	r0, [pc, #724]	; (80011ac <__aeabi_fsub+0x348>)
 8000ed6:	4038      	ands	r0, r7
 8000ed8:	0743      	lsls	r3, r0, #29
 8000eda:	d004      	beq.n	8000ee6 <__aeabi_fsub+0x82>
 8000edc:	230f      	movs	r3, #15
 8000ede:	4003      	ands	r3, r0
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_fsub+0x82>
 8000ee4:	3004      	adds	r0, #4
 8000ee6:	0143      	lsls	r3, r0, #5
 8000ee8:	d400      	bmi.n	8000eec <__aeabi_fsub+0x88>
 8000eea:	e0a0      	b.n	800102e <__aeabi_fsub+0x1ca>
 8000eec:	1c6a      	adds	r2, r5, #1
 8000eee:	2dfe      	cmp	r5, #254	; 0xfe
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x90>
 8000ef2:	e08d      	b.n	8001010 <__aeabi_fsub+0x1ac>
 8000ef4:	0180      	lsls	r0, r0, #6
 8000ef6:	0a47      	lsrs	r7, r0, #9
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	05d0      	lsls	r0, r2, #23
 8000efc:	4338      	orrs	r0, r7
 8000efe:	07e4      	lsls	r4, r4, #31
 8000f00:	4320      	orrs	r0, r4
 8000f02:	bcc0      	pop	{r6, r7}
 8000f04:	46b9      	mov	r9, r7
 8000f06:	46b0      	mov	r8, r6
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0a:	1aa8      	subs	r0, r5, r2
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	dd45      	ble.n	8000f9e <__aeabi_fsub+0x13a>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d070      	beq.n	8000ff8 <__aeabi_fsub+0x194>
 8000f16:	2dff      	cmp	r5, #255	; 0xff
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0xb8>
 8000f1a:	e09e      	b.n	800105a <__aeabi_fsub+0x1f6>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	04db      	lsls	r3, r3, #19
 8000f20:	431e      	orrs	r6, r3
 8000f22:	4643      	mov	r3, r8
 8000f24:	2b1b      	cmp	r3, #27
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0xc6>
 8000f28:	e0d2      	b.n	80010d0 <__aeabi_fsub+0x26c>
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4460      	add	r0, ip
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d57a      	bpl.n	8001028 <__aeabi_fsub+0x1c4>
 8000f32:	3501      	adds	r5, #1
 8000f34:	2dff      	cmp	r5, #255	; 0xff
 8000f36:	d06b      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4a9d      	ldr	r2, [pc, #628]	; (80011b0 <__aeabi_fsub+0x34c>)
 8000f3c:	4003      	ands	r3, r0
 8000f3e:	0840      	lsrs	r0, r0, #1
 8000f40:	4010      	ands	r0, r2
 8000f42:	4318      	orrs	r0, r3
 8000f44:	e7c8      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d020      	beq.n	8000f8c <__aeabi_fsub+0x128>
 8000f4a:	428c      	cmp	r4, r1
 8000f4c:	d023      	beq.n	8000f96 <__aeabi_fsub+0x132>
 8000f4e:	0028      	movs	r0, r5
 8000f50:	38ff      	subs	r0, #255	; 0xff
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d039      	beq.n	8000fca <__aeabi_fsub+0x166>
 8000f56:	1b57      	subs	r7, r2, r5
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0xfa>
 8000f5c:	e09d      	b.n	800109a <__aeabi_fsub+0x236>
 8000f5e:	4663      	mov	r3, ip
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x102>
 8000f64:	e0db      	b.n	800111e <__aeabi_fsub+0x2ba>
 8000f66:	1e7b      	subs	r3, r7, #1
 8000f68:	2f01      	cmp	r7, #1
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x10a>
 8000f6c:	e10d      	b.n	800118a <__aeabi_fsub+0x326>
 8000f6e:	2fff      	cmp	r7, #255	; 0xff
 8000f70:	d071      	beq.n	8001056 <__aeabi_fsub+0x1f2>
 8000f72:	001f      	movs	r7, r3
 8000f74:	e098      	b.n	80010a8 <__aeabi_fsub+0x244>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x118>
 8000f7a:	e0a7      	b.n	80010cc <__aeabi_fsub+0x268>
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	2801      	cmp	r0, #1
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x120>
 8000f82:	e0e6      	b.n	8001152 <__aeabi_fsub+0x2ee>
 8000f84:	28ff      	cmp	r0, #255	; 0xff
 8000f86:	d068      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8000f88:	0010      	movs	r0, r2
 8000f8a:	e78f      	b.n	8000eac <__aeabi_fsub+0x48>
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4041      	eors	r1, r0
 8000f90:	42a1      	cmp	r1, r4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x132>
 8000f94:	e77f      	b.n	8000e96 <__aeabi_fsub+0x32>
 8000f96:	20ff      	movs	r0, #255	; 0xff
 8000f98:	4240      	negs	r0, r0
 8000f9a:	4680      	mov	r8, r0
 8000f9c:	44a8      	add	r8, r5
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d038      	beq.n	8001016 <__aeabi_fsub+0x1b2>
 8000fa4:	1b51      	subs	r1, r2, r5
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x148>
 8000faa:	e0ae      	b.n	800110a <__aeabi_fsub+0x2a6>
 8000fac:	2aff      	cmp	r2, #255	; 0xff
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x14e>
 8000fb0:	e0df      	b.n	8001172 <__aeabi_fsub+0x30e>
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	4660      	mov	r0, ip
 8000fb6:	04db      	lsls	r3, r3, #19
 8000fb8:	4318      	orrs	r0, r3
 8000fba:	4684      	mov	ip, r0
 8000fbc:	291b      	cmp	r1, #27
 8000fbe:	dc00      	bgt.n	8000fc2 <__aeabi_fsub+0x15e>
 8000fc0:	e0d9      	b.n	8001176 <__aeabi_fsub+0x312>
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	0015      	movs	r5, r2
 8000fc6:	1980      	adds	r0, r0, r6
 8000fc8:	e7b1      	b.n	8000f2e <__aeabi_fsub+0xca>
 8000fca:	20fe      	movs	r0, #254	; 0xfe
 8000fcc:	1c6a      	adds	r2, r5, #1
 8000fce:	4210      	tst	r0, r2
 8000fd0:	d171      	bne.n	80010b6 <__aeabi_fsub+0x252>
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_fsub+0x174>
 8000fd6:	e0a6      	b.n	8001126 <__aeabi_fsub+0x2c2>
 8000fd8:	4663      	mov	r3, ip
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x17c>
 8000fde:	e0d9      	b.n	8001194 <__aeabi_fsub+0x330>
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2e00      	cmp	r6, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x184>
 8000fe6:	e788      	b.n	8000efa <__aeabi_fsub+0x96>
 8000fe8:	1b98      	subs	r0, r3, r6
 8000fea:	0143      	lsls	r3, r0, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0x18c>
 8000fee:	e0e1      	b.n	80011b4 <__aeabi_fsub+0x350>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	1af0      	subs	r0, r6, r3
 8000ff6:	e76f      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x19a>
 8000ffc:	e0b7      	b.n	800116e <__aeabi_fsub+0x30a>
 8000ffe:	0002      	movs	r2, r0
 8001000:	3a01      	subs	r2, #1
 8001002:	2801      	cmp	r0, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1a4>
 8001006:	e09c      	b.n	8001142 <__aeabi_fsub+0x2de>
 8001008:	28ff      	cmp	r0, #255	; 0xff
 800100a:	d026      	beq.n	800105a <__aeabi_fsub+0x1f6>
 800100c:	4690      	mov	r8, r2
 800100e:	e788      	b.n	8000f22 <__aeabi_fsub+0xbe>
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	2700      	movs	r7, #0
 8001014:	e771      	b.n	8000efa <__aeabi_fsub+0x96>
 8001016:	20fe      	movs	r0, #254	; 0xfe
 8001018:	1c6a      	adds	r2, r5, #1
 800101a:	4210      	tst	r0, r2
 800101c:	d064      	beq.n	80010e8 <__aeabi_fsub+0x284>
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d0f6      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 8001022:	0015      	movs	r5, r2
 8001024:	4466      	add	r6, ip
 8001026:	0870      	lsrs	r0, r6, #1
 8001028:	0743      	lsls	r3, r0, #29
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x1ca>
 800102c:	e756      	b.n	8000edc <__aeabi_fsub+0x78>
 800102e:	08c3      	lsrs	r3, r0, #3
 8001030:	2dff      	cmp	r5, #255	; 0xff
 8001032:	d012      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	0a5f      	lsrs	r7, r3, #9
 8001038:	b2ea      	uxtb	r2, r5
 800103a:	e75e      	b.n	8000efa <__aeabi_fsub+0x96>
 800103c:	4662      	mov	r2, ip
 800103e:	2a00      	cmp	r2, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_fsub+0x1e0>
 8001042:	e096      	b.n	8001172 <__aeabi_fsub+0x30e>
 8001044:	2e00      	cmp	r6, #0
 8001046:	d008      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	03d2      	lsls	r2, r2, #15
 800104c:	4213      	tst	r3, r2
 800104e:	d004      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001050:	4648      	mov	r0, r9
 8001052:	4210      	tst	r0, r2
 8001054:	d101      	bne.n	800105a <__aeabi_fsub+0x1f6>
 8001056:	000c      	movs	r4, r1
 8001058:	464b      	mov	r3, r9
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0d8      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 800105e:	2780      	movs	r7, #128	; 0x80
 8001060:	03ff      	lsls	r7, r7, #15
 8001062:	431f      	orrs	r7, r3
 8001064:	027f      	lsls	r7, r7, #9
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	0a7f      	lsrs	r7, r7, #9
 800106a:	e746      	b.n	8000efa <__aeabi_fsub+0x96>
 800106c:	2320      	movs	r3, #32
 800106e:	003a      	movs	r2, r7
 8001070:	1b45      	subs	r5, r0, r5
 8001072:	0038      	movs	r0, r7
 8001074:	3501      	adds	r5, #1
 8001076:	40ea      	lsrs	r2, r5
 8001078:	1b5d      	subs	r5, r3, r5
 800107a:	40a8      	lsls	r0, r5
 800107c:	1e43      	subs	r3, r0, #1
 800107e:	4198      	sbcs	r0, r3
 8001080:	2500      	movs	r5, #0
 8001082:	4310      	orrs	r0, r2
 8001084:	e728      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8001086:	2320      	movs	r3, #32
 8001088:	1a1b      	subs	r3, r3, r0
 800108a:	0032      	movs	r2, r6
 800108c:	409e      	lsls	r6, r3
 800108e:	40c2      	lsrs	r2, r0
 8001090:	0030      	movs	r0, r6
 8001092:	1e43      	subs	r3, r0, #1
 8001094:	4198      	sbcs	r0, r3
 8001096:	4310      	orrs	r0, r2
 8001098:	e70c      	b.n	8000eb4 <__aeabi_fsub+0x50>
 800109a:	2aff      	cmp	r2, #255	; 0xff
 800109c:	d0db      	beq.n	8001056 <__aeabi_fsub+0x1f2>
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	4660      	mov	r0, ip
 80010a2:	04db      	lsls	r3, r3, #19
 80010a4:	4318      	orrs	r0, r3
 80010a6:	4684      	mov	ip, r0
 80010a8:	2f1b      	cmp	r7, #27
 80010aa:	dd56      	ble.n	800115a <__aeabi_fsub+0x2f6>
 80010ac:	2001      	movs	r0, #1
 80010ae:	000c      	movs	r4, r1
 80010b0:	0015      	movs	r5, r2
 80010b2:	1a30      	subs	r0, r6, r0
 80010b4:	e700      	b.n	8000eb8 <__aeabi_fsub+0x54>
 80010b6:	4663      	mov	r3, ip
 80010b8:	1b9f      	subs	r7, r3, r6
 80010ba:	017b      	lsls	r3, r7, #5
 80010bc:	d43d      	bmi.n	800113a <__aeabi_fsub+0x2d6>
 80010be:	2f00      	cmp	r7, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x260>
 80010c2:	e6fe      	b.n	8000ec2 <__aeabi_fsub+0x5e>
 80010c4:	2400      	movs	r4, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2700      	movs	r7, #0
 80010ca:	e716      	b.n	8000efa <__aeabi_fsub+0x96>
 80010cc:	0005      	movs	r5, r0
 80010ce:	e7af      	b.n	8001030 <__aeabi_fsub+0x1cc>
 80010d0:	0032      	movs	r2, r6
 80010d2:	4643      	mov	r3, r8
 80010d4:	4641      	mov	r1, r8
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	2320      	movs	r3, #32
 80010da:	1a5b      	subs	r3, r3, r1
 80010dc:	409e      	lsls	r6, r3
 80010de:	0030      	movs	r0, r6
 80010e0:	1e43      	subs	r3, r0, #1
 80010e2:	4198      	sbcs	r0, r3
 80010e4:	4310      	orrs	r0, r2
 80010e6:	e721      	b.n	8000f2c <__aeabi_fsub+0xc8>
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d1a7      	bne.n	800103c <__aeabi_fsub+0x1d8>
 80010ec:	4663      	mov	r3, ip
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d059      	beq.n	80011a6 <__aeabi_fsub+0x342>
 80010f2:	2200      	movs	r2, #0
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x296>
 80010f8:	e6ff      	b.n	8000efa <__aeabi_fsub+0x96>
 80010fa:	0030      	movs	r0, r6
 80010fc:	4460      	add	r0, ip
 80010fe:	0143      	lsls	r3, r0, #5
 8001100:	d592      	bpl.n	8001028 <__aeabi_fsub+0x1c4>
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <__aeabi_fsub+0x348>)
 8001104:	3501      	adds	r5, #1
 8001106:	4018      	ands	r0, r3
 8001108:	e78e      	b.n	8001028 <__aeabi_fsub+0x1c4>
 800110a:	4663      	mov	r3, ip
 800110c:	2b00      	cmp	r3, #0
 800110e:	d047      	beq.n	80011a0 <__aeabi_fsub+0x33c>
 8001110:	1e4b      	subs	r3, r1, #1
 8001112:	2901      	cmp	r1, #1
 8001114:	d015      	beq.n	8001142 <__aeabi_fsub+0x2de>
 8001116:	29ff      	cmp	r1, #255	; 0xff
 8001118:	d02b      	beq.n	8001172 <__aeabi_fsub+0x30e>
 800111a:	0019      	movs	r1, r3
 800111c:	e74e      	b.n	8000fbc <__aeabi_fsub+0x158>
 800111e:	000c      	movs	r4, r1
 8001120:	464b      	mov	r3, r9
 8001122:	003d      	movs	r5, r7
 8001124:	e784      	b.n	8001030 <__aeabi_fsub+0x1cc>
 8001126:	4662      	mov	r2, ip
 8001128:	2a00      	cmp	r2, #0
 800112a:	d18b      	bne.n	8001044 <__aeabi_fsub+0x1e0>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d192      	bne.n	8001056 <__aeabi_fsub+0x1f2>
 8001130:	2780      	movs	r7, #128	; 0x80
 8001132:	2400      	movs	r4, #0
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	03ff      	lsls	r7, r7, #15
 8001138:	e6df      	b.n	8000efa <__aeabi_fsub+0x96>
 800113a:	4663      	mov	r3, ip
 800113c:	000c      	movs	r4, r1
 800113e:	1af7      	subs	r7, r6, r3
 8001140:	e6bf      	b.n	8000ec2 <__aeabi_fsub+0x5e>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	2501      	movs	r5, #1
 8001148:	0143      	lsls	r3, r0, #5
 800114a:	d400      	bmi.n	800114e <__aeabi_fsub+0x2ea>
 800114c:	e76c      	b.n	8001028 <__aeabi_fsub+0x1c4>
 800114e:	2502      	movs	r5, #2
 8001150:	e6f2      	b.n	8000f38 <__aeabi_fsub+0xd4>
 8001152:	4663      	mov	r3, ip
 8001154:	2501      	movs	r5, #1
 8001156:	1b98      	subs	r0, r3, r6
 8001158:	e6ae      	b.n	8000eb8 <__aeabi_fsub+0x54>
 800115a:	2320      	movs	r3, #32
 800115c:	4664      	mov	r4, ip
 800115e:	4660      	mov	r0, ip
 8001160:	40fc      	lsrs	r4, r7
 8001162:	1bdf      	subs	r7, r3, r7
 8001164:	40b8      	lsls	r0, r7
 8001166:	1e43      	subs	r3, r0, #1
 8001168:	4198      	sbcs	r0, r3
 800116a:	4320      	orrs	r0, r4
 800116c:	e79f      	b.n	80010ae <__aeabi_fsub+0x24a>
 800116e:	0005      	movs	r5, r0
 8001170:	e75e      	b.n	8001030 <__aeabi_fsub+0x1cc>
 8001172:	464b      	mov	r3, r9
 8001174:	e771      	b.n	800105a <__aeabi_fsub+0x1f6>
 8001176:	2320      	movs	r3, #32
 8001178:	4665      	mov	r5, ip
 800117a:	4660      	mov	r0, ip
 800117c:	40cd      	lsrs	r5, r1
 800117e:	1a59      	subs	r1, r3, r1
 8001180:	4088      	lsls	r0, r1
 8001182:	1e43      	subs	r3, r0, #1
 8001184:	4198      	sbcs	r0, r3
 8001186:	4328      	orrs	r0, r5
 8001188:	e71c      	b.n	8000fc4 <__aeabi_fsub+0x160>
 800118a:	4663      	mov	r3, ip
 800118c:	000c      	movs	r4, r1
 800118e:	2501      	movs	r5, #1
 8001190:	1af0      	subs	r0, r6, r3
 8001192:	e691      	b.n	8000eb8 <__aeabi_fsub+0x54>
 8001194:	2e00      	cmp	r6, #0
 8001196:	d095      	beq.n	80010c4 <__aeabi_fsub+0x260>
 8001198:	000c      	movs	r4, r1
 800119a:	464f      	mov	r7, r9
 800119c:	2200      	movs	r2, #0
 800119e:	e6ac      	b.n	8000efa <__aeabi_fsub+0x96>
 80011a0:	464b      	mov	r3, r9
 80011a2:	000d      	movs	r5, r1
 80011a4:	e744      	b.n	8001030 <__aeabi_fsub+0x1cc>
 80011a6:	464f      	mov	r7, r9
 80011a8:	2200      	movs	r2, #0
 80011aa:	e6a6      	b.n	8000efa <__aeabi_fsub+0x96>
 80011ac:	fbffffff 	.word	0xfbffffff
 80011b0:	7dffffff 	.word	0x7dffffff
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0x356>
 80011b8:	e736      	b.n	8001028 <__aeabi_fsub+0x1c4>
 80011ba:	2400      	movs	r4, #0
 80011bc:	2700      	movs	r7, #0
 80011be:	e69c      	b.n	8000efa <__aeabi_fsub+0x96>

080011c0 <__aeabi_f2iz>:
 80011c0:	0241      	lsls	r1, r0, #9
 80011c2:	0042      	lsls	r2, r0, #1
 80011c4:	0fc3      	lsrs	r3, r0, #31
 80011c6:	0a49      	lsrs	r1, r1, #9
 80011c8:	2000      	movs	r0, #0
 80011ca:	0e12      	lsrs	r2, r2, #24
 80011cc:	2a7e      	cmp	r2, #126	; 0x7e
 80011ce:	dd03      	ble.n	80011d8 <__aeabi_f2iz+0x18>
 80011d0:	2a9d      	cmp	r2, #157	; 0x9d
 80011d2:	dd02      	ble.n	80011da <__aeabi_f2iz+0x1a>
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <__aeabi_f2iz+0x3c>)
 80011d6:	1898      	adds	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	2080      	movs	r0, #128	; 0x80
 80011dc:	0400      	lsls	r0, r0, #16
 80011de:	4301      	orrs	r1, r0
 80011e0:	2a95      	cmp	r2, #149	; 0x95
 80011e2:	dc07      	bgt.n	80011f4 <__aeabi_f2iz+0x34>
 80011e4:	2096      	movs	r0, #150	; 0x96
 80011e6:	1a82      	subs	r2, r0, r2
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	4248      	negs	r0, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f3      	bne.n	80011d8 <__aeabi_f2iz+0x18>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7f1      	b.n	80011d8 <__aeabi_f2iz+0x18>
 80011f4:	3a96      	subs	r2, #150	; 0x96
 80011f6:	4091      	lsls	r1, r2
 80011f8:	e7f7      	b.n	80011ea <__aeabi_f2iz+0x2a>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	7fffffff 	.word	0x7fffffff

08001200 <__aeabi_ui2f>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	1e05      	subs	r5, r0, #0
 8001204:	d00e      	beq.n	8001224 <__aeabi_ui2f+0x24>
 8001206:	f001 fef3 	bl	8002ff0 <__clzsi2>
 800120a:	239e      	movs	r3, #158	; 0x9e
 800120c:	0004      	movs	r4, r0
 800120e:	1a1b      	subs	r3, r3, r0
 8001210:	2b96      	cmp	r3, #150	; 0x96
 8001212:	dc0c      	bgt.n	800122e <__aeabi_ui2f+0x2e>
 8001214:	2808      	cmp	r0, #8
 8001216:	dd01      	ble.n	800121c <__aeabi_ui2f+0x1c>
 8001218:	3c08      	subs	r4, #8
 800121a:	40a5      	lsls	r5, r4
 800121c:	026d      	lsls	r5, r5, #9
 800121e:	0a6d      	lsrs	r5, r5, #9
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	e001      	b.n	8001228 <__aeabi_ui2f+0x28>
 8001224:	2000      	movs	r0, #0
 8001226:	2500      	movs	r5, #0
 8001228:	05c0      	lsls	r0, r0, #23
 800122a:	4328      	orrs	r0, r5
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	2b99      	cmp	r3, #153	; 0x99
 8001230:	dd09      	ble.n	8001246 <__aeabi_ui2f+0x46>
 8001232:	0002      	movs	r2, r0
 8001234:	0029      	movs	r1, r5
 8001236:	321b      	adds	r2, #27
 8001238:	4091      	lsls	r1, r2
 800123a:	1e4a      	subs	r2, r1, #1
 800123c:	4191      	sbcs	r1, r2
 800123e:	2205      	movs	r2, #5
 8001240:	1a12      	subs	r2, r2, r0
 8001242:	40d5      	lsrs	r5, r2
 8001244:	430d      	orrs	r5, r1
 8001246:	2c05      	cmp	r4, #5
 8001248:	dc12      	bgt.n	8001270 <__aeabi_ui2f+0x70>
 800124a:	0029      	movs	r1, r5
 800124c:	4e0c      	ldr	r6, [pc, #48]	; (8001280 <__aeabi_ui2f+0x80>)
 800124e:	4031      	ands	r1, r6
 8001250:	076a      	lsls	r2, r5, #29
 8001252:	d009      	beq.n	8001268 <__aeabi_ui2f+0x68>
 8001254:	200f      	movs	r0, #15
 8001256:	4028      	ands	r0, r5
 8001258:	2804      	cmp	r0, #4
 800125a:	d005      	beq.n	8001268 <__aeabi_ui2f+0x68>
 800125c:	3104      	adds	r1, #4
 800125e:	014a      	lsls	r2, r1, #5
 8001260:	d502      	bpl.n	8001268 <__aeabi_ui2f+0x68>
 8001262:	239f      	movs	r3, #159	; 0x9f
 8001264:	4031      	ands	r1, r6
 8001266:	1b1b      	subs	r3, r3, r4
 8001268:	0189      	lsls	r1, r1, #6
 800126a:	0a4d      	lsrs	r5, r1, #9
 800126c:	b2d8      	uxtb	r0, r3
 800126e:	e7db      	b.n	8001228 <__aeabi_ui2f+0x28>
 8001270:	1f62      	subs	r2, r4, #5
 8001272:	4095      	lsls	r5, r2
 8001274:	0029      	movs	r1, r5
 8001276:	4e02      	ldr	r6, [pc, #8]	; (8001280 <__aeabi_ui2f+0x80>)
 8001278:	4031      	ands	r1, r6
 800127a:	076a      	lsls	r2, r5, #29
 800127c:	d0f4      	beq.n	8001268 <__aeabi_ui2f+0x68>
 800127e:	e7e9      	b.n	8001254 <__aeabi_ui2f+0x54>
 8001280:	fbffffff 	.word	0xfbffffff

08001284 <__aeabi_dadd>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	464f      	mov	r7, r9
 8001288:	4646      	mov	r6, r8
 800128a:	46d6      	mov	lr, sl
 800128c:	000d      	movs	r5, r1
 800128e:	0004      	movs	r4, r0
 8001290:	b5c0      	push	{r6, r7, lr}
 8001292:	001f      	movs	r7, r3
 8001294:	0011      	movs	r1, r2
 8001296:	0328      	lsls	r0, r5, #12
 8001298:	0f62      	lsrs	r2, r4, #29
 800129a:	0a40      	lsrs	r0, r0, #9
 800129c:	4310      	orrs	r0, r2
 800129e:	007a      	lsls	r2, r7, #1
 80012a0:	0d52      	lsrs	r2, r2, #21
 80012a2:	00e3      	lsls	r3, r4, #3
 80012a4:	033c      	lsls	r4, r7, #12
 80012a6:	4691      	mov	r9, r2
 80012a8:	0a64      	lsrs	r4, r4, #9
 80012aa:	0ffa      	lsrs	r2, r7, #31
 80012ac:	0f4f      	lsrs	r7, r1, #29
 80012ae:	006e      	lsls	r6, r5, #1
 80012b0:	4327      	orrs	r7, r4
 80012b2:	4692      	mov	sl, r2
 80012b4:	46b8      	mov	r8, r7
 80012b6:	0d76      	lsrs	r6, r6, #21
 80012b8:	0fed      	lsrs	r5, r5, #31
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	4295      	cmp	r5, r2
 80012be:	d100      	bne.n	80012c2 <__aeabi_dadd+0x3e>
 80012c0:	e099      	b.n	80013f6 <__aeabi_dadd+0x172>
 80012c2:	464c      	mov	r4, r9
 80012c4:	1b34      	subs	r4, r6, r4
 80012c6:	46a4      	mov	ip, r4
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	dc00      	bgt.n	80012ce <__aeabi_dadd+0x4a>
 80012cc:	e07c      	b.n	80013c8 <__aeabi_dadd+0x144>
 80012ce:	464a      	mov	r2, r9
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dadd+0x52>
 80012d4:	e0b8      	b.n	8001448 <__aeabi_dadd+0x1c4>
 80012d6:	4ac5      	ldr	r2, [pc, #788]	; (80015ec <__aeabi_dadd+0x368>)
 80012d8:	4296      	cmp	r6, r2
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x5a>
 80012dc:	e11c      	b.n	8001518 <__aeabi_dadd+0x294>
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	003c      	movs	r4, r7
 80012e2:	0412      	lsls	r2, r2, #16
 80012e4:	4314      	orrs	r4, r2
 80012e6:	46a0      	mov	r8, r4
 80012e8:	4662      	mov	r2, ip
 80012ea:	2a38      	cmp	r2, #56	; 0x38
 80012ec:	dd00      	ble.n	80012f0 <__aeabi_dadd+0x6c>
 80012ee:	e161      	b.n	80015b4 <__aeabi_dadd+0x330>
 80012f0:	2a1f      	cmp	r2, #31
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_dadd+0x72>
 80012f4:	e1cc      	b.n	8001690 <__aeabi_dadd+0x40c>
 80012f6:	4664      	mov	r4, ip
 80012f8:	2220      	movs	r2, #32
 80012fa:	1b12      	subs	r2, r2, r4
 80012fc:	4644      	mov	r4, r8
 80012fe:	4094      	lsls	r4, r2
 8001300:	000f      	movs	r7, r1
 8001302:	46a1      	mov	r9, r4
 8001304:	4664      	mov	r4, ip
 8001306:	4091      	lsls	r1, r2
 8001308:	40e7      	lsrs	r7, r4
 800130a:	464c      	mov	r4, r9
 800130c:	1e4a      	subs	r2, r1, #1
 800130e:	4191      	sbcs	r1, r2
 8001310:	433c      	orrs	r4, r7
 8001312:	4642      	mov	r2, r8
 8001314:	4321      	orrs	r1, r4
 8001316:	4664      	mov	r4, ip
 8001318:	40e2      	lsrs	r2, r4
 800131a:	1a80      	subs	r0, r0, r2
 800131c:	1a5c      	subs	r4, r3, r1
 800131e:	42a3      	cmp	r3, r4
 8001320:	419b      	sbcs	r3, r3
 8001322:	425f      	negs	r7, r3
 8001324:	1bc7      	subs	r7, r0, r7
 8001326:	023b      	lsls	r3, r7, #8
 8001328:	d400      	bmi.n	800132c <__aeabi_dadd+0xa8>
 800132a:	e0d0      	b.n	80014ce <__aeabi_dadd+0x24a>
 800132c:	027f      	lsls	r7, r7, #9
 800132e:	0a7f      	lsrs	r7, r7, #9
 8001330:	2f00      	cmp	r7, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0xb2>
 8001334:	e0ff      	b.n	8001536 <__aeabi_dadd+0x2b2>
 8001336:	0038      	movs	r0, r7
 8001338:	f001 fe5a 	bl	8002ff0 <__clzsi2>
 800133c:	0001      	movs	r1, r0
 800133e:	3908      	subs	r1, #8
 8001340:	2320      	movs	r3, #32
 8001342:	0022      	movs	r2, r4
 8001344:	1a5b      	subs	r3, r3, r1
 8001346:	408f      	lsls	r7, r1
 8001348:	40da      	lsrs	r2, r3
 800134a:	408c      	lsls	r4, r1
 800134c:	4317      	orrs	r7, r2
 800134e:	42b1      	cmp	r1, r6
 8001350:	da00      	bge.n	8001354 <__aeabi_dadd+0xd0>
 8001352:	e0ff      	b.n	8001554 <__aeabi_dadd+0x2d0>
 8001354:	1b89      	subs	r1, r1, r6
 8001356:	1c4b      	adds	r3, r1, #1
 8001358:	2b1f      	cmp	r3, #31
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0xda>
 800135c:	e0a8      	b.n	80014b0 <__aeabi_dadd+0x22c>
 800135e:	2220      	movs	r2, #32
 8001360:	0039      	movs	r1, r7
 8001362:	1ad2      	subs	r2, r2, r3
 8001364:	0020      	movs	r0, r4
 8001366:	4094      	lsls	r4, r2
 8001368:	4091      	lsls	r1, r2
 800136a:	40d8      	lsrs	r0, r3
 800136c:	1e62      	subs	r2, r4, #1
 800136e:	4194      	sbcs	r4, r2
 8001370:	40df      	lsrs	r7, r3
 8001372:	2600      	movs	r6, #0
 8001374:	4301      	orrs	r1, r0
 8001376:	430c      	orrs	r4, r1
 8001378:	0763      	lsls	r3, r4, #29
 800137a:	d009      	beq.n	8001390 <__aeabi_dadd+0x10c>
 800137c:	230f      	movs	r3, #15
 800137e:	4023      	ands	r3, r4
 8001380:	2b04      	cmp	r3, #4
 8001382:	d005      	beq.n	8001390 <__aeabi_dadd+0x10c>
 8001384:	1d23      	adds	r3, r4, #4
 8001386:	42a3      	cmp	r3, r4
 8001388:	41a4      	sbcs	r4, r4
 800138a:	4264      	negs	r4, r4
 800138c:	193f      	adds	r7, r7, r4
 800138e:	001c      	movs	r4, r3
 8001390:	023b      	lsls	r3, r7, #8
 8001392:	d400      	bmi.n	8001396 <__aeabi_dadd+0x112>
 8001394:	e09e      	b.n	80014d4 <__aeabi_dadd+0x250>
 8001396:	4b95      	ldr	r3, [pc, #596]	; (80015ec <__aeabi_dadd+0x368>)
 8001398:	3601      	adds	r6, #1
 800139a:	429e      	cmp	r6, r3
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x11c>
 800139e:	e0b7      	b.n	8001510 <__aeabi_dadd+0x28c>
 80013a0:	4a93      	ldr	r2, [pc, #588]	; (80015f0 <__aeabi_dadd+0x36c>)
 80013a2:	08e4      	lsrs	r4, r4, #3
 80013a4:	4017      	ands	r7, r2
 80013a6:	077b      	lsls	r3, r7, #29
 80013a8:	0571      	lsls	r1, r6, #21
 80013aa:	027f      	lsls	r7, r7, #9
 80013ac:	4323      	orrs	r3, r4
 80013ae:	0b3f      	lsrs	r7, r7, #12
 80013b0:	0d4a      	lsrs	r2, r1, #21
 80013b2:	0512      	lsls	r2, r2, #20
 80013b4:	433a      	orrs	r2, r7
 80013b6:	07ed      	lsls	r5, r5, #31
 80013b8:	432a      	orrs	r2, r5
 80013ba:	0018      	movs	r0, r3
 80013bc:	0011      	movs	r1, r2
 80013be:	bce0      	pop	{r5, r6, r7}
 80013c0:	46ba      	mov	sl, r7
 80013c2:	46b1      	mov	r9, r6
 80013c4:	46a8      	mov	r8, r5
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d04b      	beq.n	8001464 <__aeabi_dadd+0x1e0>
 80013cc:	464c      	mov	r4, r9
 80013ce:	1ba4      	subs	r4, r4, r6
 80013d0:	46a4      	mov	ip, r4
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dadd+0x154>
 80013d6:	e123      	b.n	8001620 <__aeabi_dadd+0x39c>
 80013d8:	0004      	movs	r4, r0
 80013da:	431c      	orrs	r4, r3
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dadd+0x15c>
 80013de:	e1af      	b.n	8001740 <__aeabi_dadd+0x4bc>
 80013e0:	4662      	mov	r2, ip
 80013e2:	1e54      	subs	r4, r2, #1
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x166>
 80013e8:	e215      	b.n	8001816 <__aeabi_dadd+0x592>
 80013ea:	4d80      	ldr	r5, [pc, #512]	; (80015ec <__aeabi_dadd+0x368>)
 80013ec:	45ac      	cmp	ip, r5
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x16e>
 80013f0:	e1c8      	b.n	8001784 <__aeabi_dadd+0x500>
 80013f2:	46a4      	mov	ip, r4
 80013f4:	e11b      	b.n	800162e <__aeabi_dadd+0x3aa>
 80013f6:	464a      	mov	r2, r9
 80013f8:	1ab2      	subs	r2, r6, r2
 80013fa:	4694      	mov	ip, r2
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	dc00      	bgt.n	8001402 <__aeabi_dadd+0x17e>
 8001400:	e0ac      	b.n	800155c <__aeabi_dadd+0x2d8>
 8001402:	464a      	mov	r2, r9
 8001404:	2a00      	cmp	r2, #0
 8001406:	d043      	beq.n	8001490 <__aeabi_dadd+0x20c>
 8001408:	4a78      	ldr	r2, [pc, #480]	; (80015ec <__aeabi_dadd+0x368>)
 800140a:	4296      	cmp	r6, r2
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x18c>
 800140e:	e1af      	b.n	8001770 <__aeabi_dadd+0x4ec>
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	003c      	movs	r4, r7
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	4314      	orrs	r4, r2
 8001418:	46a0      	mov	r8, r4
 800141a:	4662      	mov	r2, ip
 800141c:	2a38      	cmp	r2, #56	; 0x38
 800141e:	dc67      	bgt.n	80014f0 <__aeabi_dadd+0x26c>
 8001420:	2a1f      	cmp	r2, #31
 8001422:	dc00      	bgt.n	8001426 <__aeabi_dadd+0x1a2>
 8001424:	e15f      	b.n	80016e6 <__aeabi_dadd+0x462>
 8001426:	4647      	mov	r7, r8
 8001428:	3a20      	subs	r2, #32
 800142a:	40d7      	lsrs	r7, r2
 800142c:	4662      	mov	r2, ip
 800142e:	2a20      	cmp	r2, #32
 8001430:	d005      	beq.n	800143e <__aeabi_dadd+0x1ba>
 8001432:	4664      	mov	r4, ip
 8001434:	2240      	movs	r2, #64	; 0x40
 8001436:	1b12      	subs	r2, r2, r4
 8001438:	4644      	mov	r4, r8
 800143a:	4094      	lsls	r4, r2
 800143c:	4321      	orrs	r1, r4
 800143e:	1e4a      	subs	r2, r1, #1
 8001440:	4191      	sbcs	r1, r2
 8001442:	000c      	movs	r4, r1
 8001444:	433c      	orrs	r4, r7
 8001446:	e057      	b.n	80014f8 <__aeabi_dadd+0x274>
 8001448:	003a      	movs	r2, r7
 800144a:	430a      	orrs	r2, r1
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x1cc>
 800144e:	e105      	b.n	800165c <__aeabi_dadd+0x3d8>
 8001450:	0022      	movs	r2, r4
 8001452:	3a01      	subs	r2, #1
 8001454:	2c01      	cmp	r4, #1
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x1d6>
 8001458:	e182      	b.n	8001760 <__aeabi_dadd+0x4dc>
 800145a:	4c64      	ldr	r4, [pc, #400]	; (80015ec <__aeabi_dadd+0x368>)
 800145c:	45a4      	cmp	ip, r4
 800145e:	d05b      	beq.n	8001518 <__aeabi_dadd+0x294>
 8001460:	4694      	mov	ip, r2
 8001462:	e741      	b.n	80012e8 <__aeabi_dadd+0x64>
 8001464:	4c63      	ldr	r4, [pc, #396]	; (80015f4 <__aeabi_dadd+0x370>)
 8001466:	1c77      	adds	r7, r6, #1
 8001468:	4227      	tst	r7, r4
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x1ea>
 800146c:	e0c4      	b.n	80015f8 <__aeabi_dadd+0x374>
 800146e:	0004      	movs	r4, r0
 8001470:	431c      	orrs	r4, r3
 8001472:	2e00      	cmp	r6, #0
 8001474:	d000      	beq.n	8001478 <__aeabi_dadd+0x1f4>
 8001476:	e169      	b.n	800174c <__aeabi_dadd+0x4c8>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x1fa>
 800147c:	e1bf      	b.n	80017fe <__aeabi_dadd+0x57a>
 800147e:	4644      	mov	r4, r8
 8001480:	430c      	orrs	r4, r1
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x202>
 8001484:	e1d0      	b.n	8001828 <__aeabi_dadd+0x5a4>
 8001486:	0742      	lsls	r2, r0, #29
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	4313      	orrs	r3, r2
 800148c:	08c0      	lsrs	r0, r0, #3
 800148e:	e029      	b.n	80014e4 <__aeabi_dadd+0x260>
 8001490:	003a      	movs	r2, r7
 8001492:	430a      	orrs	r2, r1
 8001494:	d100      	bne.n	8001498 <__aeabi_dadd+0x214>
 8001496:	e170      	b.n	800177a <__aeabi_dadd+0x4f6>
 8001498:	4662      	mov	r2, ip
 800149a:	4664      	mov	r4, ip
 800149c:	3a01      	subs	r2, #1
 800149e:	2c01      	cmp	r4, #1
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dadd+0x220>
 80014a2:	e0e0      	b.n	8001666 <__aeabi_dadd+0x3e2>
 80014a4:	4c51      	ldr	r4, [pc, #324]	; (80015ec <__aeabi_dadd+0x368>)
 80014a6:	45a4      	cmp	ip, r4
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x228>
 80014aa:	e161      	b.n	8001770 <__aeabi_dadd+0x4ec>
 80014ac:	4694      	mov	ip, r2
 80014ae:	e7b4      	b.n	800141a <__aeabi_dadd+0x196>
 80014b0:	003a      	movs	r2, r7
 80014b2:	391f      	subs	r1, #31
 80014b4:	40ca      	lsrs	r2, r1
 80014b6:	0011      	movs	r1, r2
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d003      	beq.n	80014c4 <__aeabi_dadd+0x240>
 80014bc:	2240      	movs	r2, #64	; 0x40
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	409f      	lsls	r7, r3
 80014c2:	433c      	orrs	r4, r7
 80014c4:	1e63      	subs	r3, r4, #1
 80014c6:	419c      	sbcs	r4, r3
 80014c8:	2700      	movs	r7, #0
 80014ca:	2600      	movs	r6, #0
 80014cc:	430c      	orrs	r4, r1
 80014ce:	0763      	lsls	r3, r4, #29
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dadd+0x250>
 80014d2:	e753      	b.n	800137c <__aeabi_dadd+0xf8>
 80014d4:	46b4      	mov	ip, r6
 80014d6:	08e4      	lsrs	r4, r4, #3
 80014d8:	077b      	lsls	r3, r7, #29
 80014da:	4323      	orrs	r3, r4
 80014dc:	08f8      	lsrs	r0, r7, #3
 80014de:	4a43      	ldr	r2, [pc, #268]	; (80015ec <__aeabi_dadd+0x368>)
 80014e0:	4594      	cmp	ip, r2
 80014e2:	d01d      	beq.n	8001520 <__aeabi_dadd+0x29c>
 80014e4:	4662      	mov	r2, ip
 80014e6:	0307      	lsls	r7, r0, #12
 80014e8:	0552      	lsls	r2, r2, #21
 80014ea:	0b3f      	lsrs	r7, r7, #12
 80014ec:	0d52      	lsrs	r2, r2, #21
 80014ee:	e760      	b.n	80013b2 <__aeabi_dadd+0x12e>
 80014f0:	4644      	mov	r4, r8
 80014f2:	430c      	orrs	r4, r1
 80014f4:	1e62      	subs	r2, r4, #1
 80014f6:	4194      	sbcs	r4, r2
 80014f8:	18e4      	adds	r4, r4, r3
 80014fa:	429c      	cmp	r4, r3
 80014fc:	419b      	sbcs	r3, r3
 80014fe:	425f      	negs	r7, r3
 8001500:	183f      	adds	r7, r7, r0
 8001502:	023b      	lsls	r3, r7, #8
 8001504:	d5e3      	bpl.n	80014ce <__aeabi_dadd+0x24a>
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <__aeabi_dadd+0x368>)
 8001508:	3601      	adds	r6, #1
 800150a:	429e      	cmp	r6, r3
 800150c:	d000      	beq.n	8001510 <__aeabi_dadd+0x28c>
 800150e:	e0b5      	b.n	800167c <__aeabi_dadd+0x3f8>
 8001510:	0032      	movs	r2, r6
 8001512:	2700      	movs	r7, #0
 8001514:	2300      	movs	r3, #0
 8001516:	e74c      	b.n	80013b2 <__aeabi_dadd+0x12e>
 8001518:	0742      	lsls	r2, r0, #29
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	4313      	orrs	r3, r2
 800151e:	08c0      	lsrs	r0, r0, #3
 8001520:	001a      	movs	r2, r3
 8001522:	4302      	orrs	r2, r0
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x2a4>
 8001526:	e1e1      	b.n	80018ec <__aeabi_dadd+0x668>
 8001528:	2780      	movs	r7, #128	; 0x80
 800152a:	033f      	lsls	r7, r7, #12
 800152c:	4307      	orrs	r7, r0
 800152e:	033f      	lsls	r7, r7, #12
 8001530:	4a2e      	ldr	r2, [pc, #184]	; (80015ec <__aeabi_dadd+0x368>)
 8001532:	0b3f      	lsrs	r7, r7, #12
 8001534:	e73d      	b.n	80013b2 <__aeabi_dadd+0x12e>
 8001536:	0020      	movs	r0, r4
 8001538:	f001 fd5a 	bl	8002ff0 <__clzsi2>
 800153c:	0001      	movs	r1, r0
 800153e:	3118      	adds	r1, #24
 8001540:	291f      	cmp	r1, #31
 8001542:	dc00      	bgt.n	8001546 <__aeabi_dadd+0x2c2>
 8001544:	e6fc      	b.n	8001340 <__aeabi_dadd+0xbc>
 8001546:	3808      	subs	r0, #8
 8001548:	4084      	lsls	r4, r0
 800154a:	0027      	movs	r7, r4
 800154c:	2400      	movs	r4, #0
 800154e:	42b1      	cmp	r1, r6
 8001550:	db00      	blt.n	8001554 <__aeabi_dadd+0x2d0>
 8001552:	e6ff      	b.n	8001354 <__aeabi_dadd+0xd0>
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <__aeabi_dadd+0x36c>)
 8001556:	1a76      	subs	r6, r6, r1
 8001558:	4017      	ands	r7, r2
 800155a:	e70d      	b.n	8001378 <__aeabi_dadd+0xf4>
 800155c:	2a00      	cmp	r2, #0
 800155e:	d02f      	beq.n	80015c0 <__aeabi_dadd+0x33c>
 8001560:	464a      	mov	r2, r9
 8001562:	1b92      	subs	r2, r2, r6
 8001564:	4694      	mov	ip, r2
 8001566:	2e00      	cmp	r6, #0
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x2e8>
 800156a:	e0ad      	b.n	80016c8 <__aeabi_dadd+0x444>
 800156c:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <__aeabi_dadd+0x368>)
 800156e:	4591      	cmp	r9, r2
 8001570:	d100      	bne.n	8001574 <__aeabi_dadd+0x2f0>
 8001572:	e10f      	b.n	8001794 <__aeabi_dadd+0x510>
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	0412      	lsls	r2, r2, #16
 8001578:	4310      	orrs	r0, r2
 800157a:	4662      	mov	r2, ip
 800157c:	2a38      	cmp	r2, #56	; 0x38
 800157e:	dd00      	ble.n	8001582 <__aeabi_dadd+0x2fe>
 8001580:	e10f      	b.n	80017a2 <__aeabi_dadd+0x51e>
 8001582:	2a1f      	cmp	r2, #31
 8001584:	dd00      	ble.n	8001588 <__aeabi_dadd+0x304>
 8001586:	e180      	b.n	800188a <__aeabi_dadd+0x606>
 8001588:	4664      	mov	r4, ip
 800158a:	2220      	movs	r2, #32
 800158c:	001e      	movs	r6, r3
 800158e:	1b12      	subs	r2, r2, r4
 8001590:	4667      	mov	r7, ip
 8001592:	0004      	movs	r4, r0
 8001594:	4093      	lsls	r3, r2
 8001596:	4094      	lsls	r4, r2
 8001598:	40fe      	lsrs	r6, r7
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	4193      	sbcs	r3, r2
 800159e:	40f8      	lsrs	r0, r7
 80015a0:	4334      	orrs	r4, r6
 80015a2:	431c      	orrs	r4, r3
 80015a4:	4480      	add	r8, r0
 80015a6:	1864      	adds	r4, r4, r1
 80015a8:	428c      	cmp	r4, r1
 80015aa:	41bf      	sbcs	r7, r7
 80015ac:	427f      	negs	r7, r7
 80015ae:	464e      	mov	r6, r9
 80015b0:	4447      	add	r7, r8
 80015b2:	e7a6      	b.n	8001502 <__aeabi_dadd+0x27e>
 80015b4:	4642      	mov	r2, r8
 80015b6:	430a      	orrs	r2, r1
 80015b8:	0011      	movs	r1, r2
 80015ba:	1e4a      	subs	r2, r1, #1
 80015bc:	4191      	sbcs	r1, r2
 80015be:	e6ad      	b.n	800131c <__aeabi_dadd+0x98>
 80015c0:	4c0c      	ldr	r4, [pc, #48]	; (80015f4 <__aeabi_dadd+0x370>)
 80015c2:	1c72      	adds	r2, r6, #1
 80015c4:	4222      	tst	r2, r4
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x346>
 80015c8:	e0a1      	b.n	800170e <__aeabi_dadd+0x48a>
 80015ca:	0002      	movs	r2, r0
 80015cc:	431a      	orrs	r2, r3
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dadd+0x350>
 80015d2:	e0fa      	b.n	80017ca <__aeabi_dadd+0x546>
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x356>
 80015d8:	e145      	b.n	8001866 <__aeabi_dadd+0x5e2>
 80015da:	003a      	movs	r2, r7
 80015dc:	430a      	orrs	r2, r1
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x35e>
 80015e0:	e146      	b.n	8001870 <__aeabi_dadd+0x5ec>
 80015e2:	0742      	lsls	r2, r0, #29
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	e77b      	b.n	80014e4 <__aeabi_dadd+0x260>
 80015ec:	000007ff 	.word	0x000007ff
 80015f0:	ff7fffff 	.word	0xff7fffff
 80015f4:	000007fe 	.word	0x000007fe
 80015f8:	4647      	mov	r7, r8
 80015fa:	1a5c      	subs	r4, r3, r1
 80015fc:	1bc2      	subs	r2, r0, r7
 80015fe:	42a3      	cmp	r3, r4
 8001600:	41bf      	sbcs	r7, r7
 8001602:	427f      	negs	r7, r7
 8001604:	46b9      	mov	r9, r7
 8001606:	0017      	movs	r7, r2
 8001608:	464a      	mov	r2, r9
 800160a:	1abf      	subs	r7, r7, r2
 800160c:	023a      	lsls	r2, r7, #8
 800160e:	d500      	bpl.n	8001612 <__aeabi_dadd+0x38e>
 8001610:	e08d      	b.n	800172e <__aeabi_dadd+0x4aa>
 8001612:	0023      	movs	r3, r4
 8001614:	433b      	orrs	r3, r7
 8001616:	d000      	beq.n	800161a <__aeabi_dadd+0x396>
 8001618:	e68a      	b.n	8001330 <__aeabi_dadd+0xac>
 800161a:	2000      	movs	r0, #0
 800161c:	2500      	movs	r5, #0
 800161e:	e761      	b.n	80014e4 <__aeabi_dadd+0x260>
 8001620:	4cb4      	ldr	r4, [pc, #720]	; (80018f4 <__aeabi_dadd+0x670>)
 8001622:	45a1      	cmp	r9, r4
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x3a4>
 8001626:	e0ad      	b.n	8001784 <__aeabi_dadd+0x500>
 8001628:	2480      	movs	r4, #128	; 0x80
 800162a:	0424      	lsls	r4, r4, #16
 800162c:	4320      	orrs	r0, r4
 800162e:	4664      	mov	r4, ip
 8001630:	2c38      	cmp	r4, #56	; 0x38
 8001632:	dc3d      	bgt.n	80016b0 <__aeabi_dadd+0x42c>
 8001634:	4662      	mov	r2, ip
 8001636:	2c1f      	cmp	r4, #31
 8001638:	dd00      	ble.n	800163c <__aeabi_dadd+0x3b8>
 800163a:	e0b7      	b.n	80017ac <__aeabi_dadd+0x528>
 800163c:	2520      	movs	r5, #32
 800163e:	001e      	movs	r6, r3
 8001640:	1b2d      	subs	r5, r5, r4
 8001642:	0004      	movs	r4, r0
 8001644:	40ab      	lsls	r3, r5
 8001646:	40ac      	lsls	r4, r5
 8001648:	40d6      	lsrs	r6, r2
 800164a:	40d0      	lsrs	r0, r2
 800164c:	4642      	mov	r2, r8
 800164e:	1e5d      	subs	r5, r3, #1
 8001650:	41ab      	sbcs	r3, r5
 8001652:	4334      	orrs	r4, r6
 8001654:	1a12      	subs	r2, r2, r0
 8001656:	4690      	mov	r8, r2
 8001658:	4323      	orrs	r3, r4
 800165a:	e02c      	b.n	80016b6 <__aeabi_dadd+0x432>
 800165c:	0742      	lsls	r2, r0, #29
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	4313      	orrs	r3, r2
 8001662:	08c0      	lsrs	r0, r0, #3
 8001664:	e73b      	b.n	80014de <__aeabi_dadd+0x25a>
 8001666:	185c      	adds	r4, r3, r1
 8001668:	429c      	cmp	r4, r3
 800166a:	419b      	sbcs	r3, r3
 800166c:	4440      	add	r0, r8
 800166e:	425b      	negs	r3, r3
 8001670:	18c7      	adds	r7, r0, r3
 8001672:	2601      	movs	r6, #1
 8001674:	023b      	lsls	r3, r7, #8
 8001676:	d400      	bmi.n	800167a <__aeabi_dadd+0x3f6>
 8001678:	e729      	b.n	80014ce <__aeabi_dadd+0x24a>
 800167a:	2602      	movs	r6, #2
 800167c:	4a9e      	ldr	r2, [pc, #632]	; (80018f8 <__aeabi_dadd+0x674>)
 800167e:	0863      	lsrs	r3, r4, #1
 8001680:	4017      	ands	r7, r2
 8001682:	2201      	movs	r2, #1
 8001684:	4014      	ands	r4, r2
 8001686:	431c      	orrs	r4, r3
 8001688:	07fb      	lsls	r3, r7, #31
 800168a:	431c      	orrs	r4, r3
 800168c:	087f      	lsrs	r7, r7, #1
 800168e:	e673      	b.n	8001378 <__aeabi_dadd+0xf4>
 8001690:	4644      	mov	r4, r8
 8001692:	3a20      	subs	r2, #32
 8001694:	40d4      	lsrs	r4, r2
 8001696:	4662      	mov	r2, ip
 8001698:	2a20      	cmp	r2, #32
 800169a:	d005      	beq.n	80016a8 <__aeabi_dadd+0x424>
 800169c:	4667      	mov	r7, ip
 800169e:	2240      	movs	r2, #64	; 0x40
 80016a0:	1bd2      	subs	r2, r2, r7
 80016a2:	4647      	mov	r7, r8
 80016a4:	4097      	lsls	r7, r2
 80016a6:	4339      	orrs	r1, r7
 80016a8:	1e4a      	subs	r2, r1, #1
 80016aa:	4191      	sbcs	r1, r2
 80016ac:	4321      	orrs	r1, r4
 80016ae:	e635      	b.n	800131c <__aeabi_dadd+0x98>
 80016b0:	4303      	orrs	r3, r0
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	4183      	sbcs	r3, r0
 80016b6:	1acc      	subs	r4, r1, r3
 80016b8:	42a1      	cmp	r1, r4
 80016ba:	41bf      	sbcs	r7, r7
 80016bc:	4643      	mov	r3, r8
 80016be:	427f      	negs	r7, r7
 80016c0:	4655      	mov	r5, sl
 80016c2:	464e      	mov	r6, r9
 80016c4:	1bdf      	subs	r7, r3, r7
 80016c6:	e62e      	b.n	8001326 <__aeabi_dadd+0xa2>
 80016c8:	0002      	movs	r2, r0
 80016ca:	431a      	orrs	r2, r3
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dadd+0x44c>
 80016ce:	e0bd      	b.n	800184c <__aeabi_dadd+0x5c8>
 80016d0:	4662      	mov	r2, ip
 80016d2:	4664      	mov	r4, ip
 80016d4:	3a01      	subs	r2, #1
 80016d6:	2c01      	cmp	r4, #1
 80016d8:	d100      	bne.n	80016dc <__aeabi_dadd+0x458>
 80016da:	e0e5      	b.n	80018a8 <__aeabi_dadd+0x624>
 80016dc:	4c85      	ldr	r4, [pc, #532]	; (80018f4 <__aeabi_dadd+0x670>)
 80016de:	45a4      	cmp	ip, r4
 80016e0:	d058      	beq.n	8001794 <__aeabi_dadd+0x510>
 80016e2:	4694      	mov	ip, r2
 80016e4:	e749      	b.n	800157a <__aeabi_dadd+0x2f6>
 80016e6:	4664      	mov	r4, ip
 80016e8:	2220      	movs	r2, #32
 80016ea:	1b12      	subs	r2, r2, r4
 80016ec:	4644      	mov	r4, r8
 80016ee:	4094      	lsls	r4, r2
 80016f0:	000f      	movs	r7, r1
 80016f2:	46a1      	mov	r9, r4
 80016f4:	4664      	mov	r4, ip
 80016f6:	4091      	lsls	r1, r2
 80016f8:	40e7      	lsrs	r7, r4
 80016fa:	464c      	mov	r4, r9
 80016fc:	1e4a      	subs	r2, r1, #1
 80016fe:	4191      	sbcs	r1, r2
 8001700:	433c      	orrs	r4, r7
 8001702:	4642      	mov	r2, r8
 8001704:	430c      	orrs	r4, r1
 8001706:	4661      	mov	r1, ip
 8001708:	40ca      	lsrs	r2, r1
 800170a:	1880      	adds	r0, r0, r2
 800170c:	e6f4      	b.n	80014f8 <__aeabi_dadd+0x274>
 800170e:	4c79      	ldr	r4, [pc, #484]	; (80018f4 <__aeabi_dadd+0x670>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x492>
 8001714:	e6fd      	b.n	8001512 <__aeabi_dadd+0x28e>
 8001716:	1859      	adds	r1, r3, r1
 8001718:	4299      	cmp	r1, r3
 800171a:	419b      	sbcs	r3, r3
 800171c:	4440      	add	r0, r8
 800171e:	425f      	negs	r7, r3
 8001720:	19c7      	adds	r7, r0, r7
 8001722:	07fc      	lsls	r4, r7, #31
 8001724:	0849      	lsrs	r1, r1, #1
 8001726:	0016      	movs	r6, r2
 8001728:	430c      	orrs	r4, r1
 800172a:	087f      	lsrs	r7, r7, #1
 800172c:	e6cf      	b.n	80014ce <__aeabi_dadd+0x24a>
 800172e:	1acc      	subs	r4, r1, r3
 8001730:	42a1      	cmp	r1, r4
 8001732:	41bf      	sbcs	r7, r7
 8001734:	4643      	mov	r3, r8
 8001736:	427f      	negs	r7, r7
 8001738:	1a18      	subs	r0, r3, r0
 800173a:	4655      	mov	r5, sl
 800173c:	1bc7      	subs	r7, r0, r7
 800173e:	e5f7      	b.n	8001330 <__aeabi_dadd+0xac>
 8001740:	08c9      	lsrs	r1, r1, #3
 8001742:	077b      	lsls	r3, r7, #29
 8001744:	4655      	mov	r5, sl
 8001746:	430b      	orrs	r3, r1
 8001748:	08f8      	lsrs	r0, r7, #3
 800174a:	e6c8      	b.n	80014de <__aeabi_dadd+0x25a>
 800174c:	2c00      	cmp	r4, #0
 800174e:	d000      	beq.n	8001752 <__aeabi_dadd+0x4ce>
 8001750:	e081      	b.n	8001856 <__aeabi_dadd+0x5d2>
 8001752:	4643      	mov	r3, r8
 8001754:	430b      	orrs	r3, r1
 8001756:	d115      	bne.n	8001784 <__aeabi_dadd+0x500>
 8001758:	2080      	movs	r0, #128	; 0x80
 800175a:	2500      	movs	r5, #0
 800175c:	0300      	lsls	r0, r0, #12
 800175e:	e6e3      	b.n	8001528 <__aeabi_dadd+0x2a4>
 8001760:	1a5c      	subs	r4, r3, r1
 8001762:	42a3      	cmp	r3, r4
 8001764:	419b      	sbcs	r3, r3
 8001766:	1bc7      	subs	r7, r0, r7
 8001768:	425b      	negs	r3, r3
 800176a:	2601      	movs	r6, #1
 800176c:	1aff      	subs	r7, r7, r3
 800176e:	e5da      	b.n	8001326 <__aeabi_dadd+0xa2>
 8001770:	0742      	lsls	r2, r0, #29
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	4313      	orrs	r3, r2
 8001776:	08c0      	lsrs	r0, r0, #3
 8001778:	e6d2      	b.n	8001520 <__aeabi_dadd+0x29c>
 800177a:	0742      	lsls	r2, r0, #29
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	4313      	orrs	r3, r2
 8001780:	08c0      	lsrs	r0, r0, #3
 8001782:	e6ac      	b.n	80014de <__aeabi_dadd+0x25a>
 8001784:	4643      	mov	r3, r8
 8001786:	4642      	mov	r2, r8
 8001788:	08c9      	lsrs	r1, r1, #3
 800178a:	075b      	lsls	r3, r3, #29
 800178c:	4655      	mov	r5, sl
 800178e:	430b      	orrs	r3, r1
 8001790:	08d0      	lsrs	r0, r2, #3
 8001792:	e6c5      	b.n	8001520 <__aeabi_dadd+0x29c>
 8001794:	4643      	mov	r3, r8
 8001796:	4642      	mov	r2, r8
 8001798:	075b      	lsls	r3, r3, #29
 800179a:	08c9      	lsrs	r1, r1, #3
 800179c:	430b      	orrs	r3, r1
 800179e:	08d0      	lsrs	r0, r2, #3
 80017a0:	e6be      	b.n	8001520 <__aeabi_dadd+0x29c>
 80017a2:	4303      	orrs	r3, r0
 80017a4:	001c      	movs	r4, r3
 80017a6:	1e63      	subs	r3, r4, #1
 80017a8:	419c      	sbcs	r4, r3
 80017aa:	e6fc      	b.n	80015a6 <__aeabi_dadd+0x322>
 80017ac:	0002      	movs	r2, r0
 80017ae:	3c20      	subs	r4, #32
 80017b0:	40e2      	lsrs	r2, r4
 80017b2:	0014      	movs	r4, r2
 80017b4:	4662      	mov	r2, ip
 80017b6:	2a20      	cmp	r2, #32
 80017b8:	d003      	beq.n	80017c2 <__aeabi_dadd+0x53e>
 80017ba:	2540      	movs	r5, #64	; 0x40
 80017bc:	1aad      	subs	r5, r5, r2
 80017be:	40a8      	lsls	r0, r5
 80017c0:	4303      	orrs	r3, r0
 80017c2:	1e58      	subs	r0, r3, #1
 80017c4:	4183      	sbcs	r3, r0
 80017c6:	4323      	orrs	r3, r4
 80017c8:	e775      	b.n	80016b6 <__aeabi_dadd+0x432>
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d0e2      	beq.n	8001794 <__aeabi_dadd+0x510>
 80017ce:	003a      	movs	r2, r7
 80017d0:	430a      	orrs	r2, r1
 80017d2:	d0cd      	beq.n	8001770 <__aeabi_dadd+0x4ec>
 80017d4:	0742      	lsls	r2, r0, #29
 80017d6:	08db      	lsrs	r3, r3, #3
 80017d8:	4313      	orrs	r3, r2
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	08c0      	lsrs	r0, r0, #3
 80017de:	0312      	lsls	r2, r2, #12
 80017e0:	4210      	tst	r0, r2
 80017e2:	d006      	beq.n	80017f2 <__aeabi_dadd+0x56e>
 80017e4:	08fc      	lsrs	r4, r7, #3
 80017e6:	4214      	tst	r4, r2
 80017e8:	d103      	bne.n	80017f2 <__aeabi_dadd+0x56e>
 80017ea:	0020      	movs	r0, r4
 80017ec:	08cb      	lsrs	r3, r1, #3
 80017ee:	077a      	lsls	r2, r7, #29
 80017f0:	4313      	orrs	r3, r2
 80017f2:	0f5a      	lsrs	r2, r3, #29
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	0752      	lsls	r2, r2, #29
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	e690      	b.n	8001520 <__aeabi_dadd+0x29c>
 80017fe:	4643      	mov	r3, r8
 8001800:	430b      	orrs	r3, r1
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x582>
 8001804:	e709      	b.n	800161a <__aeabi_dadd+0x396>
 8001806:	4643      	mov	r3, r8
 8001808:	4642      	mov	r2, r8
 800180a:	08c9      	lsrs	r1, r1, #3
 800180c:	075b      	lsls	r3, r3, #29
 800180e:	4655      	mov	r5, sl
 8001810:	430b      	orrs	r3, r1
 8001812:	08d0      	lsrs	r0, r2, #3
 8001814:	e666      	b.n	80014e4 <__aeabi_dadd+0x260>
 8001816:	1acc      	subs	r4, r1, r3
 8001818:	42a1      	cmp	r1, r4
 800181a:	4189      	sbcs	r1, r1
 800181c:	1a3f      	subs	r7, r7, r0
 800181e:	4249      	negs	r1, r1
 8001820:	4655      	mov	r5, sl
 8001822:	2601      	movs	r6, #1
 8001824:	1a7f      	subs	r7, r7, r1
 8001826:	e57e      	b.n	8001326 <__aeabi_dadd+0xa2>
 8001828:	4642      	mov	r2, r8
 800182a:	1a5c      	subs	r4, r3, r1
 800182c:	1a87      	subs	r7, r0, r2
 800182e:	42a3      	cmp	r3, r4
 8001830:	4192      	sbcs	r2, r2
 8001832:	4252      	negs	r2, r2
 8001834:	1abf      	subs	r7, r7, r2
 8001836:	023a      	lsls	r2, r7, #8
 8001838:	d53d      	bpl.n	80018b6 <__aeabi_dadd+0x632>
 800183a:	1acc      	subs	r4, r1, r3
 800183c:	42a1      	cmp	r1, r4
 800183e:	4189      	sbcs	r1, r1
 8001840:	4643      	mov	r3, r8
 8001842:	4249      	negs	r1, r1
 8001844:	1a1f      	subs	r7, r3, r0
 8001846:	4655      	mov	r5, sl
 8001848:	1a7f      	subs	r7, r7, r1
 800184a:	e595      	b.n	8001378 <__aeabi_dadd+0xf4>
 800184c:	077b      	lsls	r3, r7, #29
 800184e:	08c9      	lsrs	r1, r1, #3
 8001850:	430b      	orrs	r3, r1
 8001852:	08f8      	lsrs	r0, r7, #3
 8001854:	e643      	b.n	80014de <__aeabi_dadd+0x25a>
 8001856:	4644      	mov	r4, r8
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	430c      	orrs	r4, r1
 800185c:	d130      	bne.n	80018c0 <__aeabi_dadd+0x63c>
 800185e:	0742      	lsls	r2, r0, #29
 8001860:	4313      	orrs	r3, r2
 8001862:	08c0      	lsrs	r0, r0, #3
 8001864:	e65c      	b.n	8001520 <__aeabi_dadd+0x29c>
 8001866:	077b      	lsls	r3, r7, #29
 8001868:	08c9      	lsrs	r1, r1, #3
 800186a:	430b      	orrs	r3, r1
 800186c:	08f8      	lsrs	r0, r7, #3
 800186e:	e639      	b.n	80014e4 <__aeabi_dadd+0x260>
 8001870:	185c      	adds	r4, r3, r1
 8001872:	429c      	cmp	r4, r3
 8001874:	419b      	sbcs	r3, r3
 8001876:	4440      	add	r0, r8
 8001878:	425b      	negs	r3, r3
 800187a:	18c7      	adds	r7, r0, r3
 800187c:	023b      	lsls	r3, r7, #8
 800187e:	d400      	bmi.n	8001882 <__aeabi_dadd+0x5fe>
 8001880:	e625      	b.n	80014ce <__aeabi_dadd+0x24a>
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <__aeabi_dadd+0x674>)
 8001884:	2601      	movs	r6, #1
 8001886:	401f      	ands	r7, r3
 8001888:	e621      	b.n	80014ce <__aeabi_dadd+0x24a>
 800188a:	0004      	movs	r4, r0
 800188c:	3a20      	subs	r2, #32
 800188e:	40d4      	lsrs	r4, r2
 8001890:	4662      	mov	r2, ip
 8001892:	2a20      	cmp	r2, #32
 8001894:	d004      	beq.n	80018a0 <__aeabi_dadd+0x61c>
 8001896:	2240      	movs	r2, #64	; 0x40
 8001898:	4666      	mov	r6, ip
 800189a:	1b92      	subs	r2, r2, r6
 800189c:	4090      	lsls	r0, r2
 800189e:	4303      	orrs	r3, r0
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	4193      	sbcs	r3, r2
 80018a4:	431c      	orrs	r4, r3
 80018a6:	e67e      	b.n	80015a6 <__aeabi_dadd+0x322>
 80018a8:	185c      	adds	r4, r3, r1
 80018aa:	428c      	cmp	r4, r1
 80018ac:	4189      	sbcs	r1, r1
 80018ae:	4440      	add	r0, r8
 80018b0:	4249      	negs	r1, r1
 80018b2:	1847      	adds	r7, r0, r1
 80018b4:	e6dd      	b.n	8001672 <__aeabi_dadd+0x3ee>
 80018b6:	0023      	movs	r3, r4
 80018b8:	433b      	orrs	r3, r7
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x63a>
 80018bc:	e6ad      	b.n	800161a <__aeabi_dadd+0x396>
 80018be:	e606      	b.n	80014ce <__aeabi_dadd+0x24a>
 80018c0:	0744      	lsls	r4, r0, #29
 80018c2:	4323      	orrs	r3, r4
 80018c4:	2480      	movs	r4, #128	; 0x80
 80018c6:	08c0      	lsrs	r0, r0, #3
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4220      	tst	r0, r4
 80018cc:	d008      	beq.n	80018e0 <__aeabi_dadd+0x65c>
 80018ce:	4642      	mov	r2, r8
 80018d0:	08d6      	lsrs	r6, r2, #3
 80018d2:	4226      	tst	r6, r4
 80018d4:	d104      	bne.n	80018e0 <__aeabi_dadd+0x65c>
 80018d6:	4655      	mov	r5, sl
 80018d8:	0030      	movs	r0, r6
 80018da:	08cb      	lsrs	r3, r1, #3
 80018dc:	0751      	lsls	r1, r2, #29
 80018de:	430b      	orrs	r3, r1
 80018e0:	0f5a      	lsrs	r2, r3, #29
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	0752      	lsls	r2, r2, #29
 80018e8:	4313      	orrs	r3, r2
 80018ea:	e619      	b.n	8001520 <__aeabi_dadd+0x29c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	4a01      	ldr	r2, [pc, #4]	; (80018f4 <__aeabi_dadd+0x670>)
 80018f0:	001f      	movs	r7, r3
 80018f2:	e55e      	b.n	80013b2 <__aeabi_dadd+0x12e>
 80018f4:	000007ff 	.word	0x000007ff
 80018f8:	ff7fffff 	.word	0xff7fffff

080018fc <__aeabi_ddiv>:
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	4657      	mov	r7, sl
 8001900:	464e      	mov	r6, r9
 8001902:	4645      	mov	r5, r8
 8001904:	46de      	mov	lr, fp
 8001906:	b5e0      	push	{r5, r6, r7, lr}
 8001908:	4681      	mov	r9, r0
 800190a:	0005      	movs	r5, r0
 800190c:	030c      	lsls	r4, r1, #12
 800190e:	0048      	lsls	r0, r1, #1
 8001910:	4692      	mov	sl, r2
 8001912:	001f      	movs	r7, r3
 8001914:	b085      	sub	sp, #20
 8001916:	0b24      	lsrs	r4, r4, #12
 8001918:	0d40      	lsrs	r0, r0, #21
 800191a:	0fce      	lsrs	r6, r1, #31
 800191c:	2800      	cmp	r0, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_ddiv+0x26>
 8001920:	e156      	b.n	8001bd0 <__aeabi_ddiv+0x2d4>
 8001922:	4bd4      	ldr	r3, [pc, #848]	; (8001c74 <__aeabi_ddiv+0x378>)
 8001924:	4298      	cmp	r0, r3
 8001926:	d100      	bne.n	800192a <__aeabi_ddiv+0x2e>
 8001928:	e172      	b.n	8001c10 <__aeabi_ddiv+0x314>
 800192a:	0f6b      	lsrs	r3, r5, #29
 800192c:	00e4      	lsls	r4, r4, #3
 800192e:	431c      	orrs	r4, r3
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	4323      	orrs	r3, r4
 8001936:	4698      	mov	r8, r3
 8001938:	4bcf      	ldr	r3, [pc, #828]	; (8001c78 <__aeabi_ddiv+0x37c>)
 800193a:	00ed      	lsls	r5, r5, #3
 800193c:	469b      	mov	fp, r3
 800193e:	2300      	movs	r3, #0
 8001940:	4699      	mov	r9, r3
 8001942:	4483      	add	fp, r0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	033c      	lsls	r4, r7, #12
 8001948:	007b      	lsls	r3, r7, #1
 800194a:	4650      	mov	r0, sl
 800194c:	0b24      	lsrs	r4, r4, #12
 800194e:	0d5b      	lsrs	r3, r3, #21
 8001950:	0fff      	lsrs	r7, r7, #31
 8001952:	2b00      	cmp	r3, #0
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0x5c>
 8001956:	e11f      	b.n	8001b98 <__aeabi_ddiv+0x29c>
 8001958:	4ac6      	ldr	r2, [pc, #792]	; (8001c74 <__aeabi_ddiv+0x378>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d100      	bne.n	8001960 <__aeabi_ddiv+0x64>
 800195e:	e162      	b.n	8001c26 <__aeabi_ddiv+0x32a>
 8001960:	49c5      	ldr	r1, [pc, #788]	; (8001c78 <__aeabi_ddiv+0x37c>)
 8001962:	0f42      	lsrs	r2, r0, #29
 8001964:	468c      	mov	ip, r1
 8001966:	00e4      	lsls	r4, r4, #3
 8001968:	4659      	mov	r1, fp
 800196a:	4314      	orrs	r4, r2
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	4463      	add	r3, ip
 8001970:	0412      	lsls	r2, r2, #16
 8001972:	1acb      	subs	r3, r1, r3
 8001974:	4314      	orrs	r4, r2
 8001976:	469b      	mov	fp, r3
 8001978:	00c2      	lsls	r2, r0, #3
 800197a:	2000      	movs	r0, #0
 800197c:	0033      	movs	r3, r6
 800197e:	407b      	eors	r3, r7
 8001980:	469a      	mov	sl, r3
 8001982:	464b      	mov	r3, r9
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d827      	bhi.n	80019d8 <__aeabi_ddiv+0xdc>
 8001988:	49bc      	ldr	r1, [pc, #752]	; (8001c7c <__aeabi_ddiv+0x380>)
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	58cb      	ldr	r3, [r1, r3]
 800198e:	469f      	mov	pc, r3
 8001990:	46b2      	mov	sl, r6
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d016      	beq.n	80019c6 <__aeabi_ddiv+0xca>
 8001998:	2b03      	cmp	r3, #3
 800199a:	d100      	bne.n	800199e <__aeabi_ddiv+0xa2>
 800199c:	e28e      	b.n	8001ebc <__aeabi_ddiv+0x5c0>
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d000      	beq.n	80019a4 <__aeabi_ddiv+0xa8>
 80019a2:	e0d9      	b.n	8001b58 <__aeabi_ddiv+0x25c>
 80019a4:	2300      	movs	r3, #0
 80019a6:	2400      	movs	r4, #0
 80019a8:	2500      	movs	r5, #0
 80019aa:	4652      	mov	r2, sl
 80019ac:	051b      	lsls	r3, r3, #20
 80019ae:	4323      	orrs	r3, r4
 80019b0:	07d2      	lsls	r2, r2, #31
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0028      	movs	r0, r5
 80019b6:	0019      	movs	r1, r3
 80019b8:	b005      	add	sp, #20
 80019ba:	bcf0      	pop	{r4, r5, r6, r7}
 80019bc:	46bb      	mov	fp, r7
 80019be:	46b2      	mov	sl, r6
 80019c0:	46a9      	mov	r9, r5
 80019c2:	46a0      	mov	r8, r4
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	2400      	movs	r4, #0
 80019c8:	2500      	movs	r5, #0
 80019ca:	4baa      	ldr	r3, [pc, #680]	; (8001c74 <__aeabi_ddiv+0x378>)
 80019cc:	e7ed      	b.n	80019aa <__aeabi_ddiv+0xae>
 80019ce:	46ba      	mov	sl, r7
 80019d0:	46a0      	mov	r8, r4
 80019d2:	0015      	movs	r5, r2
 80019d4:	9000      	str	r0, [sp, #0]
 80019d6:	e7dc      	b.n	8001992 <__aeabi_ddiv+0x96>
 80019d8:	4544      	cmp	r4, r8
 80019da:	d200      	bcs.n	80019de <__aeabi_ddiv+0xe2>
 80019dc:	e1c7      	b.n	8001d6e <__aeabi_ddiv+0x472>
 80019de:	d100      	bne.n	80019e2 <__aeabi_ddiv+0xe6>
 80019e0:	e1c2      	b.n	8001d68 <__aeabi_ddiv+0x46c>
 80019e2:	2301      	movs	r3, #1
 80019e4:	425b      	negs	r3, r3
 80019e6:	469c      	mov	ip, r3
 80019e8:	002e      	movs	r6, r5
 80019ea:	4640      	mov	r0, r8
 80019ec:	2500      	movs	r5, #0
 80019ee:	44e3      	add	fp, ip
 80019f0:	0223      	lsls	r3, r4, #8
 80019f2:	0e14      	lsrs	r4, r2, #24
 80019f4:	431c      	orrs	r4, r3
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	4699      	mov	r9, r3
 80019fa:	0423      	lsls	r3, r4, #16
 80019fc:	0c1f      	lsrs	r7, r3, #16
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	4649      	mov	r1, r9
 8001a02:	9200      	str	r2, [sp, #0]
 8001a04:	9701      	str	r7, [sp, #4]
 8001a06:	f7fe fc21 	bl	800024c <__aeabi_uidivmod>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	437a      	muls	r2, r7
 8001a0e:	040b      	lsls	r3, r1, #16
 8001a10:	0c31      	lsrs	r1, r6, #16
 8001a12:	4680      	mov	r8, r0
 8001a14:	4319      	orrs	r1, r3
 8001a16:	428a      	cmp	r2, r1
 8001a18:	d907      	bls.n	8001a2a <__aeabi_ddiv+0x12e>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	425b      	negs	r3, r3
 8001a1e:	469c      	mov	ip, r3
 8001a20:	1909      	adds	r1, r1, r4
 8001a22:	44e0      	add	r8, ip
 8001a24:	428c      	cmp	r4, r1
 8001a26:	d800      	bhi.n	8001a2a <__aeabi_ddiv+0x12e>
 8001a28:	e207      	b.n	8001e3a <__aeabi_ddiv+0x53e>
 8001a2a:	1a88      	subs	r0, r1, r2
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	f7fe fc0d 	bl	800024c <__aeabi_uidivmod>
 8001a32:	0409      	lsls	r1, r1, #16
 8001a34:	468c      	mov	ip, r1
 8001a36:	0431      	lsls	r1, r6, #16
 8001a38:	4666      	mov	r6, ip
 8001a3a:	9a01      	ldr	r2, [sp, #4]
 8001a3c:	0c09      	lsrs	r1, r1, #16
 8001a3e:	4342      	muls	r2, r0
 8001a40:	0003      	movs	r3, r0
 8001a42:	4331      	orrs	r1, r6
 8001a44:	428a      	cmp	r2, r1
 8001a46:	d904      	bls.n	8001a52 <__aeabi_ddiv+0x156>
 8001a48:	1909      	adds	r1, r1, r4
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	428c      	cmp	r4, r1
 8001a4e:	d800      	bhi.n	8001a52 <__aeabi_ddiv+0x156>
 8001a50:	e1ed      	b.n	8001e2e <__aeabi_ddiv+0x532>
 8001a52:	1a88      	subs	r0, r1, r2
 8001a54:	4642      	mov	r2, r8
 8001a56:	0412      	lsls	r2, r2, #16
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	9b00      	ldr	r3, [sp, #0]
 8001a60:	040e      	lsls	r6, r1, #16
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	001f      	movs	r7, r3
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	9b00      	ldr	r3, [sp, #0]
 8001a6a:	0c36      	lsrs	r6, r6, #16
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	0c19      	lsrs	r1, r3, #16
 8001a70:	000b      	movs	r3, r1
 8001a72:	4373      	muls	r3, r6
 8001a74:	0c12      	lsrs	r2, r2, #16
 8001a76:	437e      	muls	r6, r7
 8001a78:	9103      	str	r1, [sp, #12]
 8001a7a:	4351      	muls	r1, r2
 8001a7c:	437a      	muls	r2, r7
 8001a7e:	0c1f      	lsrs	r7, r3, #16
 8001a80:	46bc      	mov	ip, r7
 8001a82:	1876      	adds	r6, r6, r1
 8001a84:	4466      	add	r6, ip
 8001a86:	42b1      	cmp	r1, r6
 8001a88:	d903      	bls.n	8001a92 <__aeabi_ddiv+0x196>
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0249      	lsls	r1, r1, #9
 8001a8e:	468c      	mov	ip, r1
 8001a90:	4462      	add	r2, ip
 8001a92:	0c31      	lsrs	r1, r6, #16
 8001a94:	188a      	adds	r2, r1, r2
 8001a96:	0431      	lsls	r1, r6, #16
 8001a98:	041e      	lsls	r6, r3, #16
 8001a9a:	0c36      	lsrs	r6, r6, #16
 8001a9c:	198e      	adds	r6, r1, r6
 8001a9e:	4290      	cmp	r0, r2
 8001aa0:	d302      	bcc.n	8001aa8 <__aeabi_ddiv+0x1ac>
 8001aa2:	d112      	bne.n	8001aca <__aeabi_ddiv+0x1ce>
 8001aa4:	42b5      	cmp	r5, r6
 8001aa6:	d210      	bcs.n	8001aca <__aeabi_ddiv+0x1ce>
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	1e59      	subs	r1, r3, #1
 8001aac:	9b00      	ldr	r3, [sp, #0]
 8001aae:	469c      	mov	ip, r3
 8001ab0:	4465      	add	r5, ip
 8001ab2:	001f      	movs	r7, r3
 8001ab4:	429d      	cmp	r5, r3
 8001ab6:	419b      	sbcs	r3, r3
 8001ab8:	425b      	negs	r3, r3
 8001aba:	191b      	adds	r3, r3, r4
 8001abc:	18c0      	adds	r0, r0, r3
 8001abe:	4284      	cmp	r4, r0
 8001ac0:	d200      	bcs.n	8001ac4 <__aeabi_ddiv+0x1c8>
 8001ac2:	e1a0      	b.n	8001e06 <__aeabi_ddiv+0x50a>
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_ddiv+0x1cc>
 8001ac6:	e19b      	b.n	8001e00 <__aeabi_ddiv+0x504>
 8001ac8:	4688      	mov	r8, r1
 8001aca:	1bae      	subs	r6, r5, r6
 8001acc:	42b5      	cmp	r5, r6
 8001ace:	41ad      	sbcs	r5, r5
 8001ad0:	1a80      	subs	r0, r0, r2
 8001ad2:	426d      	negs	r5, r5
 8001ad4:	1b40      	subs	r0, r0, r5
 8001ad6:	4284      	cmp	r4, r0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x1e0>
 8001ada:	e1d5      	b.n	8001e88 <__aeabi_ddiv+0x58c>
 8001adc:	4649      	mov	r1, r9
 8001ade:	f7fe fbb5 	bl	800024c <__aeabi_uidivmod>
 8001ae2:	9a01      	ldr	r2, [sp, #4]
 8001ae4:	040b      	lsls	r3, r1, #16
 8001ae6:	4342      	muls	r2, r0
 8001ae8:	0c31      	lsrs	r1, r6, #16
 8001aea:	0005      	movs	r5, r0
 8001aec:	4319      	orrs	r1, r3
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d900      	bls.n	8001af4 <__aeabi_ddiv+0x1f8>
 8001af2:	e16c      	b.n	8001dce <__aeabi_ddiv+0x4d2>
 8001af4:	1a88      	subs	r0, r1, r2
 8001af6:	4649      	mov	r1, r9
 8001af8:	f7fe fba8 	bl	800024c <__aeabi_uidivmod>
 8001afc:	9a01      	ldr	r2, [sp, #4]
 8001afe:	0436      	lsls	r6, r6, #16
 8001b00:	4342      	muls	r2, r0
 8001b02:	0409      	lsls	r1, r1, #16
 8001b04:	0c36      	lsrs	r6, r6, #16
 8001b06:	0003      	movs	r3, r0
 8001b08:	430e      	orrs	r6, r1
 8001b0a:	42b2      	cmp	r2, r6
 8001b0c:	d900      	bls.n	8001b10 <__aeabi_ddiv+0x214>
 8001b0e:	e153      	b.n	8001db8 <__aeabi_ddiv+0x4bc>
 8001b10:	9803      	ldr	r0, [sp, #12]
 8001b12:	1ab6      	subs	r6, r6, r2
 8001b14:	0002      	movs	r2, r0
 8001b16:	042d      	lsls	r5, r5, #16
 8001b18:	431d      	orrs	r5, r3
 8001b1a:	9f02      	ldr	r7, [sp, #8]
 8001b1c:	042b      	lsls	r3, r5, #16
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	435a      	muls	r2, r3
 8001b22:	437b      	muls	r3, r7
 8001b24:	469c      	mov	ip, r3
 8001b26:	0c29      	lsrs	r1, r5, #16
 8001b28:	4348      	muls	r0, r1
 8001b2a:	0c13      	lsrs	r3, r2, #16
 8001b2c:	4484      	add	ip, r0
 8001b2e:	4463      	add	r3, ip
 8001b30:	4379      	muls	r1, r7
 8001b32:	4298      	cmp	r0, r3
 8001b34:	d903      	bls.n	8001b3e <__aeabi_ddiv+0x242>
 8001b36:	2080      	movs	r0, #128	; 0x80
 8001b38:	0240      	lsls	r0, r0, #9
 8001b3a:	4684      	mov	ip, r0
 8001b3c:	4461      	add	r1, ip
 8001b3e:	0c18      	lsrs	r0, r3, #16
 8001b40:	0412      	lsls	r2, r2, #16
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	0c12      	lsrs	r2, r2, #16
 8001b46:	1841      	adds	r1, r0, r1
 8001b48:	189b      	adds	r3, r3, r2
 8001b4a:	428e      	cmp	r6, r1
 8001b4c:	d200      	bcs.n	8001b50 <__aeabi_ddiv+0x254>
 8001b4e:	e0ff      	b.n	8001d50 <__aeabi_ddiv+0x454>
 8001b50:	d100      	bne.n	8001b54 <__aeabi_ddiv+0x258>
 8001b52:	e0fa      	b.n	8001d4a <__aeabi_ddiv+0x44e>
 8001b54:	2301      	movs	r3, #1
 8001b56:	431d      	orrs	r5, r3
 8001b58:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <__aeabi_ddiv+0x384>)
 8001b5a:	445a      	add	r2, fp
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x266>
 8001b60:	e0aa      	b.n	8001cb8 <__aeabi_ddiv+0x3bc>
 8001b62:	076b      	lsls	r3, r5, #29
 8001b64:	d000      	beq.n	8001b68 <__aeabi_ddiv+0x26c>
 8001b66:	e13d      	b.n	8001de4 <__aeabi_ddiv+0x4e8>
 8001b68:	08ed      	lsrs	r5, r5, #3
 8001b6a:	4643      	mov	r3, r8
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	d506      	bpl.n	8001b7e <__aeabi_ddiv+0x282>
 8001b70:	4642      	mov	r2, r8
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <__aeabi_ddiv+0x388>)
 8001b74:	401a      	ands	r2, r3
 8001b76:	4690      	mov	r8, r2
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	00d2      	lsls	r2, r2, #3
 8001b7c:	445a      	add	r2, fp
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <__aeabi_ddiv+0x38c>)
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_ddiv+0x28a>
 8001b84:	e71f      	b.n	80019c6 <__aeabi_ddiv+0xca>
 8001b86:	4643      	mov	r3, r8
 8001b88:	075b      	lsls	r3, r3, #29
 8001b8a:	431d      	orrs	r5, r3
 8001b8c:	4643      	mov	r3, r8
 8001b8e:	0552      	lsls	r2, r2, #21
 8001b90:	025c      	lsls	r4, r3, #9
 8001b92:	0b24      	lsrs	r4, r4, #12
 8001b94:	0d53      	lsrs	r3, r2, #21
 8001b96:	e708      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001b98:	4652      	mov	r2, sl
 8001b9a:	4322      	orrs	r2, r4
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_ddiv+0x2a4>
 8001b9e:	e07b      	b.n	8001c98 <__aeabi_ddiv+0x39c>
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_ddiv+0x2aa>
 8001ba4:	e0fa      	b.n	8001d9c <__aeabi_ddiv+0x4a0>
 8001ba6:	0020      	movs	r0, r4
 8001ba8:	f001 fa22 	bl	8002ff0 <__clzsi2>
 8001bac:	0002      	movs	r2, r0
 8001bae:	3a0b      	subs	r2, #11
 8001bb0:	231d      	movs	r3, #29
 8001bb2:	0001      	movs	r1, r0
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	4652      	mov	r2, sl
 8001bb8:	3908      	subs	r1, #8
 8001bba:	40da      	lsrs	r2, r3
 8001bbc:	408c      	lsls	r4, r1
 8001bbe:	4314      	orrs	r4, r2
 8001bc0:	4652      	mov	r2, sl
 8001bc2:	408a      	lsls	r2, r1
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <__aeabi_ddiv+0x390>)
 8001bc6:	4458      	add	r0, fp
 8001bc8:	469b      	mov	fp, r3
 8001bca:	4483      	add	fp, r0
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e6d5      	b.n	800197c <__aeabi_ddiv+0x80>
 8001bd0:	464b      	mov	r3, r9
 8001bd2:	4323      	orrs	r3, r4
 8001bd4:	4698      	mov	r8, r3
 8001bd6:	d044      	beq.n	8001c62 <__aeabi_ddiv+0x366>
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	d100      	bne.n	8001bde <__aeabi_ddiv+0x2e2>
 8001bdc:	e0ce      	b.n	8001d7c <__aeabi_ddiv+0x480>
 8001bde:	0020      	movs	r0, r4
 8001be0:	f001 fa06 	bl	8002ff0 <__clzsi2>
 8001be4:	0001      	movs	r1, r0
 8001be6:	0002      	movs	r2, r0
 8001be8:	390b      	subs	r1, #11
 8001bea:	231d      	movs	r3, #29
 8001bec:	1a5b      	subs	r3, r3, r1
 8001bee:	4649      	mov	r1, r9
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	40d9      	lsrs	r1, r3
 8001bf4:	3808      	subs	r0, #8
 8001bf6:	4084      	lsls	r4, r0
 8001bf8:	000b      	movs	r3, r1
 8001bfa:	464d      	mov	r5, r9
 8001bfc:	4323      	orrs	r3, r4
 8001bfe:	4698      	mov	r8, r3
 8001c00:	4085      	lsls	r5, r0
 8001c02:	4823      	ldr	r0, [pc, #140]	; (8001c90 <__aeabi_ddiv+0x394>)
 8001c04:	1a83      	subs	r3, r0, r2
 8001c06:	469b      	mov	fp, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4699      	mov	r9, r3
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	e69a      	b.n	8001946 <__aeabi_ddiv+0x4a>
 8001c10:	464b      	mov	r3, r9
 8001c12:	4323      	orrs	r3, r4
 8001c14:	4698      	mov	r8, r3
 8001c16:	d11d      	bne.n	8001c54 <__aeabi_ddiv+0x358>
 8001c18:	2308      	movs	r3, #8
 8001c1a:	4699      	mov	r9, r3
 8001c1c:	3b06      	subs	r3, #6
 8001c1e:	2500      	movs	r5, #0
 8001c20:	4683      	mov	fp, r0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	e68f      	b.n	8001946 <__aeabi_ddiv+0x4a>
 8001c26:	4652      	mov	r2, sl
 8001c28:	4322      	orrs	r2, r4
 8001c2a:	d109      	bne.n	8001c40 <__aeabi_ddiv+0x344>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	4649      	mov	r1, r9
 8001c30:	4319      	orrs	r1, r3
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <__aeabi_ddiv+0x398>)
 8001c34:	4689      	mov	r9, r1
 8001c36:	469c      	mov	ip, r3
 8001c38:	2400      	movs	r4, #0
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	44e3      	add	fp, ip
 8001c3e:	e69d      	b.n	800197c <__aeabi_ddiv+0x80>
 8001c40:	2303      	movs	r3, #3
 8001c42:	464a      	mov	r2, r9
 8001c44:	431a      	orrs	r2, r3
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <__aeabi_ddiv+0x398>)
 8001c48:	4691      	mov	r9, r2
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	4652      	mov	r2, sl
 8001c4e:	2003      	movs	r0, #3
 8001c50:	44e3      	add	fp, ip
 8001c52:	e693      	b.n	800197c <__aeabi_ddiv+0x80>
 8001c54:	230c      	movs	r3, #12
 8001c56:	4699      	mov	r9, r3
 8001c58:	3b09      	subs	r3, #9
 8001c5a:	46a0      	mov	r8, r4
 8001c5c:	4683      	mov	fp, r0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	e671      	b.n	8001946 <__aeabi_ddiv+0x4a>
 8001c62:	2304      	movs	r3, #4
 8001c64:	4699      	mov	r9, r3
 8001c66:	2300      	movs	r3, #0
 8001c68:	469b      	mov	fp, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	2500      	movs	r5, #0
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	e669      	b.n	8001946 <__aeabi_ddiv+0x4a>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	fffffc01 	.word	0xfffffc01
 8001c7c:	080092b8 	.word	0x080092b8
 8001c80:	000003ff 	.word	0x000003ff
 8001c84:	feffffff 	.word	0xfeffffff
 8001c88:	000007fe 	.word	0x000007fe
 8001c8c:	000003f3 	.word	0x000003f3
 8001c90:	fffffc0d 	.word	0xfffffc0d
 8001c94:	fffff801 	.word	0xfffff801
 8001c98:	4649      	mov	r1, r9
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4319      	orrs	r1, r3
 8001c9e:	4689      	mov	r9, r1
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	e66a      	b.n	800197c <__aeabi_ddiv+0x80>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2480      	movs	r4, #128	; 0x80
 8001caa:	469a      	mov	sl, r3
 8001cac:	2500      	movs	r5, #0
 8001cae:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <__aeabi_ddiv+0x5dc>)
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	e67a      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001cb4:	2501      	movs	r5, #1
 8001cb6:	426d      	negs	r5, r5
 8001cb8:	2301      	movs	r3, #1
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	2b38      	cmp	r3, #56	; 0x38
 8001cbe:	dd00      	ble.n	8001cc2 <__aeabi_ddiv+0x3c6>
 8001cc0:	e670      	b.n	80019a4 <__aeabi_ddiv+0xa8>
 8001cc2:	2b1f      	cmp	r3, #31
 8001cc4:	dc00      	bgt.n	8001cc8 <__aeabi_ddiv+0x3cc>
 8001cc6:	e0bf      	b.n	8001e48 <__aeabi_ddiv+0x54c>
 8001cc8:	211f      	movs	r1, #31
 8001cca:	4249      	negs	r1, r1
 8001ccc:	1a8a      	subs	r2, r1, r2
 8001cce:	4641      	mov	r1, r8
 8001cd0:	40d1      	lsrs	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d004      	beq.n	8001ce2 <__aeabi_ddiv+0x3e6>
 8001cd8:	4641      	mov	r1, r8
 8001cda:	4b80      	ldr	r3, [pc, #512]	; (8001edc <__aeabi_ddiv+0x5e0>)
 8001cdc:	445b      	add	r3, fp
 8001cde:	4099      	lsls	r1, r3
 8001ce0:	430d      	orrs	r5, r1
 8001ce2:	1e6b      	subs	r3, r5, #1
 8001ce4:	419d      	sbcs	r5, r3
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	432a      	orrs	r2, r5
 8001cea:	001d      	movs	r5, r3
 8001cec:	2400      	movs	r4, #0
 8001cee:	4015      	ands	r5, r2
 8001cf0:	4213      	tst	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0x3fa>
 8001cf4:	e0d4      	b.n	8001ea0 <__aeabi_ddiv+0x5a4>
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4011      	ands	r1, r2
 8001cfc:	2904      	cmp	r1, #4
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0x406>
 8001d00:	e0cb      	b.n	8001e9a <__aeabi_ddiv+0x59e>
 8001d02:	1d11      	adds	r1, r2, #4
 8001d04:	4291      	cmp	r1, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	189b      	adds	r3, r3, r2
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	0219      	lsls	r1, r3, #8
 8001d10:	d400      	bmi.n	8001d14 <__aeabi_ddiv+0x418>
 8001d12:	e0c2      	b.n	8001e9a <__aeabi_ddiv+0x59e>
 8001d14:	2301      	movs	r3, #1
 8001d16:	2400      	movs	r4, #0
 8001d18:	2500      	movs	r5, #0
 8001d1a:	e646      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	4641      	mov	r1, r8
 8001d20:	031b      	lsls	r3, r3, #12
 8001d22:	4219      	tst	r1, r3
 8001d24:	d008      	beq.n	8001d38 <__aeabi_ddiv+0x43c>
 8001d26:	421c      	tst	r4, r3
 8001d28:	d106      	bne.n	8001d38 <__aeabi_ddiv+0x43c>
 8001d2a:	431c      	orrs	r4, r3
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	46ba      	mov	sl, r7
 8001d30:	0015      	movs	r5, r2
 8001d32:	4b69      	ldr	r3, [pc, #420]	; (8001ed8 <__aeabi_ddiv+0x5dc>)
 8001d34:	0b24      	lsrs	r4, r4, #12
 8001d36:	e638      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001d38:	2480      	movs	r4, #128	; 0x80
 8001d3a:	4643      	mov	r3, r8
 8001d3c:	0324      	lsls	r4, r4, #12
 8001d3e:	431c      	orrs	r4, r3
 8001d40:	0324      	lsls	r4, r4, #12
 8001d42:	46b2      	mov	sl, r6
 8001d44:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <__aeabi_ddiv+0x5dc>)
 8001d46:	0b24      	lsrs	r4, r4, #12
 8001d48:	e62f      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_ddiv+0x454>
 8001d4e:	e703      	b.n	8001b58 <__aeabi_ddiv+0x25c>
 8001d50:	19a6      	adds	r6, r4, r6
 8001d52:	1e68      	subs	r0, r5, #1
 8001d54:	42a6      	cmp	r6, r4
 8001d56:	d200      	bcs.n	8001d5a <__aeabi_ddiv+0x45e>
 8001d58:	e08d      	b.n	8001e76 <__aeabi_ddiv+0x57a>
 8001d5a:	428e      	cmp	r6, r1
 8001d5c:	d200      	bcs.n	8001d60 <__aeabi_ddiv+0x464>
 8001d5e:	e0a3      	b.n	8001ea8 <__aeabi_ddiv+0x5ac>
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x468>
 8001d62:	e0b3      	b.n	8001ecc <__aeabi_ddiv+0x5d0>
 8001d64:	0005      	movs	r5, r0
 8001d66:	e6f5      	b.n	8001b54 <__aeabi_ddiv+0x258>
 8001d68:	42aa      	cmp	r2, r5
 8001d6a:	d900      	bls.n	8001d6e <__aeabi_ddiv+0x472>
 8001d6c:	e639      	b.n	80019e2 <__aeabi_ddiv+0xe6>
 8001d6e:	4643      	mov	r3, r8
 8001d70:	07de      	lsls	r6, r3, #31
 8001d72:	0858      	lsrs	r0, r3, #1
 8001d74:	086b      	lsrs	r3, r5, #1
 8001d76:	431e      	orrs	r6, r3
 8001d78:	07ed      	lsls	r5, r5, #31
 8001d7a:	e639      	b.n	80019f0 <__aeabi_ddiv+0xf4>
 8001d7c:	4648      	mov	r0, r9
 8001d7e:	f001 f937 	bl	8002ff0 <__clzsi2>
 8001d82:	0001      	movs	r1, r0
 8001d84:	0002      	movs	r2, r0
 8001d86:	3115      	adds	r1, #21
 8001d88:	3220      	adds	r2, #32
 8001d8a:	291c      	cmp	r1, #28
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_ddiv+0x494>
 8001d8e:	e72c      	b.n	8001bea <__aeabi_ddiv+0x2ee>
 8001d90:	464b      	mov	r3, r9
 8001d92:	3808      	subs	r0, #8
 8001d94:	4083      	lsls	r3, r0
 8001d96:	2500      	movs	r5, #0
 8001d98:	4698      	mov	r8, r3
 8001d9a:	e732      	b.n	8001c02 <__aeabi_ddiv+0x306>
 8001d9c:	f001 f928 	bl	8002ff0 <__clzsi2>
 8001da0:	0003      	movs	r3, r0
 8001da2:	001a      	movs	r2, r3
 8001da4:	3215      	adds	r2, #21
 8001da6:	3020      	adds	r0, #32
 8001da8:	2a1c      	cmp	r2, #28
 8001daa:	dc00      	bgt.n	8001dae <__aeabi_ddiv+0x4b2>
 8001dac:	e700      	b.n	8001bb0 <__aeabi_ddiv+0x2b4>
 8001dae:	4654      	mov	r4, sl
 8001db0:	3b08      	subs	r3, #8
 8001db2:	2200      	movs	r2, #0
 8001db4:	409c      	lsls	r4, r3
 8001db6:	e705      	b.n	8001bc4 <__aeabi_ddiv+0x2c8>
 8001db8:	1936      	adds	r6, r6, r4
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	42b4      	cmp	r4, r6
 8001dbe:	d900      	bls.n	8001dc2 <__aeabi_ddiv+0x4c6>
 8001dc0:	e6a6      	b.n	8001b10 <__aeabi_ddiv+0x214>
 8001dc2:	42b2      	cmp	r2, r6
 8001dc4:	d800      	bhi.n	8001dc8 <__aeabi_ddiv+0x4cc>
 8001dc6:	e6a3      	b.n	8001b10 <__aeabi_ddiv+0x214>
 8001dc8:	1e83      	subs	r3, r0, #2
 8001dca:	1936      	adds	r6, r6, r4
 8001dcc:	e6a0      	b.n	8001b10 <__aeabi_ddiv+0x214>
 8001dce:	1909      	adds	r1, r1, r4
 8001dd0:	3d01      	subs	r5, #1
 8001dd2:	428c      	cmp	r4, r1
 8001dd4:	d900      	bls.n	8001dd8 <__aeabi_ddiv+0x4dc>
 8001dd6:	e68d      	b.n	8001af4 <__aeabi_ddiv+0x1f8>
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d800      	bhi.n	8001dde <__aeabi_ddiv+0x4e2>
 8001ddc:	e68a      	b.n	8001af4 <__aeabi_ddiv+0x1f8>
 8001dde:	1e85      	subs	r5, r0, #2
 8001de0:	1909      	adds	r1, r1, r4
 8001de2:	e687      	b.n	8001af4 <__aeabi_ddiv+0x1f8>
 8001de4:	230f      	movs	r3, #15
 8001de6:	402b      	ands	r3, r5
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x4f2>
 8001dec:	e6bc      	b.n	8001b68 <__aeabi_ddiv+0x26c>
 8001dee:	2305      	movs	r3, #5
 8001df0:	425b      	negs	r3, r3
 8001df2:	42ab      	cmp	r3, r5
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	3504      	adds	r5, #4
 8001df8:	425b      	negs	r3, r3
 8001dfa:	08ed      	lsrs	r5, r5, #3
 8001dfc:	4498      	add	r8, r3
 8001dfe:	e6b4      	b.n	8001b6a <__aeabi_ddiv+0x26e>
 8001e00:	42af      	cmp	r7, r5
 8001e02:	d900      	bls.n	8001e06 <__aeabi_ddiv+0x50a>
 8001e04:	e660      	b.n	8001ac8 <__aeabi_ddiv+0x1cc>
 8001e06:	4282      	cmp	r2, r0
 8001e08:	d804      	bhi.n	8001e14 <__aeabi_ddiv+0x518>
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_ddiv+0x512>
 8001e0c:	e65c      	b.n	8001ac8 <__aeabi_ddiv+0x1cc>
 8001e0e:	42ae      	cmp	r6, r5
 8001e10:	d800      	bhi.n	8001e14 <__aeabi_ddiv+0x518>
 8001e12:	e659      	b.n	8001ac8 <__aeabi_ddiv+0x1cc>
 8001e14:	2302      	movs	r3, #2
 8001e16:	425b      	negs	r3, r3
 8001e18:	469c      	mov	ip, r3
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	44e0      	add	r8, ip
 8001e1e:	469c      	mov	ip, r3
 8001e20:	4465      	add	r5, ip
 8001e22:	429d      	cmp	r5, r3
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	425b      	negs	r3, r3
 8001e28:	191b      	adds	r3, r3, r4
 8001e2a:	18c0      	adds	r0, r0, r3
 8001e2c:	e64d      	b.n	8001aca <__aeabi_ddiv+0x1ce>
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d800      	bhi.n	8001e34 <__aeabi_ddiv+0x538>
 8001e32:	e60e      	b.n	8001a52 <__aeabi_ddiv+0x156>
 8001e34:	1e83      	subs	r3, r0, #2
 8001e36:	1909      	adds	r1, r1, r4
 8001e38:	e60b      	b.n	8001a52 <__aeabi_ddiv+0x156>
 8001e3a:	428a      	cmp	r2, r1
 8001e3c:	d800      	bhi.n	8001e40 <__aeabi_ddiv+0x544>
 8001e3e:	e5f4      	b.n	8001a2a <__aeabi_ddiv+0x12e>
 8001e40:	1e83      	subs	r3, r0, #2
 8001e42:	4698      	mov	r8, r3
 8001e44:	1909      	adds	r1, r1, r4
 8001e46:	e5f0      	b.n	8001a2a <__aeabi_ddiv+0x12e>
 8001e48:	4925      	ldr	r1, [pc, #148]	; (8001ee0 <__aeabi_ddiv+0x5e4>)
 8001e4a:	0028      	movs	r0, r5
 8001e4c:	4459      	add	r1, fp
 8001e4e:	408d      	lsls	r5, r1
 8001e50:	4642      	mov	r2, r8
 8001e52:	408a      	lsls	r2, r1
 8001e54:	1e69      	subs	r1, r5, #1
 8001e56:	418d      	sbcs	r5, r1
 8001e58:	4641      	mov	r1, r8
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	40d9      	lsrs	r1, r3
 8001e5e:	4302      	orrs	r2, r0
 8001e60:	432a      	orrs	r2, r5
 8001e62:	000b      	movs	r3, r1
 8001e64:	0751      	lsls	r1, r2, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_ddiv+0x56e>
 8001e68:	e751      	b.n	8001d0e <__aeabi_ddiv+0x412>
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	4011      	ands	r1, r2
 8001e6e:	2904      	cmp	r1, #4
 8001e70:	d000      	beq.n	8001e74 <__aeabi_ddiv+0x578>
 8001e72:	e746      	b.n	8001d02 <__aeabi_ddiv+0x406>
 8001e74:	e74b      	b.n	8001d0e <__aeabi_ddiv+0x412>
 8001e76:	0005      	movs	r5, r0
 8001e78:	428e      	cmp	r6, r1
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_ddiv+0x582>
 8001e7c:	e66a      	b.n	8001b54 <__aeabi_ddiv+0x258>
 8001e7e:	9a00      	ldr	r2, [sp, #0]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d000      	beq.n	8001e86 <__aeabi_ddiv+0x58a>
 8001e84:	e666      	b.n	8001b54 <__aeabi_ddiv+0x258>
 8001e86:	e667      	b.n	8001b58 <__aeabi_ddiv+0x25c>
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <__aeabi_ddiv+0x5e8>)
 8001e8a:	445a      	add	r2, fp
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_ddiv+0x596>
 8001e90:	e710      	b.n	8001cb4 <__aeabi_ddiv+0x3b8>
 8001e92:	2301      	movs	r3, #1
 8001e94:	2500      	movs	r5, #0
 8001e96:	4498      	add	r8, r3
 8001e98:	e667      	b.n	8001b6a <__aeabi_ddiv+0x26e>
 8001e9a:	075d      	lsls	r5, r3, #29
 8001e9c:	025b      	lsls	r3, r3, #9
 8001e9e:	0b1c      	lsrs	r4, r3, #12
 8001ea0:	08d2      	lsrs	r2, r2, #3
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	4315      	orrs	r5, r2
 8001ea6:	e580      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001ea8:	9800      	ldr	r0, [sp, #0]
 8001eaa:	3d02      	subs	r5, #2
 8001eac:	0042      	lsls	r2, r0, #1
 8001eae:	4282      	cmp	r2, r0
 8001eb0:	41bf      	sbcs	r7, r7
 8001eb2:	427f      	negs	r7, r7
 8001eb4:	193c      	adds	r4, r7, r4
 8001eb6:	1936      	adds	r6, r6, r4
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	e7dd      	b.n	8001e78 <__aeabi_ddiv+0x57c>
 8001ebc:	2480      	movs	r4, #128	; 0x80
 8001ebe:	4643      	mov	r3, r8
 8001ec0:	0324      	lsls	r4, r4, #12
 8001ec2:	431c      	orrs	r4, r3
 8001ec4:	0324      	lsls	r4, r4, #12
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__aeabi_ddiv+0x5dc>)
 8001ec8:	0b24      	lsrs	r4, r4, #12
 8001eca:	e56e      	b.n	80019aa <__aeabi_ddiv+0xae>
 8001ecc:	9a00      	ldr	r2, [sp, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d3ea      	bcc.n	8001ea8 <__aeabi_ddiv+0x5ac>
 8001ed2:	0005      	movs	r5, r0
 8001ed4:	e7d3      	b.n	8001e7e <__aeabi_ddiv+0x582>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	000007ff 	.word	0x000007ff
 8001edc:	0000043e 	.word	0x0000043e
 8001ee0:	0000041e 	.word	0x0000041e
 8001ee4:	000003ff 	.word	0x000003ff

08001ee8 <__eqdf2>:
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	464e      	mov	r6, r9
 8001eec:	4645      	mov	r5, r8
 8001eee:	46de      	mov	lr, fp
 8001ef0:	4657      	mov	r7, sl
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	b5e0      	push	{r5, r6, r7, lr}
 8001ef6:	0017      	movs	r7, r2
 8001ef8:	031a      	lsls	r2, r3, #12
 8001efa:	0b12      	lsrs	r2, r2, #12
 8001efc:	0005      	movs	r5, r0
 8001efe:	4684      	mov	ip, r0
 8001f00:	4819      	ldr	r0, [pc, #100]	; (8001f68 <__eqdf2+0x80>)
 8001f02:	030e      	lsls	r6, r1, #12
 8001f04:	004c      	lsls	r4, r1, #1
 8001f06:	4691      	mov	r9, r2
 8001f08:	005a      	lsls	r2, r3, #1
 8001f0a:	0fdb      	lsrs	r3, r3, #31
 8001f0c:	469b      	mov	fp, r3
 8001f0e:	0b36      	lsrs	r6, r6, #12
 8001f10:	0d64      	lsrs	r4, r4, #21
 8001f12:	0fc9      	lsrs	r1, r1, #31
 8001f14:	0d52      	lsrs	r2, r2, #21
 8001f16:	4284      	cmp	r4, r0
 8001f18:	d019      	beq.n	8001f4e <__eqdf2+0x66>
 8001f1a:	4282      	cmp	r2, r0
 8001f1c:	d010      	beq.n	8001f40 <__eqdf2+0x58>
 8001f1e:	2001      	movs	r0, #1
 8001f20:	4294      	cmp	r4, r2
 8001f22:	d10e      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f24:	454e      	cmp	r6, r9
 8001f26:	d10c      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f28:	2001      	movs	r0, #1
 8001f2a:	45c4      	cmp	ip, r8
 8001f2c:	d109      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f2e:	4559      	cmp	r1, fp
 8001f30:	d017      	beq.n	8001f62 <__eqdf2+0x7a>
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d105      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f36:	0030      	movs	r0, r6
 8001f38:	4328      	orrs	r0, r5
 8001f3a:	1e43      	subs	r3, r0, #1
 8001f3c:	4198      	sbcs	r0, r3
 8001f3e:	e000      	b.n	8001f42 <__eqdf2+0x5a>
 8001f40:	2001      	movs	r0, #1
 8001f42:	bcf0      	pop	{r4, r5, r6, r7}
 8001f44:	46bb      	mov	fp, r7
 8001f46:	46b2      	mov	sl, r6
 8001f48:	46a9      	mov	r9, r5
 8001f4a:	46a0      	mov	r8, r4
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4e:	0033      	movs	r3, r6
 8001f50:	2001      	movs	r0, #1
 8001f52:	432b      	orrs	r3, r5
 8001f54:	d1f5      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f56:	42a2      	cmp	r2, r4
 8001f58:	d1f3      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	433b      	orrs	r3, r7
 8001f5e:	d1f0      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f60:	e7e2      	b.n	8001f28 <__eqdf2+0x40>
 8001f62:	2000      	movs	r0, #0
 8001f64:	e7ed      	b.n	8001f42 <__eqdf2+0x5a>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	000007ff 	.word	0x000007ff

08001f6c <__gedf2>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	4647      	mov	r7, r8
 8001f70:	46ce      	mov	lr, r9
 8001f72:	0004      	movs	r4, r0
 8001f74:	0018      	movs	r0, r3
 8001f76:	0016      	movs	r6, r2
 8001f78:	031b      	lsls	r3, r3, #12
 8001f7a:	0b1b      	lsrs	r3, r3, #12
 8001f7c:	4d2d      	ldr	r5, [pc, #180]	; (8002034 <__gedf2+0xc8>)
 8001f7e:	004a      	lsls	r2, r1, #1
 8001f80:	4699      	mov	r9, r3
 8001f82:	b580      	push	{r7, lr}
 8001f84:	0043      	lsls	r3, r0, #1
 8001f86:	030f      	lsls	r7, r1, #12
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	46b0      	mov	r8, r6
 8001f8c:	0b3f      	lsrs	r7, r7, #12
 8001f8e:	0d52      	lsrs	r2, r2, #21
 8001f90:	0fc9      	lsrs	r1, r1, #31
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	0fc0      	lsrs	r0, r0, #31
 8001f96:	42aa      	cmp	r2, r5
 8001f98:	d021      	beq.n	8001fde <__gedf2+0x72>
 8001f9a:	42ab      	cmp	r3, r5
 8001f9c:	d013      	beq.n	8001fc6 <__gedf2+0x5a>
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d122      	bne.n	8001fe8 <__gedf2+0x7c>
 8001fa2:	433c      	orrs	r4, r7
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <__gedf2+0x42>
 8001fa8:	464d      	mov	r5, r9
 8001faa:	432e      	orrs	r6, r5
 8001fac:	d022      	beq.n	8001ff4 <__gedf2+0x88>
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d010      	beq.n	8001fd4 <__gedf2+0x68>
 8001fb2:	4281      	cmp	r1, r0
 8001fb4:	d022      	beq.n	8001ffc <__gedf2+0x90>
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	3901      	subs	r1, #1
 8001fba:	4008      	ands	r0, r1
 8001fbc:	3801      	subs	r0, #1
 8001fbe:	bcc0      	pop	{r6, r7}
 8001fc0:	46b9      	mov	r9, r7
 8001fc2:	46b0      	mov	r8, r6
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	464d      	mov	r5, r9
 8001fc8:	432e      	orrs	r6, r5
 8001fca:	d129      	bne.n	8002020 <__gedf2+0xb4>
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d1f0      	bne.n	8001fb2 <__gedf2+0x46>
 8001fd0:	433c      	orrs	r4, r7
 8001fd2:	d1ee      	bne.n	8001fb2 <__gedf2+0x46>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1f2      	bne.n	8001fbe <__gedf2+0x52>
 8001fd8:	2001      	movs	r0, #1
 8001fda:	4240      	negs	r0, r0
 8001fdc:	e7ef      	b.n	8001fbe <__gedf2+0x52>
 8001fde:	003d      	movs	r5, r7
 8001fe0:	4325      	orrs	r5, r4
 8001fe2:	d11d      	bne.n	8002020 <__gedf2+0xb4>
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d0ee      	beq.n	8001fc6 <__gedf2+0x5a>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e2      	bne.n	8001fb2 <__gedf2+0x46>
 8001fec:	464c      	mov	r4, r9
 8001fee:	4326      	orrs	r6, r4
 8001ff0:	d1df      	bne.n	8001fb2 <__gedf2+0x46>
 8001ff2:	e7e0      	b.n	8001fb6 <__gedf2+0x4a>
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d0e1      	beq.n	8001fbe <__gedf2+0x52>
 8001ffa:	e7dc      	b.n	8001fb6 <__gedf2+0x4a>
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dc0a      	bgt.n	8002016 <__gedf2+0xaa>
 8002000:	dbe8      	blt.n	8001fd4 <__gedf2+0x68>
 8002002:	454f      	cmp	r7, r9
 8002004:	d8d7      	bhi.n	8001fb6 <__gedf2+0x4a>
 8002006:	d00e      	beq.n	8002026 <__gedf2+0xba>
 8002008:	2000      	movs	r0, #0
 800200a:	454f      	cmp	r7, r9
 800200c:	d2d7      	bcs.n	8001fbe <__gedf2+0x52>
 800200e:	2900      	cmp	r1, #0
 8002010:	d0e2      	beq.n	8001fd8 <__gedf2+0x6c>
 8002012:	0008      	movs	r0, r1
 8002014:	e7d3      	b.n	8001fbe <__gedf2+0x52>
 8002016:	4243      	negs	r3, r0
 8002018:	4158      	adcs	r0, r3
 800201a:	0040      	lsls	r0, r0, #1
 800201c:	3801      	subs	r0, #1
 800201e:	e7ce      	b.n	8001fbe <__gedf2+0x52>
 8002020:	2002      	movs	r0, #2
 8002022:	4240      	negs	r0, r0
 8002024:	e7cb      	b.n	8001fbe <__gedf2+0x52>
 8002026:	45c4      	cmp	ip, r8
 8002028:	d8c5      	bhi.n	8001fb6 <__gedf2+0x4a>
 800202a:	2000      	movs	r0, #0
 800202c:	45c4      	cmp	ip, r8
 800202e:	d2c6      	bcs.n	8001fbe <__gedf2+0x52>
 8002030:	e7ed      	b.n	800200e <__gedf2+0xa2>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	000007ff 	.word	0x000007ff

08002038 <__ledf2>:
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	4647      	mov	r7, r8
 800203c:	46ce      	mov	lr, r9
 800203e:	0004      	movs	r4, r0
 8002040:	0018      	movs	r0, r3
 8002042:	0016      	movs	r6, r2
 8002044:	031b      	lsls	r3, r3, #12
 8002046:	0b1b      	lsrs	r3, r3, #12
 8002048:	4d2c      	ldr	r5, [pc, #176]	; (80020fc <__ledf2+0xc4>)
 800204a:	004a      	lsls	r2, r1, #1
 800204c:	4699      	mov	r9, r3
 800204e:	b580      	push	{r7, lr}
 8002050:	0043      	lsls	r3, r0, #1
 8002052:	030f      	lsls	r7, r1, #12
 8002054:	46a4      	mov	ip, r4
 8002056:	46b0      	mov	r8, r6
 8002058:	0b3f      	lsrs	r7, r7, #12
 800205a:	0d52      	lsrs	r2, r2, #21
 800205c:	0fc9      	lsrs	r1, r1, #31
 800205e:	0d5b      	lsrs	r3, r3, #21
 8002060:	0fc0      	lsrs	r0, r0, #31
 8002062:	42aa      	cmp	r2, r5
 8002064:	d00d      	beq.n	8002082 <__ledf2+0x4a>
 8002066:	42ab      	cmp	r3, r5
 8002068:	d010      	beq.n	800208c <__ledf2+0x54>
 800206a:	2a00      	cmp	r2, #0
 800206c:	d127      	bne.n	80020be <__ledf2+0x86>
 800206e:	433c      	orrs	r4, r7
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <__ledf2+0x60>
 8002074:	464d      	mov	r5, r9
 8002076:	432e      	orrs	r6, r5
 8002078:	d10e      	bne.n	8002098 <__ledf2+0x60>
 800207a:	2000      	movs	r0, #0
 800207c:	2c00      	cmp	r4, #0
 800207e:	d015      	beq.n	80020ac <__ledf2+0x74>
 8002080:	e00e      	b.n	80020a0 <__ledf2+0x68>
 8002082:	003d      	movs	r5, r7
 8002084:	4325      	orrs	r5, r4
 8002086:	d110      	bne.n	80020aa <__ledf2+0x72>
 8002088:	4293      	cmp	r3, r2
 800208a:	d118      	bne.n	80020be <__ledf2+0x86>
 800208c:	464d      	mov	r5, r9
 800208e:	432e      	orrs	r6, r5
 8002090:	d10b      	bne.n	80020aa <__ledf2+0x72>
 8002092:	2a00      	cmp	r2, #0
 8002094:	d102      	bne.n	800209c <__ledf2+0x64>
 8002096:	433c      	orrs	r4, r7
 8002098:	2c00      	cmp	r4, #0
 800209a:	d00b      	beq.n	80020b4 <__ledf2+0x7c>
 800209c:	4281      	cmp	r1, r0
 800209e:	d014      	beq.n	80020ca <__ledf2+0x92>
 80020a0:	2002      	movs	r0, #2
 80020a2:	3901      	subs	r1, #1
 80020a4:	4008      	ands	r0, r1
 80020a6:	3801      	subs	r0, #1
 80020a8:	e000      	b.n	80020ac <__ledf2+0x74>
 80020aa:	2002      	movs	r0, #2
 80020ac:	bcc0      	pop	{r6, r7}
 80020ae:	46b9      	mov	r9, r7
 80020b0:	46b0      	mov	r8, r6
 80020b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d1f9      	bne.n	80020ac <__ledf2+0x74>
 80020b8:	2001      	movs	r0, #1
 80020ba:	4240      	negs	r0, r0
 80020bc:	e7f6      	b.n	80020ac <__ledf2+0x74>
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ec      	bne.n	800209c <__ledf2+0x64>
 80020c2:	464c      	mov	r4, r9
 80020c4:	4326      	orrs	r6, r4
 80020c6:	d1e9      	bne.n	800209c <__ledf2+0x64>
 80020c8:	e7ea      	b.n	80020a0 <__ledf2+0x68>
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dd04      	ble.n	80020d8 <__ledf2+0xa0>
 80020ce:	4243      	negs	r3, r0
 80020d0:	4158      	adcs	r0, r3
 80020d2:	0040      	lsls	r0, r0, #1
 80020d4:	3801      	subs	r0, #1
 80020d6:	e7e9      	b.n	80020ac <__ledf2+0x74>
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbeb      	blt.n	80020b4 <__ledf2+0x7c>
 80020dc:	454f      	cmp	r7, r9
 80020de:	d8df      	bhi.n	80020a0 <__ledf2+0x68>
 80020e0:	d006      	beq.n	80020f0 <__ledf2+0xb8>
 80020e2:	2000      	movs	r0, #0
 80020e4:	454f      	cmp	r7, r9
 80020e6:	d2e1      	bcs.n	80020ac <__ledf2+0x74>
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d0e5      	beq.n	80020b8 <__ledf2+0x80>
 80020ec:	0008      	movs	r0, r1
 80020ee:	e7dd      	b.n	80020ac <__ledf2+0x74>
 80020f0:	45c4      	cmp	ip, r8
 80020f2:	d8d5      	bhi.n	80020a0 <__ledf2+0x68>
 80020f4:	2000      	movs	r0, #0
 80020f6:	45c4      	cmp	ip, r8
 80020f8:	d2d8      	bcs.n	80020ac <__ledf2+0x74>
 80020fa:	e7f5      	b.n	80020e8 <__ledf2+0xb0>
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_dmul>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	4657      	mov	r7, sl
 8002104:	464e      	mov	r6, r9
 8002106:	4645      	mov	r5, r8
 8002108:	46de      	mov	lr, fp
 800210a:	b5e0      	push	{r5, r6, r7, lr}
 800210c:	4698      	mov	r8, r3
 800210e:	030c      	lsls	r4, r1, #12
 8002110:	004b      	lsls	r3, r1, #1
 8002112:	0006      	movs	r6, r0
 8002114:	4692      	mov	sl, r2
 8002116:	b087      	sub	sp, #28
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d5b      	lsrs	r3, r3, #21
 800211c:	0fcf      	lsrs	r7, r1, #31
 800211e:	2b00      	cmp	r3, #0
 8002120:	d100      	bne.n	8002124 <__aeabi_dmul+0x24>
 8002122:	e15c      	b.n	80023de <__aeabi_dmul+0x2de>
 8002124:	4ad9      	ldr	r2, [pc, #868]	; (800248c <__aeabi_dmul+0x38c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d100      	bne.n	800212c <__aeabi_dmul+0x2c>
 800212a:	e175      	b.n	8002418 <__aeabi_dmul+0x318>
 800212c:	0f42      	lsrs	r2, r0, #29
 800212e:	00e4      	lsls	r4, r4, #3
 8002130:	4314      	orrs	r4, r2
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	0412      	lsls	r2, r2, #16
 8002136:	4314      	orrs	r4, r2
 8002138:	4ad5      	ldr	r2, [pc, #852]	; (8002490 <__aeabi_dmul+0x390>)
 800213a:	00c5      	lsls	r5, r0, #3
 800213c:	4694      	mov	ip, r2
 800213e:	4463      	add	r3, ip
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	4699      	mov	r9, r3
 8002146:	469b      	mov	fp, r3
 8002148:	4643      	mov	r3, r8
 800214a:	4642      	mov	r2, r8
 800214c:	031e      	lsls	r6, r3, #12
 800214e:	0fd2      	lsrs	r2, r2, #31
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4650      	mov	r0, sl
 8002154:	4690      	mov	r8, r2
 8002156:	0b36      	lsrs	r6, r6, #12
 8002158:	0d5b      	lsrs	r3, r3, #21
 800215a:	d100      	bne.n	800215e <__aeabi_dmul+0x5e>
 800215c:	e120      	b.n	80023a0 <__aeabi_dmul+0x2a0>
 800215e:	4acb      	ldr	r2, [pc, #812]	; (800248c <__aeabi_dmul+0x38c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d100      	bne.n	8002166 <__aeabi_dmul+0x66>
 8002164:	e162      	b.n	800242c <__aeabi_dmul+0x32c>
 8002166:	49ca      	ldr	r1, [pc, #808]	; (8002490 <__aeabi_dmul+0x390>)
 8002168:	0f42      	lsrs	r2, r0, #29
 800216a:	468c      	mov	ip, r1
 800216c:	9900      	ldr	r1, [sp, #0]
 800216e:	4463      	add	r3, ip
 8002170:	00f6      	lsls	r6, r6, #3
 8002172:	468c      	mov	ip, r1
 8002174:	4316      	orrs	r6, r2
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	449c      	add	ip, r3
 800217a:	0412      	lsls	r2, r2, #16
 800217c:	4663      	mov	r3, ip
 800217e:	4316      	orrs	r6, r2
 8002180:	00c2      	lsls	r2, r0, #3
 8002182:	2000      	movs	r0, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	9900      	ldr	r1, [sp, #0]
 8002188:	4643      	mov	r3, r8
 800218a:	3101      	adds	r1, #1
 800218c:	468c      	mov	ip, r1
 800218e:	4649      	mov	r1, r9
 8002190:	407b      	eors	r3, r7
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	290f      	cmp	r1, #15
 8002196:	d826      	bhi.n	80021e6 <__aeabi_dmul+0xe6>
 8002198:	4bbe      	ldr	r3, [pc, #760]	; (8002494 <__aeabi_dmul+0x394>)
 800219a:	0089      	lsls	r1, r1, #2
 800219c:	5859      	ldr	r1, [r3, r1]
 800219e:	468f      	mov	pc, r1
 80021a0:	4643      	mov	r3, r8
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	0034      	movs	r4, r6
 80021a6:	0015      	movs	r5, r2
 80021a8:	4683      	mov	fp, r0
 80021aa:	465b      	mov	r3, fp
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d016      	beq.n	80021de <__aeabi_dmul+0xde>
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0xb6>
 80021b4:	e203      	b.n	80025be <__aeabi_dmul+0x4be>
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d000      	beq.n	80021bc <__aeabi_dmul+0xbc>
 80021ba:	e0cd      	b.n	8002358 <__aeabi_dmul+0x258>
 80021bc:	2200      	movs	r2, #0
 80021be:	2400      	movs	r4, #0
 80021c0:	2500      	movs	r5, #0
 80021c2:	9b01      	ldr	r3, [sp, #4]
 80021c4:	0512      	lsls	r2, r2, #20
 80021c6:	4322      	orrs	r2, r4
 80021c8:	07db      	lsls	r3, r3, #31
 80021ca:	431a      	orrs	r2, r3
 80021cc:	0028      	movs	r0, r5
 80021ce:	0011      	movs	r1, r2
 80021d0:	b007      	add	sp, #28
 80021d2:	bcf0      	pop	{r4, r5, r6, r7}
 80021d4:	46bb      	mov	fp, r7
 80021d6:	46b2      	mov	sl, r6
 80021d8:	46a9      	mov	r9, r5
 80021da:	46a0      	mov	r8, r4
 80021dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021de:	2400      	movs	r4, #0
 80021e0:	2500      	movs	r5, #0
 80021e2:	4aaa      	ldr	r2, [pc, #680]	; (800248c <__aeabi_dmul+0x38c>)
 80021e4:	e7ed      	b.n	80021c2 <__aeabi_dmul+0xc2>
 80021e6:	0c28      	lsrs	r0, r5, #16
 80021e8:	042d      	lsls	r5, r5, #16
 80021ea:	0c2d      	lsrs	r5, r5, #16
 80021ec:	002b      	movs	r3, r5
 80021ee:	0c11      	lsrs	r1, r2, #16
 80021f0:	0412      	lsls	r2, r2, #16
 80021f2:	0c12      	lsrs	r2, r2, #16
 80021f4:	4353      	muls	r3, r2
 80021f6:	4698      	mov	r8, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	002f      	movs	r7, r5
 80021fc:	4343      	muls	r3, r0
 80021fe:	4699      	mov	r9, r3
 8002200:	434f      	muls	r7, r1
 8002202:	444f      	add	r7, r9
 8002204:	46bb      	mov	fp, r7
 8002206:	4647      	mov	r7, r8
 8002208:	000b      	movs	r3, r1
 800220a:	0c3f      	lsrs	r7, r7, #16
 800220c:	46ba      	mov	sl, r7
 800220e:	4343      	muls	r3, r0
 8002210:	44da      	add	sl, fp
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	45d1      	cmp	r9, sl
 8002216:	d904      	bls.n	8002222 <__aeabi_dmul+0x122>
 8002218:	2780      	movs	r7, #128	; 0x80
 800221a:	027f      	lsls	r7, r7, #9
 800221c:	46b9      	mov	r9, r7
 800221e:	444b      	add	r3, r9
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	4653      	mov	r3, sl
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	469b      	mov	fp, r3
 8002228:	4653      	mov	r3, sl
 800222a:	041f      	lsls	r7, r3, #16
 800222c:	4643      	mov	r3, r8
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	4698      	mov	r8, r3
 8002234:	003b      	movs	r3, r7
 8002236:	4443      	add	r3, r8
 8002238:	9304      	str	r3, [sp, #16]
 800223a:	0c33      	lsrs	r3, r6, #16
 800223c:	0436      	lsls	r6, r6, #16
 800223e:	0c36      	lsrs	r6, r6, #16
 8002240:	4698      	mov	r8, r3
 8002242:	0033      	movs	r3, r6
 8002244:	4343      	muls	r3, r0
 8002246:	4699      	mov	r9, r3
 8002248:	4643      	mov	r3, r8
 800224a:	4343      	muls	r3, r0
 800224c:	002f      	movs	r7, r5
 800224e:	469a      	mov	sl, r3
 8002250:	4643      	mov	r3, r8
 8002252:	4377      	muls	r7, r6
 8002254:	435d      	muls	r5, r3
 8002256:	0c38      	lsrs	r0, r7, #16
 8002258:	444d      	add	r5, r9
 800225a:	1945      	adds	r5, r0, r5
 800225c:	45a9      	cmp	r9, r5
 800225e:	d903      	bls.n	8002268 <__aeabi_dmul+0x168>
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	025b      	lsls	r3, r3, #9
 8002264:	4699      	mov	r9, r3
 8002266:	44ca      	add	sl, r9
 8002268:	043f      	lsls	r7, r7, #16
 800226a:	0c28      	lsrs	r0, r5, #16
 800226c:	0c3f      	lsrs	r7, r7, #16
 800226e:	042d      	lsls	r5, r5, #16
 8002270:	19ed      	adds	r5, r5, r7
 8002272:	0c27      	lsrs	r7, r4, #16
 8002274:	0424      	lsls	r4, r4, #16
 8002276:	0c24      	lsrs	r4, r4, #16
 8002278:	0003      	movs	r3, r0
 800227a:	0020      	movs	r0, r4
 800227c:	4350      	muls	r0, r2
 800227e:	437a      	muls	r2, r7
 8002280:	4691      	mov	r9, r2
 8002282:	003a      	movs	r2, r7
 8002284:	4453      	add	r3, sl
 8002286:	9305      	str	r3, [sp, #20]
 8002288:	0c03      	lsrs	r3, r0, #16
 800228a:	469a      	mov	sl, r3
 800228c:	434a      	muls	r2, r1
 800228e:	4361      	muls	r1, r4
 8002290:	4449      	add	r1, r9
 8002292:	4451      	add	r1, sl
 8002294:	44ab      	add	fp, r5
 8002296:	4589      	cmp	r9, r1
 8002298:	d903      	bls.n	80022a2 <__aeabi_dmul+0x1a2>
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	025b      	lsls	r3, r3, #9
 800229e:	4699      	mov	r9, r3
 80022a0:	444a      	add	r2, r9
 80022a2:	0400      	lsls	r0, r0, #16
 80022a4:	0c0b      	lsrs	r3, r1, #16
 80022a6:	0c00      	lsrs	r0, r0, #16
 80022a8:	0409      	lsls	r1, r1, #16
 80022aa:	1809      	adds	r1, r1, r0
 80022ac:	0020      	movs	r0, r4
 80022ae:	4699      	mov	r9, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	4370      	muls	r0, r6
 80022b4:	435c      	muls	r4, r3
 80022b6:	437e      	muls	r6, r7
 80022b8:	435f      	muls	r7, r3
 80022ba:	0c03      	lsrs	r3, r0, #16
 80022bc:	4698      	mov	r8, r3
 80022be:	19a4      	adds	r4, r4, r6
 80022c0:	4444      	add	r4, r8
 80022c2:	444a      	add	r2, r9
 80022c4:	9703      	str	r7, [sp, #12]
 80022c6:	42a6      	cmp	r6, r4
 80022c8:	d904      	bls.n	80022d4 <__aeabi_dmul+0x1d4>
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	025b      	lsls	r3, r3, #9
 80022ce:	4698      	mov	r8, r3
 80022d0:	4447      	add	r7, r8
 80022d2:	9703      	str	r7, [sp, #12]
 80022d4:	0423      	lsls	r3, r4, #16
 80022d6:	9e02      	ldr	r6, [sp, #8]
 80022d8:	469a      	mov	sl, r3
 80022da:	9b05      	ldr	r3, [sp, #20]
 80022dc:	445e      	add	r6, fp
 80022de:	4698      	mov	r8, r3
 80022e0:	42ae      	cmp	r6, r5
 80022e2:	41ad      	sbcs	r5, r5
 80022e4:	1876      	adds	r6, r6, r1
 80022e6:	428e      	cmp	r6, r1
 80022e8:	4189      	sbcs	r1, r1
 80022ea:	0400      	lsls	r0, r0, #16
 80022ec:	0c00      	lsrs	r0, r0, #16
 80022ee:	4450      	add	r0, sl
 80022f0:	4440      	add	r0, r8
 80022f2:	426d      	negs	r5, r5
 80022f4:	1947      	adds	r7, r0, r5
 80022f6:	46b8      	mov	r8, r7
 80022f8:	4693      	mov	fp, r2
 80022fa:	4249      	negs	r1, r1
 80022fc:	4689      	mov	r9, r1
 80022fe:	44c3      	add	fp, r8
 8002300:	44d9      	add	r9, fp
 8002302:	4298      	cmp	r0, r3
 8002304:	4180      	sbcs	r0, r0
 8002306:	45a8      	cmp	r8, r5
 8002308:	41ad      	sbcs	r5, r5
 800230a:	4593      	cmp	fp, r2
 800230c:	4192      	sbcs	r2, r2
 800230e:	4589      	cmp	r9, r1
 8002310:	4189      	sbcs	r1, r1
 8002312:	426d      	negs	r5, r5
 8002314:	4240      	negs	r0, r0
 8002316:	4328      	orrs	r0, r5
 8002318:	0c24      	lsrs	r4, r4, #16
 800231a:	4252      	negs	r2, r2
 800231c:	4249      	negs	r1, r1
 800231e:	430a      	orrs	r2, r1
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	1900      	adds	r0, r0, r4
 8002324:	1880      	adds	r0, r0, r2
 8002326:	18c7      	adds	r7, r0, r3
 8002328:	464b      	mov	r3, r9
 800232a:	0ddc      	lsrs	r4, r3, #23
 800232c:	9b04      	ldr	r3, [sp, #16]
 800232e:	0275      	lsls	r5, r6, #9
 8002330:	431d      	orrs	r5, r3
 8002332:	1e6a      	subs	r2, r5, #1
 8002334:	4195      	sbcs	r5, r2
 8002336:	464b      	mov	r3, r9
 8002338:	0df6      	lsrs	r6, r6, #23
 800233a:	027f      	lsls	r7, r7, #9
 800233c:	4335      	orrs	r5, r6
 800233e:	025a      	lsls	r2, r3, #9
 8002340:	433c      	orrs	r4, r7
 8002342:	4315      	orrs	r5, r2
 8002344:	01fb      	lsls	r3, r7, #7
 8002346:	d400      	bmi.n	800234a <__aeabi_dmul+0x24a>
 8002348:	e11c      	b.n	8002584 <__aeabi_dmul+0x484>
 800234a:	2101      	movs	r1, #1
 800234c:	086a      	lsrs	r2, r5, #1
 800234e:	400d      	ands	r5, r1
 8002350:	4315      	orrs	r5, r2
 8002352:	07e2      	lsls	r2, r4, #31
 8002354:	4315      	orrs	r5, r2
 8002356:	0864      	lsrs	r4, r4, #1
 8002358:	494f      	ldr	r1, [pc, #316]	; (8002498 <__aeabi_dmul+0x398>)
 800235a:	4461      	add	r1, ip
 800235c:	2900      	cmp	r1, #0
 800235e:	dc00      	bgt.n	8002362 <__aeabi_dmul+0x262>
 8002360:	e0b0      	b.n	80024c4 <__aeabi_dmul+0x3c4>
 8002362:	076b      	lsls	r3, r5, #29
 8002364:	d009      	beq.n	800237a <__aeabi_dmul+0x27a>
 8002366:	220f      	movs	r2, #15
 8002368:	402a      	ands	r2, r5
 800236a:	2a04      	cmp	r2, #4
 800236c:	d005      	beq.n	800237a <__aeabi_dmul+0x27a>
 800236e:	1d2a      	adds	r2, r5, #4
 8002370:	42aa      	cmp	r2, r5
 8002372:	41ad      	sbcs	r5, r5
 8002374:	426d      	negs	r5, r5
 8002376:	1964      	adds	r4, r4, r5
 8002378:	0015      	movs	r5, r2
 800237a:	01e3      	lsls	r3, r4, #7
 800237c:	d504      	bpl.n	8002388 <__aeabi_dmul+0x288>
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	4a46      	ldr	r2, [pc, #280]	; (800249c <__aeabi_dmul+0x39c>)
 8002382:	00c9      	lsls	r1, r1, #3
 8002384:	4014      	ands	r4, r2
 8002386:	4461      	add	r1, ip
 8002388:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <__aeabi_dmul+0x3a0>)
 800238a:	4291      	cmp	r1, r2
 800238c:	dd00      	ble.n	8002390 <__aeabi_dmul+0x290>
 800238e:	e726      	b.n	80021de <__aeabi_dmul+0xde>
 8002390:	0762      	lsls	r2, r4, #29
 8002392:	08ed      	lsrs	r5, r5, #3
 8002394:	0264      	lsls	r4, r4, #9
 8002396:	0549      	lsls	r1, r1, #21
 8002398:	4315      	orrs	r5, r2
 800239a:	0b24      	lsrs	r4, r4, #12
 800239c:	0d4a      	lsrs	r2, r1, #21
 800239e:	e710      	b.n	80021c2 <__aeabi_dmul+0xc2>
 80023a0:	4652      	mov	r2, sl
 80023a2:	4332      	orrs	r2, r6
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dmul+0x2a8>
 80023a6:	e07f      	b.n	80024a8 <__aeabi_dmul+0x3a8>
 80023a8:	2e00      	cmp	r6, #0
 80023aa:	d100      	bne.n	80023ae <__aeabi_dmul+0x2ae>
 80023ac:	e0dc      	b.n	8002568 <__aeabi_dmul+0x468>
 80023ae:	0030      	movs	r0, r6
 80023b0:	f000 fe1e 	bl	8002ff0 <__clzsi2>
 80023b4:	0002      	movs	r2, r0
 80023b6:	3a0b      	subs	r2, #11
 80023b8:	231d      	movs	r3, #29
 80023ba:	0001      	movs	r1, r0
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	4652      	mov	r2, sl
 80023c0:	3908      	subs	r1, #8
 80023c2:	40da      	lsrs	r2, r3
 80023c4:	408e      	lsls	r6, r1
 80023c6:	4316      	orrs	r6, r2
 80023c8:	4652      	mov	r2, sl
 80023ca:	408a      	lsls	r2, r1
 80023cc:	9b00      	ldr	r3, [sp, #0]
 80023ce:	4935      	ldr	r1, [pc, #212]	; (80024a4 <__aeabi_dmul+0x3a4>)
 80023d0:	1a18      	subs	r0, r3, r0
 80023d2:	0003      	movs	r3, r0
 80023d4:	468c      	mov	ip, r1
 80023d6:	4463      	add	r3, ip
 80023d8:	2000      	movs	r0, #0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	e6d3      	b.n	8002186 <__aeabi_dmul+0x86>
 80023de:	0025      	movs	r5, r4
 80023e0:	4305      	orrs	r5, r0
 80023e2:	d04a      	beq.n	800247a <__aeabi_dmul+0x37a>
 80023e4:	2c00      	cmp	r4, #0
 80023e6:	d100      	bne.n	80023ea <__aeabi_dmul+0x2ea>
 80023e8:	e0b0      	b.n	800254c <__aeabi_dmul+0x44c>
 80023ea:	0020      	movs	r0, r4
 80023ec:	f000 fe00 	bl	8002ff0 <__clzsi2>
 80023f0:	0001      	movs	r1, r0
 80023f2:	0002      	movs	r2, r0
 80023f4:	390b      	subs	r1, #11
 80023f6:	231d      	movs	r3, #29
 80023f8:	0010      	movs	r0, r2
 80023fa:	1a5b      	subs	r3, r3, r1
 80023fc:	0031      	movs	r1, r6
 80023fe:	0035      	movs	r5, r6
 8002400:	3808      	subs	r0, #8
 8002402:	4084      	lsls	r4, r0
 8002404:	40d9      	lsrs	r1, r3
 8002406:	4085      	lsls	r5, r0
 8002408:	430c      	orrs	r4, r1
 800240a:	4826      	ldr	r0, [pc, #152]	; (80024a4 <__aeabi_dmul+0x3a4>)
 800240c:	1a83      	subs	r3, r0, r2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	4699      	mov	r9, r3
 8002414:	469b      	mov	fp, r3
 8002416:	e697      	b.n	8002148 <__aeabi_dmul+0x48>
 8002418:	0005      	movs	r5, r0
 800241a:	4325      	orrs	r5, r4
 800241c:	d126      	bne.n	800246c <__aeabi_dmul+0x36c>
 800241e:	2208      	movs	r2, #8
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2302      	movs	r3, #2
 8002424:	2400      	movs	r4, #0
 8002426:	4691      	mov	r9, r2
 8002428:	469b      	mov	fp, r3
 800242a:	e68d      	b.n	8002148 <__aeabi_dmul+0x48>
 800242c:	4652      	mov	r2, sl
 800242e:	9b00      	ldr	r3, [sp, #0]
 8002430:	4332      	orrs	r2, r6
 8002432:	d110      	bne.n	8002456 <__aeabi_dmul+0x356>
 8002434:	4915      	ldr	r1, [pc, #84]	; (800248c <__aeabi_dmul+0x38c>)
 8002436:	2600      	movs	r6, #0
 8002438:	468c      	mov	ip, r1
 800243a:	4463      	add	r3, ip
 800243c:	4649      	mov	r1, r9
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2302      	movs	r3, #2
 8002442:	4319      	orrs	r1, r3
 8002444:	4689      	mov	r9, r1
 8002446:	2002      	movs	r0, #2
 8002448:	e69d      	b.n	8002186 <__aeabi_dmul+0x86>
 800244a:	465b      	mov	r3, fp
 800244c:	9701      	str	r7, [sp, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d000      	beq.n	8002454 <__aeabi_dmul+0x354>
 8002452:	e6ad      	b.n	80021b0 <__aeabi_dmul+0xb0>
 8002454:	e6c3      	b.n	80021de <__aeabi_dmul+0xde>
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <__aeabi_dmul+0x38c>)
 8002458:	2003      	movs	r0, #3
 800245a:	4694      	mov	ip, r2
 800245c:	4463      	add	r3, ip
 800245e:	464a      	mov	r2, r9
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2303      	movs	r3, #3
 8002464:	431a      	orrs	r2, r3
 8002466:	4691      	mov	r9, r2
 8002468:	4652      	mov	r2, sl
 800246a:	e68c      	b.n	8002186 <__aeabi_dmul+0x86>
 800246c:	220c      	movs	r2, #12
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2303      	movs	r3, #3
 8002472:	0005      	movs	r5, r0
 8002474:	4691      	mov	r9, r2
 8002476:	469b      	mov	fp, r3
 8002478:	e666      	b.n	8002148 <__aeabi_dmul+0x48>
 800247a:	2304      	movs	r3, #4
 800247c:	4699      	mov	r9, r3
 800247e:	2300      	movs	r3, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	2400      	movs	r4, #0
 8002486:	469b      	mov	fp, r3
 8002488:	e65e      	b.n	8002148 <__aeabi_dmul+0x48>
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	000007ff 	.word	0x000007ff
 8002490:	fffffc01 	.word	0xfffffc01
 8002494:	080092f8 	.word	0x080092f8
 8002498:	000003ff 	.word	0x000003ff
 800249c:	feffffff 	.word	0xfeffffff
 80024a0:	000007fe 	.word	0x000007fe
 80024a4:	fffffc0d 	.word	0xfffffc0d
 80024a8:	4649      	mov	r1, r9
 80024aa:	2301      	movs	r3, #1
 80024ac:	4319      	orrs	r1, r3
 80024ae:	4689      	mov	r9, r1
 80024b0:	2600      	movs	r6, #0
 80024b2:	2001      	movs	r0, #1
 80024b4:	e667      	b.n	8002186 <__aeabi_dmul+0x86>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2480      	movs	r4, #128	; 0x80
 80024ba:	2500      	movs	r5, #0
 80024bc:	4a43      	ldr	r2, [pc, #268]	; (80025cc <__aeabi_dmul+0x4cc>)
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	0324      	lsls	r4, r4, #12
 80024c2:	e67e      	b.n	80021c2 <__aeabi_dmul+0xc2>
 80024c4:	2001      	movs	r0, #1
 80024c6:	1a40      	subs	r0, r0, r1
 80024c8:	2838      	cmp	r0, #56	; 0x38
 80024ca:	dd00      	ble.n	80024ce <__aeabi_dmul+0x3ce>
 80024cc:	e676      	b.n	80021bc <__aeabi_dmul+0xbc>
 80024ce:	281f      	cmp	r0, #31
 80024d0:	dd5b      	ble.n	800258a <__aeabi_dmul+0x48a>
 80024d2:	221f      	movs	r2, #31
 80024d4:	0023      	movs	r3, r4
 80024d6:	4252      	negs	r2, r2
 80024d8:	1a51      	subs	r1, r2, r1
 80024da:	40cb      	lsrs	r3, r1
 80024dc:	0019      	movs	r1, r3
 80024de:	2820      	cmp	r0, #32
 80024e0:	d003      	beq.n	80024ea <__aeabi_dmul+0x3ea>
 80024e2:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <__aeabi_dmul+0x4d0>)
 80024e4:	4462      	add	r2, ip
 80024e6:	4094      	lsls	r4, r2
 80024e8:	4325      	orrs	r5, r4
 80024ea:	1e6a      	subs	r2, r5, #1
 80024ec:	4195      	sbcs	r5, r2
 80024ee:	002a      	movs	r2, r5
 80024f0:	430a      	orrs	r2, r1
 80024f2:	2107      	movs	r1, #7
 80024f4:	000d      	movs	r5, r1
 80024f6:	2400      	movs	r4, #0
 80024f8:	4015      	ands	r5, r2
 80024fa:	4211      	tst	r1, r2
 80024fc:	d05b      	beq.n	80025b6 <__aeabi_dmul+0x4b6>
 80024fe:	210f      	movs	r1, #15
 8002500:	2400      	movs	r4, #0
 8002502:	4011      	ands	r1, r2
 8002504:	2904      	cmp	r1, #4
 8002506:	d053      	beq.n	80025b0 <__aeabi_dmul+0x4b0>
 8002508:	1d11      	adds	r1, r2, #4
 800250a:	4291      	cmp	r1, r2
 800250c:	4192      	sbcs	r2, r2
 800250e:	4252      	negs	r2, r2
 8002510:	18a4      	adds	r4, r4, r2
 8002512:	000a      	movs	r2, r1
 8002514:	0223      	lsls	r3, r4, #8
 8002516:	d54b      	bpl.n	80025b0 <__aeabi_dmul+0x4b0>
 8002518:	2201      	movs	r2, #1
 800251a:	2400      	movs	r4, #0
 800251c:	2500      	movs	r5, #0
 800251e:	e650      	b.n	80021c2 <__aeabi_dmul+0xc2>
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	031b      	lsls	r3, r3, #12
 8002524:	421c      	tst	r4, r3
 8002526:	d009      	beq.n	800253c <__aeabi_dmul+0x43c>
 8002528:	421e      	tst	r6, r3
 800252a:	d107      	bne.n	800253c <__aeabi_dmul+0x43c>
 800252c:	4333      	orrs	r3, r6
 800252e:	031c      	lsls	r4, r3, #12
 8002530:	4643      	mov	r3, r8
 8002532:	0015      	movs	r5, r2
 8002534:	0b24      	lsrs	r4, r4, #12
 8002536:	4a25      	ldr	r2, [pc, #148]	; (80025cc <__aeabi_dmul+0x4cc>)
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	e642      	b.n	80021c2 <__aeabi_dmul+0xc2>
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	0312      	lsls	r2, r2, #12
 8002540:	4314      	orrs	r4, r2
 8002542:	0324      	lsls	r4, r4, #12
 8002544:	4a21      	ldr	r2, [pc, #132]	; (80025cc <__aeabi_dmul+0x4cc>)
 8002546:	0b24      	lsrs	r4, r4, #12
 8002548:	9701      	str	r7, [sp, #4]
 800254a:	e63a      	b.n	80021c2 <__aeabi_dmul+0xc2>
 800254c:	f000 fd50 	bl	8002ff0 <__clzsi2>
 8002550:	0001      	movs	r1, r0
 8002552:	0002      	movs	r2, r0
 8002554:	3115      	adds	r1, #21
 8002556:	3220      	adds	r2, #32
 8002558:	291c      	cmp	r1, #28
 800255a:	dc00      	bgt.n	800255e <__aeabi_dmul+0x45e>
 800255c:	e74b      	b.n	80023f6 <__aeabi_dmul+0x2f6>
 800255e:	0034      	movs	r4, r6
 8002560:	3808      	subs	r0, #8
 8002562:	2500      	movs	r5, #0
 8002564:	4084      	lsls	r4, r0
 8002566:	e750      	b.n	800240a <__aeabi_dmul+0x30a>
 8002568:	f000 fd42 	bl	8002ff0 <__clzsi2>
 800256c:	0003      	movs	r3, r0
 800256e:	001a      	movs	r2, r3
 8002570:	3215      	adds	r2, #21
 8002572:	3020      	adds	r0, #32
 8002574:	2a1c      	cmp	r2, #28
 8002576:	dc00      	bgt.n	800257a <__aeabi_dmul+0x47a>
 8002578:	e71e      	b.n	80023b8 <__aeabi_dmul+0x2b8>
 800257a:	4656      	mov	r6, sl
 800257c:	3b08      	subs	r3, #8
 800257e:	2200      	movs	r2, #0
 8002580:	409e      	lsls	r6, r3
 8002582:	e723      	b.n	80023cc <__aeabi_dmul+0x2cc>
 8002584:	9b00      	ldr	r3, [sp, #0]
 8002586:	469c      	mov	ip, r3
 8002588:	e6e6      	b.n	8002358 <__aeabi_dmul+0x258>
 800258a:	4912      	ldr	r1, [pc, #72]	; (80025d4 <__aeabi_dmul+0x4d4>)
 800258c:	0022      	movs	r2, r4
 800258e:	4461      	add	r1, ip
 8002590:	002e      	movs	r6, r5
 8002592:	408d      	lsls	r5, r1
 8002594:	408a      	lsls	r2, r1
 8002596:	40c6      	lsrs	r6, r0
 8002598:	1e69      	subs	r1, r5, #1
 800259a:	418d      	sbcs	r5, r1
 800259c:	4332      	orrs	r2, r6
 800259e:	432a      	orrs	r2, r5
 80025a0:	40c4      	lsrs	r4, r0
 80025a2:	0753      	lsls	r3, r2, #29
 80025a4:	d0b6      	beq.n	8002514 <__aeabi_dmul+0x414>
 80025a6:	210f      	movs	r1, #15
 80025a8:	4011      	ands	r1, r2
 80025aa:	2904      	cmp	r1, #4
 80025ac:	d1ac      	bne.n	8002508 <__aeabi_dmul+0x408>
 80025ae:	e7b1      	b.n	8002514 <__aeabi_dmul+0x414>
 80025b0:	0765      	lsls	r5, r4, #29
 80025b2:	0264      	lsls	r4, r4, #9
 80025b4:	0b24      	lsrs	r4, r4, #12
 80025b6:	08d2      	lsrs	r2, r2, #3
 80025b8:	4315      	orrs	r5, r2
 80025ba:	2200      	movs	r2, #0
 80025bc:	e601      	b.n	80021c2 <__aeabi_dmul+0xc2>
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	0312      	lsls	r2, r2, #12
 80025c2:	4314      	orrs	r4, r2
 80025c4:	0324      	lsls	r4, r4, #12
 80025c6:	4a01      	ldr	r2, [pc, #4]	; (80025cc <__aeabi_dmul+0x4cc>)
 80025c8:	0b24      	lsrs	r4, r4, #12
 80025ca:	e5fa      	b.n	80021c2 <__aeabi_dmul+0xc2>
 80025cc:	000007ff 	.word	0x000007ff
 80025d0:	0000043e 	.word	0x0000043e
 80025d4:	0000041e 	.word	0x0000041e

080025d8 <__aeabi_dsub>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	4657      	mov	r7, sl
 80025dc:	464e      	mov	r6, r9
 80025de:	4645      	mov	r5, r8
 80025e0:	46de      	mov	lr, fp
 80025e2:	b5e0      	push	{r5, r6, r7, lr}
 80025e4:	001e      	movs	r6, r3
 80025e6:	0017      	movs	r7, r2
 80025e8:	004a      	lsls	r2, r1, #1
 80025ea:	030b      	lsls	r3, r1, #12
 80025ec:	0d52      	lsrs	r2, r2, #21
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	4690      	mov	r8, r2
 80025f2:	0f42      	lsrs	r2, r0, #29
 80025f4:	431a      	orrs	r2, r3
 80025f6:	0fcd      	lsrs	r5, r1, #31
 80025f8:	4ccd      	ldr	r4, [pc, #820]	; (8002930 <__aeabi_dsub+0x358>)
 80025fa:	0331      	lsls	r1, r6, #12
 80025fc:	00c3      	lsls	r3, r0, #3
 80025fe:	4694      	mov	ip, r2
 8002600:	0070      	lsls	r0, r6, #1
 8002602:	0f7a      	lsrs	r2, r7, #29
 8002604:	0a49      	lsrs	r1, r1, #9
 8002606:	00ff      	lsls	r7, r7, #3
 8002608:	469a      	mov	sl, r3
 800260a:	46b9      	mov	r9, r7
 800260c:	0d40      	lsrs	r0, r0, #21
 800260e:	0ff6      	lsrs	r6, r6, #31
 8002610:	4311      	orrs	r1, r2
 8002612:	42a0      	cmp	r0, r4
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x40>
 8002616:	e0b1      	b.n	800277c <__aeabi_dsub+0x1a4>
 8002618:	2201      	movs	r2, #1
 800261a:	4056      	eors	r6, r2
 800261c:	46b3      	mov	fp, r6
 800261e:	42b5      	cmp	r5, r6
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x4c>
 8002622:	e088      	b.n	8002736 <__aeabi_dsub+0x15e>
 8002624:	4642      	mov	r2, r8
 8002626:	1a12      	subs	r2, r2, r0
 8002628:	2a00      	cmp	r2, #0
 800262a:	dc00      	bgt.n	800262e <__aeabi_dsub+0x56>
 800262c:	e0ae      	b.n	800278c <__aeabi_dsub+0x1b4>
 800262e:	2800      	cmp	r0, #0
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x5c>
 8002632:	e0c1      	b.n	80027b8 <__aeabi_dsub+0x1e0>
 8002634:	48be      	ldr	r0, [pc, #760]	; (8002930 <__aeabi_dsub+0x358>)
 8002636:	4580      	cmp	r8, r0
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x64>
 800263a:	e151      	b.n	80028e0 <__aeabi_dsub+0x308>
 800263c:	2080      	movs	r0, #128	; 0x80
 800263e:	0400      	lsls	r0, r0, #16
 8002640:	4301      	orrs	r1, r0
 8002642:	2a38      	cmp	r2, #56	; 0x38
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x70>
 8002646:	e17b      	b.n	8002940 <__aeabi_dsub+0x368>
 8002648:	2a1f      	cmp	r2, #31
 800264a:	dd00      	ble.n	800264e <__aeabi_dsub+0x76>
 800264c:	e1ee      	b.n	8002a2c <__aeabi_dsub+0x454>
 800264e:	2020      	movs	r0, #32
 8002650:	003e      	movs	r6, r7
 8002652:	1a80      	subs	r0, r0, r2
 8002654:	000c      	movs	r4, r1
 8002656:	40d6      	lsrs	r6, r2
 8002658:	40d1      	lsrs	r1, r2
 800265a:	4087      	lsls	r7, r0
 800265c:	4662      	mov	r2, ip
 800265e:	4084      	lsls	r4, r0
 8002660:	1a52      	subs	r2, r2, r1
 8002662:	1e78      	subs	r0, r7, #1
 8002664:	4187      	sbcs	r7, r0
 8002666:	4694      	mov	ip, r2
 8002668:	4334      	orrs	r4, r6
 800266a:	4327      	orrs	r7, r4
 800266c:	1bdc      	subs	r4, r3, r7
 800266e:	42a3      	cmp	r3, r4
 8002670:	419b      	sbcs	r3, r3
 8002672:	4662      	mov	r2, ip
 8002674:	425b      	negs	r3, r3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	4699      	mov	r9, r3
 800267a:	464b      	mov	r3, r9
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xaa>
 8002680:	e118      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002682:	464b      	mov	r3, r9
 8002684:	0258      	lsls	r0, r3, #9
 8002686:	0a43      	lsrs	r3, r0, #9
 8002688:	4699      	mov	r9, r3
 800268a:	464b      	mov	r3, r9
 800268c:	2b00      	cmp	r3, #0
 800268e:	d100      	bne.n	8002692 <__aeabi_dsub+0xba>
 8002690:	e137      	b.n	8002902 <__aeabi_dsub+0x32a>
 8002692:	4648      	mov	r0, r9
 8002694:	f000 fcac 	bl	8002ff0 <__clzsi2>
 8002698:	0001      	movs	r1, r0
 800269a:	3908      	subs	r1, #8
 800269c:	2320      	movs	r3, #32
 800269e:	0022      	movs	r2, r4
 80026a0:	4648      	mov	r0, r9
 80026a2:	1a5b      	subs	r3, r3, r1
 80026a4:	40da      	lsrs	r2, r3
 80026a6:	4088      	lsls	r0, r1
 80026a8:	408c      	lsls	r4, r1
 80026aa:	4643      	mov	r3, r8
 80026ac:	4310      	orrs	r0, r2
 80026ae:	4588      	cmp	r8, r1
 80026b0:	dd00      	ble.n	80026b4 <__aeabi_dsub+0xdc>
 80026b2:	e136      	b.n	8002922 <__aeabi_dsub+0x34a>
 80026b4:	1ac9      	subs	r1, r1, r3
 80026b6:	1c4b      	adds	r3, r1, #1
 80026b8:	2b1f      	cmp	r3, #31
 80026ba:	dd00      	ble.n	80026be <__aeabi_dsub+0xe6>
 80026bc:	e0ea      	b.n	8002894 <__aeabi_dsub+0x2bc>
 80026be:	2220      	movs	r2, #32
 80026c0:	0026      	movs	r6, r4
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	0001      	movs	r1, r0
 80026c6:	4094      	lsls	r4, r2
 80026c8:	40de      	lsrs	r6, r3
 80026ca:	40d8      	lsrs	r0, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	4091      	lsls	r1, r2
 80026d0:	1e62      	subs	r2, r4, #1
 80026d2:	4194      	sbcs	r4, r2
 80026d4:	4681      	mov	r9, r0
 80026d6:	4698      	mov	r8, r3
 80026d8:	4331      	orrs	r1, r6
 80026da:	430c      	orrs	r4, r1
 80026dc:	0763      	lsls	r3, r4, #29
 80026de:	d009      	beq.n	80026f4 <__aeabi_dsub+0x11c>
 80026e0:	230f      	movs	r3, #15
 80026e2:	4023      	ands	r3, r4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d005      	beq.n	80026f4 <__aeabi_dsub+0x11c>
 80026e8:	1d23      	adds	r3, r4, #4
 80026ea:	42a3      	cmp	r3, r4
 80026ec:	41a4      	sbcs	r4, r4
 80026ee:	4264      	negs	r4, r4
 80026f0:	44a1      	add	r9, r4
 80026f2:	001c      	movs	r4, r3
 80026f4:	464b      	mov	r3, r9
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	d400      	bmi.n	80026fc <__aeabi_dsub+0x124>
 80026fa:	e0de      	b.n	80028ba <__aeabi_dsub+0x2e2>
 80026fc:	4641      	mov	r1, r8
 80026fe:	4b8c      	ldr	r3, [pc, #560]	; (8002930 <__aeabi_dsub+0x358>)
 8002700:	3101      	adds	r1, #1
 8002702:	4299      	cmp	r1, r3
 8002704:	d100      	bne.n	8002708 <__aeabi_dsub+0x130>
 8002706:	e0e7      	b.n	80028d8 <__aeabi_dsub+0x300>
 8002708:	464b      	mov	r3, r9
 800270a:	488a      	ldr	r0, [pc, #552]	; (8002934 <__aeabi_dsub+0x35c>)
 800270c:	08e4      	lsrs	r4, r4, #3
 800270e:	4003      	ands	r3, r0
 8002710:	0018      	movs	r0, r3
 8002712:	0549      	lsls	r1, r1, #21
 8002714:	075b      	lsls	r3, r3, #29
 8002716:	0240      	lsls	r0, r0, #9
 8002718:	4323      	orrs	r3, r4
 800271a:	0d4a      	lsrs	r2, r1, #21
 800271c:	0b04      	lsrs	r4, r0, #12
 800271e:	0512      	lsls	r2, r2, #20
 8002720:	07ed      	lsls	r5, r5, #31
 8002722:	4322      	orrs	r2, r4
 8002724:	432a      	orrs	r2, r5
 8002726:	0018      	movs	r0, r3
 8002728:	0011      	movs	r1, r2
 800272a:	bcf0      	pop	{r4, r5, r6, r7}
 800272c:	46bb      	mov	fp, r7
 800272e:	46b2      	mov	sl, r6
 8002730:	46a9      	mov	r9, r5
 8002732:	46a0      	mov	r8, r4
 8002734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002736:	4642      	mov	r2, r8
 8002738:	1a12      	subs	r2, r2, r0
 800273a:	2a00      	cmp	r2, #0
 800273c:	dd52      	ble.n	80027e4 <__aeabi_dsub+0x20c>
 800273e:	2800      	cmp	r0, #0
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x16c>
 8002742:	e09c      	b.n	800287e <__aeabi_dsub+0x2a6>
 8002744:	45a0      	cmp	r8, r4
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x172>
 8002748:	e0ca      	b.n	80028e0 <__aeabi_dsub+0x308>
 800274a:	2080      	movs	r0, #128	; 0x80
 800274c:	0400      	lsls	r0, r0, #16
 800274e:	4301      	orrs	r1, r0
 8002750:	2a38      	cmp	r2, #56	; 0x38
 8002752:	dd00      	ble.n	8002756 <__aeabi_dsub+0x17e>
 8002754:	e149      	b.n	80029ea <__aeabi_dsub+0x412>
 8002756:	2a1f      	cmp	r2, #31
 8002758:	dc00      	bgt.n	800275c <__aeabi_dsub+0x184>
 800275a:	e197      	b.n	8002a8c <__aeabi_dsub+0x4b4>
 800275c:	0010      	movs	r0, r2
 800275e:	000e      	movs	r6, r1
 8002760:	3820      	subs	r0, #32
 8002762:	40c6      	lsrs	r6, r0
 8002764:	2a20      	cmp	r2, #32
 8002766:	d004      	beq.n	8002772 <__aeabi_dsub+0x19a>
 8002768:	2040      	movs	r0, #64	; 0x40
 800276a:	1a82      	subs	r2, r0, r2
 800276c:	4091      	lsls	r1, r2
 800276e:	430f      	orrs	r7, r1
 8002770:	46b9      	mov	r9, r7
 8002772:	464c      	mov	r4, r9
 8002774:	1e62      	subs	r2, r4, #1
 8002776:	4194      	sbcs	r4, r2
 8002778:	4334      	orrs	r4, r6
 800277a:	e13a      	b.n	80029f2 <__aeabi_dsub+0x41a>
 800277c:	000a      	movs	r2, r1
 800277e:	433a      	orrs	r2, r7
 8002780:	d028      	beq.n	80027d4 <__aeabi_dsub+0x1fc>
 8002782:	46b3      	mov	fp, r6
 8002784:	42b5      	cmp	r5, r6
 8002786:	d02b      	beq.n	80027e0 <__aeabi_dsub+0x208>
 8002788:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <__aeabi_dsub+0x360>)
 800278a:	4442      	add	r2, r8
 800278c:	2a00      	cmp	r2, #0
 800278e:	d05d      	beq.n	800284c <__aeabi_dsub+0x274>
 8002790:	4642      	mov	r2, r8
 8002792:	4644      	mov	r4, r8
 8002794:	1a82      	subs	r2, r0, r2
 8002796:	2c00      	cmp	r4, #0
 8002798:	d000      	beq.n	800279c <__aeabi_dsub+0x1c4>
 800279a:	e0f5      	b.n	8002988 <__aeabi_dsub+0x3b0>
 800279c:	4665      	mov	r5, ip
 800279e:	431d      	orrs	r5, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x1cc>
 80027a2:	e19c      	b.n	8002ade <__aeabi_dsub+0x506>
 80027a4:	1e55      	subs	r5, r2, #1
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x1d4>
 80027aa:	e1fb      	b.n	8002ba4 <__aeabi_dsub+0x5cc>
 80027ac:	4c60      	ldr	r4, [pc, #384]	; (8002930 <__aeabi_dsub+0x358>)
 80027ae:	42a2      	cmp	r2, r4
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x1dc>
 80027b2:	e1bd      	b.n	8002b30 <__aeabi_dsub+0x558>
 80027b4:	002a      	movs	r2, r5
 80027b6:	e0f0      	b.n	800299a <__aeabi_dsub+0x3c2>
 80027b8:	0008      	movs	r0, r1
 80027ba:	4338      	orrs	r0, r7
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x1e8>
 80027be:	e0c3      	b.n	8002948 <__aeabi_dsub+0x370>
 80027c0:	1e50      	subs	r0, r2, #1
 80027c2:	2a01      	cmp	r2, #1
 80027c4:	d100      	bne.n	80027c8 <__aeabi_dsub+0x1f0>
 80027c6:	e1a8      	b.n	8002b1a <__aeabi_dsub+0x542>
 80027c8:	4c59      	ldr	r4, [pc, #356]	; (8002930 <__aeabi_dsub+0x358>)
 80027ca:	42a2      	cmp	r2, r4
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x1f8>
 80027ce:	e087      	b.n	80028e0 <__aeabi_dsub+0x308>
 80027d0:	0002      	movs	r2, r0
 80027d2:	e736      	b.n	8002642 <__aeabi_dsub+0x6a>
 80027d4:	2201      	movs	r2, #1
 80027d6:	4056      	eors	r6, r2
 80027d8:	46b3      	mov	fp, r6
 80027da:	42b5      	cmp	r5, r6
 80027dc:	d000      	beq.n	80027e0 <__aeabi_dsub+0x208>
 80027de:	e721      	b.n	8002624 <__aeabi_dsub+0x4c>
 80027e0:	4a55      	ldr	r2, [pc, #340]	; (8002938 <__aeabi_dsub+0x360>)
 80027e2:	4442      	add	r2, r8
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x212>
 80027e8:	e0b5      	b.n	8002956 <__aeabi_dsub+0x37e>
 80027ea:	4642      	mov	r2, r8
 80027ec:	4644      	mov	r4, r8
 80027ee:	1a82      	subs	r2, r0, r2
 80027f0:	2c00      	cmp	r4, #0
 80027f2:	d100      	bne.n	80027f6 <__aeabi_dsub+0x21e>
 80027f4:	e138      	b.n	8002a68 <__aeabi_dsub+0x490>
 80027f6:	4e4e      	ldr	r6, [pc, #312]	; (8002930 <__aeabi_dsub+0x358>)
 80027f8:	42b0      	cmp	r0, r6
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x226>
 80027fc:	e1de      	b.n	8002bbc <__aeabi_dsub+0x5e4>
 80027fe:	2680      	movs	r6, #128	; 0x80
 8002800:	4664      	mov	r4, ip
 8002802:	0436      	lsls	r6, r6, #16
 8002804:	4334      	orrs	r4, r6
 8002806:	46a4      	mov	ip, r4
 8002808:	2a38      	cmp	r2, #56	; 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x236>
 800280c:	e196      	b.n	8002b3c <__aeabi_dsub+0x564>
 800280e:	2a1f      	cmp	r2, #31
 8002810:	dd00      	ble.n	8002814 <__aeabi_dsub+0x23c>
 8002812:	e224      	b.n	8002c5e <__aeabi_dsub+0x686>
 8002814:	2620      	movs	r6, #32
 8002816:	1ab4      	subs	r4, r6, r2
 8002818:	46a2      	mov	sl, r4
 800281a:	4664      	mov	r4, ip
 800281c:	4656      	mov	r6, sl
 800281e:	40b4      	lsls	r4, r6
 8002820:	46a1      	mov	r9, r4
 8002822:	001c      	movs	r4, r3
 8002824:	464e      	mov	r6, r9
 8002826:	40d4      	lsrs	r4, r2
 8002828:	4326      	orrs	r6, r4
 800282a:	0034      	movs	r4, r6
 800282c:	4656      	mov	r6, sl
 800282e:	40b3      	lsls	r3, r6
 8002830:	1e5e      	subs	r6, r3, #1
 8002832:	41b3      	sbcs	r3, r6
 8002834:	431c      	orrs	r4, r3
 8002836:	4663      	mov	r3, ip
 8002838:	40d3      	lsrs	r3, r2
 800283a:	18c9      	adds	r1, r1, r3
 800283c:	19e4      	adds	r4, r4, r7
 800283e:	42bc      	cmp	r4, r7
 8002840:	41bf      	sbcs	r7, r7
 8002842:	427f      	negs	r7, r7
 8002844:	46b9      	mov	r9, r7
 8002846:	4680      	mov	r8, r0
 8002848:	4489      	add	r9, r1
 800284a:	e0d8      	b.n	80029fe <__aeabi_dsub+0x426>
 800284c:	4640      	mov	r0, r8
 800284e:	4c3b      	ldr	r4, [pc, #236]	; (800293c <__aeabi_dsub+0x364>)
 8002850:	3001      	adds	r0, #1
 8002852:	4220      	tst	r0, r4
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x280>
 8002856:	e0b4      	b.n	80029c2 <__aeabi_dsub+0x3ea>
 8002858:	4640      	mov	r0, r8
 800285a:	2800      	cmp	r0, #0
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x288>
 800285e:	e144      	b.n	8002aea <__aeabi_dsub+0x512>
 8002860:	4660      	mov	r0, ip
 8002862:	4318      	orrs	r0, r3
 8002864:	d100      	bne.n	8002868 <__aeabi_dsub+0x290>
 8002866:	e190      	b.n	8002b8a <__aeabi_dsub+0x5b2>
 8002868:	0008      	movs	r0, r1
 800286a:	4338      	orrs	r0, r7
 800286c:	d000      	beq.n	8002870 <__aeabi_dsub+0x298>
 800286e:	e1aa      	b.n	8002bc6 <__aeabi_dsub+0x5ee>
 8002870:	4661      	mov	r1, ip
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	0749      	lsls	r1, r1, #29
 8002876:	430b      	orrs	r3, r1
 8002878:	4661      	mov	r1, ip
 800287a:	08cc      	lsrs	r4, r1, #3
 800287c:	e027      	b.n	80028ce <__aeabi_dsub+0x2f6>
 800287e:	0008      	movs	r0, r1
 8002880:	4338      	orrs	r0, r7
 8002882:	d061      	beq.n	8002948 <__aeabi_dsub+0x370>
 8002884:	1e50      	subs	r0, r2, #1
 8002886:	2a01      	cmp	r2, #1
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x2b4>
 800288a:	e139      	b.n	8002b00 <__aeabi_dsub+0x528>
 800288c:	42a2      	cmp	r2, r4
 800288e:	d027      	beq.n	80028e0 <__aeabi_dsub+0x308>
 8002890:	0002      	movs	r2, r0
 8002892:	e75d      	b.n	8002750 <__aeabi_dsub+0x178>
 8002894:	0002      	movs	r2, r0
 8002896:	391f      	subs	r1, #31
 8002898:	40ca      	lsrs	r2, r1
 800289a:	0011      	movs	r1, r2
 800289c:	2b20      	cmp	r3, #32
 800289e:	d003      	beq.n	80028a8 <__aeabi_dsub+0x2d0>
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	4098      	lsls	r0, r3
 80028a6:	4304      	orrs	r4, r0
 80028a8:	1e63      	subs	r3, r4, #1
 80028aa:	419c      	sbcs	r4, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	4699      	mov	r9, r3
 80028b0:	4698      	mov	r8, r3
 80028b2:	430c      	orrs	r4, r1
 80028b4:	0763      	lsls	r3, r4, #29
 80028b6:	d000      	beq.n	80028ba <__aeabi_dsub+0x2e2>
 80028b8:	e712      	b.n	80026e0 <__aeabi_dsub+0x108>
 80028ba:	464b      	mov	r3, r9
 80028bc:	464a      	mov	r2, r9
 80028be:	08e4      	lsrs	r4, r4, #3
 80028c0:	075b      	lsls	r3, r3, #29
 80028c2:	4323      	orrs	r3, r4
 80028c4:	08d4      	lsrs	r4, r2, #3
 80028c6:	4642      	mov	r2, r8
 80028c8:	4919      	ldr	r1, [pc, #100]	; (8002930 <__aeabi_dsub+0x358>)
 80028ca:	428a      	cmp	r2, r1
 80028cc:	d00e      	beq.n	80028ec <__aeabi_dsub+0x314>
 80028ce:	0324      	lsls	r4, r4, #12
 80028d0:	0552      	lsls	r2, r2, #21
 80028d2:	0b24      	lsrs	r4, r4, #12
 80028d4:	0d52      	lsrs	r2, r2, #21
 80028d6:	e722      	b.n	800271e <__aeabi_dsub+0x146>
 80028d8:	000a      	movs	r2, r1
 80028da:	2400      	movs	r4, #0
 80028dc:	2300      	movs	r3, #0
 80028de:	e71e      	b.n	800271e <__aeabi_dsub+0x146>
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	4662      	mov	r2, ip
 80028e4:	0752      	lsls	r2, r2, #29
 80028e6:	4313      	orrs	r3, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	08d4      	lsrs	r4, r2, #3
 80028ec:	001a      	movs	r2, r3
 80028ee:	4322      	orrs	r2, r4
 80028f0:	d100      	bne.n	80028f4 <__aeabi_dsub+0x31c>
 80028f2:	e1fc      	b.n	8002cee <__aeabi_dsub+0x716>
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	0312      	lsls	r2, r2, #12
 80028f8:	4314      	orrs	r4, r2
 80028fa:	0324      	lsls	r4, r4, #12
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <__aeabi_dsub+0x358>)
 80028fe:	0b24      	lsrs	r4, r4, #12
 8002900:	e70d      	b.n	800271e <__aeabi_dsub+0x146>
 8002902:	0020      	movs	r0, r4
 8002904:	f000 fb74 	bl	8002ff0 <__clzsi2>
 8002908:	0001      	movs	r1, r0
 800290a:	3118      	adds	r1, #24
 800290c:	291f      	cmp	r1, #31
 800290e:	dc00      	bgt.n	8002912 <__aeabi_dsub+0x33a>
 8002910:	e6c4      	b.n	800269c <__aeabi_dsub+0xc4>
 8002912:	3808      	subs	r0, #8
 8002914:	4084      	lsls	r4, r0
 8002916:	4643      	mov	r3, r8
 8002918:	0020      	movs	r0, r4
 800291a:	2400      	movs	r4, #0
 800291c:	4588      	cmp	r8, r1
 800291e:	dc00      	bgt.n	8002922 <__aeabi_dsub+0x34a>
 8002920:	e6c8      	b.n	80026b4 <__aeabi_dsub+0xdc>
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <__aeabi_dsub+0x35c>)
 8002924:	1a5b      	subs	r3, r3, r1
 8002926:	4010      	ands	r0, r2
 8002928:	4698      	mov	r8, r3
 800292a:	4681      	mov	r9, r0
 800292c:	e6d6      	b.n	80026dc <__aeabi_dsub+0x104>
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	000007ff 	.word	0x000007ff
 8002934:	ff7fffff 	.word	0xff7fffff
 8002938:	fffff801 	.word	0xfffff801
 800293c:	000007fe 	.word	0x000007fe
 8002940:	430f      	orrs	r7, r1
 8002942:	1e7a      	subs	r2, r7, #1
 8002944:	4197      	sbcs	r7, r2
 8002946:	e691      	b.n	800266c <__aeabi_dsub+0x94>
 8002948:	4661      	mov	r1, ip
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	0749      	lsls	r1, r1, #29
 800294e:	430b      	orrs	r3, r1
 8002950:	4661      	mov	r1, ip
 8002952:	08cc      	lsrs	r4, r1, #3
 8002954:	e7b8      	b.n	80028c8 <__aeabi_dsub+0x2f0>
 8002956:	4640      	mov	r0, r8
 8002958:	4cd3      	ldr	r4, [pc, #844]	; (8002ca8 <__aeabi_dsub+0x6d0>)
 800295a:	3001      	adds	r0, #1
 800295c:	4220      	tst	r0, r4
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x38a>
 8002960:	e0a2      	b.n	8002aa8 <__aeabi_dsub+0x4d0>
 8002962:	4640      	mov	r0, r8
 8002964:	2800      	cmp	r0, #0
 8002966:	d000      	beq.n	800296a <__aeabi_dsub+0x392>
 8002968:	e101      	b.n	8002b6e <__aeabi_dsub+0x596>
 800296a:	4660      	mov	r0, ip
 800296c:	4318      	orrs	r0, r3
 800296e:	d100      	bne.n	8002972 <__aeabi_dsub+0x39a>
 8002970:	e15e      	b.n	8002c30 <__aeabi_dsub+0x658>
 8002972:	0008      	movs	r0, r1
 8002974:	4338      	orrs	r0, r7
 8002976:	d000      	beq.n	800297a <__aeabi_dsub+0x3a2>
 8002978:	e15f      	b.n	8002c3a <__aeabi_dsub+0x662>
 800297a:	4661      	mov	r1, ip
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	0749      	lsls	r1, r1, #29
 8002980:	430b      	orrs	r3, r1
 8002982:	4661      	mov	r1, ip
 8002984:	08cc      	lsrs	r4, r1, #3
 8002986:	e7a2      	b.n	80028ce <__aeabi_dsub+0x2f6>
 8002988:	4dc8      	ldr	r5, [pc, #800]	; (8002cac <__aeabi_dsub+0x6d4>)
 800298a:	42a8      	cmp	r0, r5
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x3b8>
 800298e:	e0cf      	b.n	8002b30 <__aeabi_dsub+0x558>
 8002990:	2580      	movs	r5, #128	; 0x80
 8002992:	4664      	mov	r4, ip
 8002994:	042d      	lsls	r5, r5, #16
 8002996:	432c      	orrs	r4, r5
 8002998:	46a4      	mov	ip, r4
 800299a:	2a38      	cmp	r2, #56	; 0x38
 800299c:	dc56      	bgt.n	8002a4c <__aeabi_dsub+0x474>
 800299e:	2a1f      	cmp	r2, #31
 80029a0:	dd00      	ble.n	80029a4 <__aeabi_dsub+0x3cc>
 80029a2:	e0d1      	b.n	8002b48 <__aeabi_dsub+0x570>
 80029a4:	2520      	movs	r5, #32
 80029a6:	001e      	movs	r6, r3
 80029a8:	1aad      	subs	r5, r5, r2
 80029aa:	4664      	mov	r4, ip
 80029ac:	40ab      	lsls	r3, r5
 80029ae:	40ac      	lsls	r4, r5
 80029b0:	40d6      	lsrs	r6, r2
 80029b2:	1e5d      	subs	r5, r3, #1
 80029b4:	41ab      	sbcs	r3, r5
 80029b6:	4334      	orrs	r4, r6
 80029b8:	4323      	orrs	r3, r4
 80029ba:	4664      	mov	r4, ip
 80029bc:	40d4      	lsrs	r4, r2
 80029be:	1b09      	subs	r1, r1, r4
 80029c0:	e049      	b.n	8002a56 <__aeabi_dsub+0x47e>
 80029c2:	4660      	mov	r0, ip
 80029c4:	1bdc      	subs	r4, r3, r7
 80029c6:	1a46      	subs	r6, r0, r1
 80029c8:	42a3      	cmp	r3, r4
 80029ca:	4180      	sbcs	r0, r0
 80029cc:	4240      	negs	r0, r0
 80029ce:	4681      	mov	r9, r0
 80029d0:	0030      	movs	r0, r6
 80029d2:	464e      	mov	r6, r9
 80029d4:	1b80      	subs	r0, r0, r6
 80029d6:	4681      	mov	r9, r0
 80029d8:	0200      	lsls	r0, r0, #8
 80029da:	d476      	bmi.n	8002aca <__aeabi_dsub+0x4f2>
 80029dc:	464b      	mov	r3, r9
 80029de:	4323      	orrs	r3, r4
 80029e0:	d000      	beq.n	80029e4 <__aeabi_dsub+0x40c>
 80029e2:	e652      	b.n	800268a <__aeabi_dsub+0xb2>
 80029e4:	2400      	movs	r4, #0
 80029e6:	2500      	movs	r5, #0
 80029e8:	e771      	b.n	80028ce <__aeabi_dsub+0x2f6>
 80029ea:	4339      	orrs	r1, r7
 80029ec:	000c      	movs	r4, r1
 80029ee:	1e62      	subs	r2, r4, #1
 80029f0:	4194      	sbcs	r4, r2
 80029f2:	18e4      	adds	r4, r4, r3
 80029f4:	429c      	cmp	r4, r3
 80029f6:	419b      	sbcs	r3, r3
 80029f8:	425b      	negs	r3, r3
 80029fa:	4463      	add	r3, ip
 80029fc:	4699      	mov	r9, r3
 80029fe:	464b      	mov	r3, r9
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	d400      	bmi.n	8002a06 <__aeabi_dsub+0x42e>
 8002a04:	e756      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002a06:	2301      	movs	r3, #1
 8002a08:	469c      	mov	ip, r3
 8002a0a:	4ba8      	ldr	r3, [pc, #672]	; (8002cac <__aeabi_dsub+0x6d4>)
 8002a0c:	44e0      	add	r8, ip
 8002a0e:	4598      	cmp	r8, r3
 8002a10:	d038      	beq.n	8002a84 <__aeabi_dsub+0x4ac>
 8002a12:	464b      	mov	r3, r9
 8002a14:	48a6      	ldr	r0, [pc, #664]	; (8002cb0 <__aeabi_dsub+0x6d8>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	4003      	ands	r3, r0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	0863      	lsrs	r3, r4, #1
 8002a1e:	4014      	ands	r4, r2
 8002a20:	431c      	orrs	r4, r3
 8002a22:	07c3      	lsls	r3, r0, #31
 8002a24:	431c      	orrs	r4, r3
 8002a26:	0843      	lsrs	r3, r0, #1
 8002a28:	4699      	mov	r9, r3
 8002a2a:	e657      	b.n	80026dc <__aeabi_dsub+0x104>
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	000e      	movs	r6, r1
 8002a30:	3820      	subs	r0, #32
 8002a32:	40c6      	lsrs	r6, r0
 8002a34:	2a20      	cmp	r2, #32
 8002a36:	d004      	beq.n	8002a42 <__aeabi_dsub+0x46a>
 8002a38:	2040      	movs	r0, #64	; 0x40
 8002a3a:	1a82      	subs	r2, r0, r2
 8002a3c:	4091      	lsls	r1, r2
 8002a3e:	430f      	orrs	r7, r1
 8002a40:	46b9      	mov	r9, r7
 8002a42:	464f      	mov	r7, r9
 8002a44:	1e7a      	subs	r2, r7, #1
 8002a46:	4197      	sbcs	r7, r2
 8002a48:	4337      	orrs	r7, r6
 8002a4a:	e60f      	b.n	800266c <__aeabi_dsub+0x94>
 8002a4c:	4662      	mov	r2, ip
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	4193      	sbcs	r3, r2
 8002a56:	1afc      	subs	r4, r7, r3
 8002a58:	42a7      	cmp	r7, r4
 8002a5a:	41bf      	sbcs	r7, r7
 8002a5c:	427f      	negs	r7, r7
 8002a5e:	1bcb      	subs	r3, r1, r7
 8002a60:	4699      	mov	r9, r3
 8002a62:	465d      	mov	r5, fp
 8002a64:	4680      	mov	r8, r0
 8002a66:	e608      	b.n	800267a <__aeabi_dsub+0xa2>
 8002a68:	4666      	mov	r6, ip
 8002a6a:	431e      	orrs	r6, r3
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x498>
 8002a6e:	e0be      	b.n	8002bee <__aeabi_dsub+0x616>
 8002a70:	1e56      	subs	r6, r2, #1
 8002a72:	2a01      	cmp	r2, #1
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x4a0>
 8002a76:	e109      	b.n	8002c8c <__aeabi_dsub+0x6b4>
 8002a78:	4c8c      	ldr	r4, [pc, #560]	; (8002cac <__aeabi_dsub+0x6d4>)
 8002a7a:	42a2      	cmp	r2, r4
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x4a8>
 8002a7e:	e119      	b.n	8002cb4 <__aeabi_dsub+0x6dc>
 8002a80:	0032      	movs	r2, r6
 8002a82:	e6c1      	b.n	8002808 <__aeabi_dsub+0x230>
 8002a84:	4642      	mov	r2, r8
 8002a86:	2400      	movs	r4, #0
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e648      	b.n	800271e <__aeabi_dsub+0x146>
 8002a8c:	2020      	movs	r0, #32
 8002a8e:	000c      	movs	r4, r1
 8002a90:	1a80      	subs	r0, r0, r2
 8002a92:	003e      	movs	r6, r7
 8002a94:	4087      	lsls	r7, r0
 8002a96:	4084      	lsls	r4, r0
 8002a98:	40d6      	lsrs	r6, r2
 8002a9a:	1e78      	subs	r0, r7, #1
 8002a9c:	4187      	sbcs	r7, r0
 8002a9e:	40d1      	lsrs	r1, r2
 8002aa0:	4334      	orrs	r4, r6
 8002aa2:	433c      	orrs	r4, r7
 8002aa4:	448c      	add	ip, r1
 8002aa6:	e7a4      	b.n	80029f2 <__aeabi_dsub+0x41a>
 8002aa8:	4a80      	ldr	r2, [pc, #512]	; (8002cac <__aeabi_dsub+0x6d4>)
 8002aaa:	4290      	cmp	r0, r2
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x4d8>
 8002aae:	e0e9      	b.n	8002c84 <__aeabi_dsub+0x6ac>
 8002ab0:	19df      	adds	r7, r3, r7
 8002ab2:	429f      	cmp	r7, r3
 8002ab4:	419b      	sbcs	r3, r3
 8002ab6:	4461      	add	r1, ip
 8002ab8:	425b      	negs	r3, r3
 8002aba:	18c9      	adds	r1, r1, r3
 8002abc:	07cc      	lsls	r4, r1, #31
 8002abe:	087f      	lsrs	r7, r7, #1
 8002ac0:	084b      	lsrs	r3, r1, #1
 8002ac2:	4699      	mov	r9, r3
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	433c      	orrs	r4, r7
 8002ac8:	e6f4      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002aca:	1afc      	subs	r4, r7, r3
 8002acc:	42a7      	cmp	r7, r4
 8002ace:	41bf      	sbcs	r7, r7
 8002ad0:	4663      	mov	r3, ip
 8002ad2:	427f      	negs	r7, r7
 8002ad4:	1ac9      	subs	r1, r1, r3
 8002ad6:	1bcb      	subs	r3, r1, r7
 8002ad8:	4699      	mov	r9, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	e5d5      	b.n	800268a <__aeabi_dsub+0xb2>
 8002ade:	08ff      	lsrs	r7, r7, #3
 8002ae0:	074b      	lsls	r3, r1, #29
 8002ae2:	465d      	mov	r5, fp
 8002ae4:	433b      	orrs	r3, r7
 8002ae6:	08cc      	lsrs	r4, r1, #3
 8002ae8:	e6ee      	b.n	80028c8 <__aeabi_dsub+0x2f0>
 8002aea:	4662      	mov	r2, ip
 8002aec:	431a      	orrs	r2, r3
 8002aee:	d000      	beq.n	8002af2 <__aeabi_dsub+0x51a>
 8002af0:	e082      	b.n	8002bf8 <__aeabi_dsub+0x620>
 8002af2:	000b      	movs	r3, r1
 8002af4:	433b      	orrs	r3, r7
 8002af6:	d11b      	bne.n	8002b30 <__aeabi_dsub+0x558>
 8002af8:	2480      	movs	r4, #128	; 0x80
 8002afa:	2500      	movs	r5, #0
 8002afc:	0324      	lsls	r4, r4, #12
 8002afe:	e6f9      	b.n	80028f4 <__aeabi_dsub+0x31c>
 8002b00:	19dc      	adds	r4, r3, r7
 8002b02:	429c      	cmp	r4, r3
 8002b04:	419b      	sbcs	r3, r3
 8002b06:	4461      	add	r1, ip
 8002b08:	4689      	mov	r9, r1
 8002b0a:	425b      	negs	r3, r3
 8002b0c:	4499      	add	r9, r3
 8002b0e:	464b      	mov	r3, r9
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	d444      	bmi.n	8002b9e <__aeabi_dsub+0x5c6>
 8002b14:	2301      	movs	r3, #1
 8002b16:	4698      	mov	r8, r3
 8002b18:	e6cc      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002b1a:	1bdc      	subs	r4, r3, r7
 8002b1c:	4662      	mov	r2, ip
 8002b1e:	42a3      	cmp	r3, r4
 8002b20:	419b      	sbcs	r3, r3
 8002b22:	1a51      	subs	r1, r2, r1
 8002b24:	425b      	negs	r3, r3
 8002b26:	1acb      	subs	r3, r1, r3
 8002b28:	4699      	mov	r9, r3
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4698      	mov	r8, r3
 8002b2e:	e5a4      	b.n	800267a <__aeabi_dsub+0xa2>
 8002b30:	08ff      	lsrs	r7, r7, #3
 8002b32:	074b      	lsls	r3, r1, #29
 8002b34:	465d      	mov	r5, fp
 8002b36:	433b      	orrs	r3, r7
 8002b38:	08cc      	lsrs	r4, r1, #3
 8002b3a:	e6d7      	b.n	80028ec <__aeabi_dsub+0x314>
 8002b3c:	4662      	mov	r2, ip
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	0014      	movs	r4, r2
 8002b42:	1e63      	subs	r3, r4, #1
 8002b44:	419c      	sbcs	r4, r3
 8002b46:	e679      	b.n	800283c <__aeabi_dsub+0x264>
 8002b48:	0015      	movs	r5, r2
 8002b4a:	4664      	mov	r4, ip
 8002b4c:	3d20      	subs	r5, #32
 8002b4e:	40ec      	lsrs	r4, r5
 8002b50:	46a0      	mov	r8, r4
 8002b52:	2a20      	cmp	r2, #32
 8002b54:	d005      	beq.n	8002b62 <__aeabi_dsub+0x58a>
 8002b56:	2540      	movs	r5, #64	; 0x40
 8002b58:	4664      	mov	r4, ip
 8002b5a:	1aaa      	subs	r2, r5, r2
 8002b5c:	4094      	lsls	r4, r2
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	469a      	mov	sl, r3
 8002b62:	4654      	mov	r4, sl
 8002b64:	1e63      	subs	r3, r4, #1
 8002b66:	419c      	sbcs	r4, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	4323      	orrs	r3, r4
 8002b6c:	e773      	b.n	8002a56 <__aeabi_dsub+0x47e>
 8002b6e:	4662      	mov	r2, ip
 8002b70:	431a      	orrs	r2, r3
 8002b72:	d023      	beq.n	8002bbc <__aeabi_dsub+0x5e4>
 8002b74:	000a      	movs	r2, r1
 8002b76:	433a      	orrs	r2, r7
 8002b78:	d000      	beq.n	8002b7c <__aeabi_dsub+0x5a4>
 8002b7a:	e0a0      	b.n	8002cbe <__aeabi_dsub+0x6e6>
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	0752      	lsls	r2, r2, #29
 8002b82:	4313      	orrs	r3, r2
 8002b84:	4662      	mov	r2, ip
 8002b86:	08d4      	lsrs	r4, r2, #3
 8002b88:	e6b0      	b.n	80028ec <__aeabi_dsub+0x314>
 8002b8a:	000b      	movs	r3, r1
 8002b8c:	433b      	orrs	r3, r7
 8002b8e:	d100      	bne.n	8002b92 <__aeabi_dsub+0x5ba>
 8002b90:	e728      	b.n	80029e4 <__aeabi_dsub+0x40c>
 8002b92:	08ff      	lsrs	r7, r7, #3
 8002b94:	074b      	lsls	r3, r1, #29
 8002b96:	465d      	mov	r5, fp
 8002b98:	433b      	orrs	r3, r7
 8002b9a:	08cc      	lsrs	r4, r1, #3
 8002b9c:	e697      	b.n	80028ce <__aeabi_dsub+0x2f6>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	e736      	b.n	8002a12 <__aeabi_dsub+0x43a>
 8002ba4:	1afc      	subs	r4, r7, r3
 8002ba6:	42a7      	cmp	r7, r4
 8002ba8:	41bf      	sbcs	r7, r7
 8002baa:	4663      	mov	r3, ip
 8002bac:	427f      	negs	r7, r7
 8002bae:	1ac9      	subs	r1, r1, r3
 8002bb0:	1bcb      	subs	r3, r1, r7
 8002bb2:	4699      	mov	r9, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	465d      	mov	r5, fp
 8002bb8:	4698      	mov	r8, r3
 8002bba:	e55e      	b.n	800267a <__aeabi_dsub+0xa2>
 8002bbc:	074b      	lsls	r3, r1, #29
 8002bbe:	08ff      	lsrs	r7, r7, #3
 8002bc0:	433b      	orrs	r3, r7
 8002bc2:	08cc      	lsrs	r4, r1, #3
 8002bc4:	e692      	b.n	80028ec <__aeabi_dsub+0x314>
 8002bc6:	1bdc      	subs	r4, r3, r7
 8002bc8:	4660      	mov	r0, ip
 8002bca:	42a3      	cmp	r3, r4
 8002bcc:	41b6      	sbcs	r6, r6
 8002bce:	1a40      	subs	r0, r0, r1
 8002bd0:	4276      	negs	r6, r6
 8002bd2:	1b80      	subs	r0, r0, r6
 8002bd4:	4681      	mov	r9, r0
 8002bd6:	0200      	lsls	r0, r0, #8
 8002bd8:	d560      	bpl.n	8002c9c <__aeabi_dsub+0x6c4>
 8002bda:	1afc      	subs	r4, r7, r3
 8002bdc:	42a7      	cmp	r7, r4
 8002bde:	41bf      	sbcs	r7, r7
 8002be0:	4663      	mov	r3, ip
 8002be2:	427f      	negs	r7, r7
 8002be4:	1ac9      	subs	r1, r1, r3
 8002be6:	1bcb      	subs	r3, r1, r7
 8002be8:	4699      	mov	r9, r3
 8002bea:	465d      	mov	r5, fp
 8002bec:	e576      	b.n	80026dc <__aeabi_dsub+0x104>
 8002bee:	08ff      	lsrs	r7, r7, #3
 8002bf0:	074b      	lsls	r3, r1, #29
 8002bf2:	433b      	orrs	r3, r7
 8002bf4:	08cc      	lsrs	r4, r1, #3
 8002bf6:	e667      	b.n	80028c8 <__aeabi_dsub+0x2f0>
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	433a      	orrs	r2, r7
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x62a>
 8002c00:	e66f      	b.n	80028e2 <__aeabi_dsub+0x30a>
 8002c02:	4662      	mov	r2, ip
 8002c04:	0752      	lsls	r2, r2, #29
 8002c06:	4313      	orrs	r3, r2
 8002c08:	4662      	mov	r2, ip
 8002c0a:	08d4      	lsrs	r4, r2, #3
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	0312      	lsls	r2, r2, #12
 8002c10:	4214      	tst	r4, r2
 8002c12:	d007      	beq.n	8002c24 <__aeabi_dsub+0x64c>
 8002c14:	08c8      	lsrs	r0, r1, #3
 8002c16:	4210      	tst	r0, r2
 8002c18:	d104      	bne.n	8002c24 <__aeabi_dsub+0x64c>
 8002c1a:	465d      	mov	r5, fp
 8002c1c:	0004      	movs	r4, r0
 8002c1e:	08fb      	lsrs	r3, r7, #3
 8002c20:	0749      	lsls	r1, r1, #29
 8002c22:	430b      	orrs	r3, r1
 8002c24:	0f5a      	lsrs	r2, r3, #29
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	0752      	lsls	r2, r2, #29
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	e65d      	b.n	80028ec <__aeabi_dsub+0x314>
 8002c30:	074b      	lsls	r3, r1, #29
 8002c32:	08ff      	lsrs	r7, r7, #3
 8002c34:	433b      	orrs	r3, r7
 8002c36:	08cc      	lsrs	r4, r1, #3
 8002c38:	e649      	b.n	80028ce <__aeabi_dsub+0x2f6>
 8002c3a:	19dc      	adds	r4, r3, r7
 8002c3c:	429c      	cmp	r4, r3
 8002c3e:	419b      	sbcs	r3, r3
 8002c40:	4461      	add	r1, ip
 8002c42:	4689      	mov	r9, r1
 8002c44:	425b      	negs	r3, r3
 8002c46:	4499      	add	r9, r3
 8002c48:	464b      	mov	r3, r9
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	d400      	bmi.n	8002c50 <__aeabi_dsub+0x678>
 8002c4e:	e631      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002c50:	464a      	mov	r2, r9
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <__aeabi_dsub+0x6d8>)
 8002c54:	401a      	ands	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	4691      	mov	r9, r2
 8002c5a:	4698      	mov	r8, r3
 8002c5c:	e62a      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002c5e:	0016      	movs	r6, r2
 8002c60:	4664      	mov	r4, ip
 8002c62:	3e20      	subs	r6, #32
 8002c64:	40f4      	lsrs	r4, r6
 8002c66:	46a0      	mov	r8, r4
 8002c68:	2a20      	cmp	r2, #32
 8002c6a:	d005      	beq.n	8002c78 <__aeabi_dsub+0x6a0>
 8002c6c:	2640      	movs	r6, #64	; 0x40
 8002c6e:	4664      	mov	r4, ip
 8002c70:	1ab2      	subs	r2, r6, r2
 8002c72:	4094      	lsls	r4, r2
 8002c74:	4323      	orrs	r3, r4
 8002c76:	469a      	mov	sl, r3
 8002c78:	4654      	mov	r4, sl
 8002c7a:	1e63      	subs	r3, r4, #1
 8002c7c:	419c      	sbcs	r4, r3
 8002c7e:	4643      	mov	r3, r8
 8002c80:	431c      	orrs	r4, r3
 8002c82:	e5db      	b.n	800283c <__aeabi_dsub+0x264>
 8002c84:	0002      	movs	r2, r0
 8002c86:	2400      	movs	r4, #0
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e548      	b.n	800271e <__aeabi_dsub+0x146>
 8002c8c:	19dc      	adds	r4, r3, r7
 8002c8e:	42bc      	cmp	r4, r7
 8002c90:	41bf      	sbcs	r7, r7
 8002c92:	4461      	add	r1, ip
 8002c94:	4689      	mov	r9, r1
 8002c96:	427f      	negs	r7, r7
 8002c98:	44b9      	add	r9, r7
 8002c9a:	e738      	b.n	8002b0e <__aeabi_dsub+0x536>
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dsub+0x6cc>
 8002ca2:	e69f      	b.n	80029e4 <__aeabi_dsub+0x40c>
 8002ca4:	e606      	b.n	80028b4 <__aeabi_dsub+0x2dc>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	000007fe 	.word	0x000007fe
 8002cac:	000007ff 	.word	0x000007ff
 8002cb0:	ff7fffff 	.word	0xff7fffff
 8002cb4:	08ff      	lsrs	r7, r7, #3
 8002cb6:	074b      	lsls	r3, r1, #29
 8002cb8:	433b      	orrs	r3, r7
 8002cba:	08cc      	lsrs	r4, r1, #3
 8002cbc:	e616      	b.n	80028ec <__aeabi_dsub+0x314>
 8002cbe:	4662      	mov	r2, ip
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	0752      	lsls	r2, r2, #29
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	4662      	mov	r2, ip
 8002cc8:	08d4      	lsrs	r4, r2, #3
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	0312      	lsls	r2, r2, #12
 8002cce:	4214      	tst	r4, r2
 8002cd0:	d007      	beq.n	8002ce2 <__aeabi_dsub+0x70a>
 8002cd2:	08c8      	lsrs	r0, r1, #3
 8002cd4:	4210      	tst	r0, r2
 8002cd6:	d104      	bne.n	8002ce2 <__aeabi_dsub+0x70a>
 8002cd8:	465d      	mov	r5, fp
 8002cda:	0004      	movs	r4, r0
 8002cdc:	08fb      	lsrs	r3, r7, #3
 8002cde:	0749      	lsls	r1, r1, #29
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	0f5a      	lsrs	r2, r3, #29
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	0752      	lsls	r2, r2, #29
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	e5fe      	b.n	80028ec <__aeabi_dsub+0x314>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	4a01      	ldr	r2, [pc, #4]	; (8002cf8 <__aeabi_dsub+0x720>)
 8002cf2:	001c      	movs	r4, r3
 8002cf4:	e513      	b.n	800271e <__aeabi_dsub+0x146>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	000007ff 	.word	0x000007ff

08002cfc <__aeabi_dcmpun>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	0005      	movs	r5, r0
 8002d00:	480c      	ldr	r0, [pc, #48]	; (8002d34 <__aeabi_dcmpun+0x38>)
 8002d02:	031c      	lsls	r4, r3, #12
 8002d04:	0016      	movs	r6, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	030a      	lsls	r2, r1, #12
 8002d0a:	0049      	lsls	r1, r1, #1
 8002d0c:	0b12      	lsrs	r2, r2, #12
 8002d0e:	0d49      	lsrs	r1, r1, #21
 8002d10:	0b24      	lsrs	r4, r4, #12
 8002d12:	0d5b      	lsrs	r3, r3, #21
 8002d14:	4281      	cmp	r1, r0
 8002d16:	d008      	beq.n	8002d2a <__aeabi_dcmpun+0x2e>
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <__aeabi_dcmpun+0x38>)
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d103      	bne.n	8002d28 <__aeabi_dcmpun+0x2c>
 8002d20:	0020      	movs	r0, r4
 8002d22:	4330      	orrs	r0, r6
 8002d24:	1e43      	subs	r3, r0, #1
 8002d26:	4198      	sbcs	r0, r3
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	432a      	orrs	r2, r5
 8002d2e:	d1fb      	bne.n	8002d28 <__aeabi_dcmpun+0x2c>
 8002d30:	e7f2      	b.n	8002d18 <__aeabi_dcmpun+0x1c>
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	000007ff 	.word	0x000007ff

08002d38 <__aeabi_d2iz>:
 8002d38:	000a      	movs	r2, r1
 8002d3a:	b530      	push	{r4, r5, lr}
 8002d3c:	4c13      	ldr	r4, [pc, #76]	; (8002d8c <__aeabi_d2iz+0x54>)
 8002d3e:	0053      	lsls	r3, r2, #1
 8002d40:	0309      	lsls	r1, r1, #12
 8002d42:	0005      	movs	r5, r0
 8002d44:	0b09      	lsrs	r1, r1, #12
 8002d46:	2000      	movs	r0, #0
 8002d48:	0d5b      	lsrs	r3, r3, #21
 8002d4a:	0fd2      	lsrs	r2, r2, #31
 8002d4c:	42a3      	cmp	r3, r4
 8002d4e:	dd04      	ble.n	8002d5a <__aeabi_d2iz+0x22>
 8002d50:	480f      	ldr	r0, [pc, #60]	; (8002d90 <__aeabi_d2iz+0x58>)
 8002d52:	4283      	cmp	r3, r0
 8002d54:	dd02      	ble.n	8002d5c <__aeabi_d2iz+0x24>
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <__aeabi_d2iz+0x5c>)
 8002d58:	18d0      	adds	r0, r2, r3
 8002d5a:	bd30      	pop	{r4, r5, pc}
 8002d5c:	2080      	movs	r0, #128	; 0x80
 8002d5e:	0340      	lsls	r0, r0, #13
 8002d60:	4301      	orrs	r1, r0
 8002d62:	480d      	ldr	r0, [pc, #52]	; (8002d98 <__aeabi_d2iz+0x60>)
 8002d64:	1ac0      	subs	r0, r0, r3
 8002d66:	281f      	cmp	r0, #31
 8002d68:	dd08      	ble.n	8002d7c <__aeabi_d2iz+0x44>
 8002d6a:	480c      	ldr	r0, [pc, #48]	; (8002d9c <__aeabi_d2iz+0x64>)
 8002d6c:	1ac3      	subs	r3, r0, r3
 8002d6e:	40d9      	lsrs	r1, r3
 8002d70:	000b      	movs	r3, r1
 8002d72:	4258      	negs	r0, r3
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	d1f0      	bne.n	8002d5a <__aeabi_d2iz+0x22>
 8002d78:	0018      	movs	r0, r3
 8002d7a:	e7ee      	b.n	8002d5a <__aeabi_d2iz+0x22>
 8002d7c:	4c08      	ldr	r4, [pc, #32]	; (8002da0 <__aeabi_d2iz+0x68>)
 8002d7e:	40c5      	lsrs	r5, r0
 8002d80:	46a4      	mov	ip, r4
 8002d82:	4463      	add	r3, ip
 8002d84:	4099      	lsls	r1, r3
 8002d86:	000b      	movs	r3, r1
 8002d88:	432b      	orrs	r3, r5
 8002d8a:	e7f2      	b.n	8002d72 <__aeabi_d2iz+0x3a>
 8002d8c:	000003fe 	.word	0x000003fe
 8002d90:	0000041d 	.word	0x0000041d
 8002d94:	7fffffff 	.word	0x7fffffff
 8002d98:	00000433 	.word	0x00000433
 8002d9c:	00000413 	.word	0x00000413
 8002da0:	fffffbed 	.word	0xfffffbed

08002da4 <__aeabi_i2d>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d016      	beq.n	8002dd8 <__aeabi_i2d+0x34>
 8002daa:	17c3      	asrs	r3, r0, #31
 8002dac:	18c5      	adds	r5, r0, r3
 8002dae:	405d      	eors	r5, r3
 8002db0:	0fc4      	lsrs	r4, r0, #31
 8002db2:	0028      	movs	r0, r5
 8002db4:	f000 f91c 	bl	8002ff0 <__clzsi2>
 8002db8:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <__aeabi_i2d+0x5c>)
 8002dba:	1a12      	subs	r2, r2, r0
 8002dbc:	280a      	cmp	r0, #10
 8002dbe:	dc16      	bgt.n	8002dee <__aeabi_i2d+0x4a>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	002e      	movs	r6, r5
 8002dc4:	3315      	adds	r3, #21
 8002dc6:	409e      	lsls	r6, r3
 8002dc8:	230b      	movs	r3, #11
 8002dca:	1a18      	subs	r0, r3, r0
 8002dcc:	40c5      	lsrs	r5, r0
 8002dce:	0552      	lsls	r2, r2, #21
 8002dd0:	032d      	lsls	r5, r5, #12
 8002dd2:	0b2d      	lsrs	r5, r5, #12
 8002dd4:	0d53      	lsrs	r3, r2, #21
 8002dd6:	e003      	b.n	8002de0 <__aeabi_i2d+0x3c>
 8002dd8:	2400      	movs	r4, #0
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2500      	movs	r5, #0
 8002dde:	2600      	movs	r6, #0
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	432b      	orrs	r3, r5
 8002de4:	07e4      	lsls	r4, r4, #31
 8002de6:	4323      	orrs	r3, r4
 8002de8:	0030      	movs	r0, r6
 8002dea:	0019      	movs	r1, r3
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
 8002dee:	380b      	subs	r0, #11
 8002df0:	4085      	lsls	r5, r0
 8002df2:	0552      	lsls	r2, r2, #21
 8002df4:	032d      	lsls	r5, r5, #12
 8002df6:	2600      	movs	r6, #0
 8002df8:	0b2d      	lsrs	r5, r5, #12
 8002dfa:	0d53      	lsrs	r3, r2, #21
 8002dfc:	e7f0      	b.n	8002de0 <__aeabi_i2d+0x3c>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	0000041e 	.word	0x0000041e

08002e04 <__aeabi_ui2d>:
 8002e04:	b510      	push	{r4, lr}
 8002e06:	1e04      	subs	r4, r0, #0
 8002e08:	d010      	beq.n	8002e2c <__aeabi_ui2d+0x28>
 8002e0a:	f000 f8f1 	bl	8002ff0 <__clzsi2>
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <__aeabi_ui2d+0x48>)
 8002e10:	1a1b      	subs	r3, r3, r0
 8002e12:	280a      	cmp	r0, #10
 8002e14:	dc11      	bgt.n	8002e3a <__aeabi_ui2d+0x36>
 8002e16:	220b      	movs	r2, #11
 8002e18:	0021      	movs	r1, r4
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	40d1      	lsrs	r1, r2
 8002e1e:	3015      	adds	r0, #21
 8002e20:	030a      	lsls	r2, r1, #12
 8002e22:	055b      	lsls	r3, r3, #21
 8002e24:	4084      	lsls	r4, r0
 8002e26:	0b12      	lsrs	r2, r2, #12
 8002e28:	0d5b      	lsrs	r3, r3, #21
 8002e2a:	e001      	b.n	8002e30 <__aeabi_ui2d+0x2c>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	051b      	lsls	r3, r3, #20
 8002e32:	4313      	orrs	r3, r2
 8002e34:	0020      	movs	r0, r4
 8002e36:	0019      	movs	r1, r3
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	0022      	movs	r2, r4
 8002e3c:	380b      	subs	r0, #11
 8002e3e:	4082      	lsls	r2, r0
 8002e40:	055b      	lsls	r3, r3, #21
 8002e42:	0312      	lsls	r2, r2, #12
 8002e44:	2400      	movs	r4, #0
 8002e46:	0b12      	lsrs	r2, r2, #12
 8002e48:	0d5b      	lsrs	r3, r3, #21
 8002e4a:	e7f1      	b.n	8002e30 <__aeabi_ui2d+0x2c>
 8002e4c:	0000041e 	.word	0x0000041e

08002e50 <__aeabi_f2d>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	0043      	lsls	r3, r0, #1
 8002e54:	0246      	lsls	r6, r0, #9
 8002e56:	0fc4      	lsrs	r4, r0, #31
 8002e58:	20fe      	movs	r0, #254	; 0xfe
 8002e5a:	0e1b      	lsrs	r3, r3, #24
 8002e5c:	1c59      	adds	r1, r3, #1
 8002e5e:	0a75      	lsrs	r5, r6, #9
 8002e60:	4208      	tst	r0, r1
 8002e62:	d00c      	beq.n	8002e7e <__aeabi_f2d+0x2e>
 8002e64:	22e0      	movs	r2, #224	; 0xe0
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4694      	mov	ip, r2
 8002e6a:	076d      	lsls	r5, r5, #29
 8002e6c:	0b36      	lsrs	r6, r6, #12
 8002e6e:	4463      	add	r3, ip
 8002e70:	051b      	lsls	r3, r3, #20
 8002e72:	4333      	orrs	r3, r6
 8002e74:	07e4      	lsls	r4, r4, #31
 8002e76:	4323      	orrs	r3, r4
 8002e78:	0028      	movs	r0, r5
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d114      	bne.n	8002eac <__aeabi_f2d+0x5c>
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	d01b      	beq.n	8002ebe <__aeabi_f2d+0x6e>
 8002e86:	0028      	movs	r0, r5
 8002e88:	f000 f8b2 	bl	8002ff0 <__clzsi2>
 8002e8c:	280a      	cmp	r0, #10
 8002e8e:	dc1c      	bgt.n	8002eca <__aeabi_f2d+0x7a>
 8002e90:	230b      	movs	r3, #11
 8002e92:	002e      	movs	r6, r5
 8002e94:	1a1b      	subs	r3, r3, r0
 8002e96:	40de      	lsrs	r6, r3
 8002e98:	0003      	movs	r3, r0
 8002e9a:	3315      	adds	r3, #21
 8002e9c:	409d      	lsls	r5, r3
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <__aeabi_f2d+0x88>)
 8002ea0:	0336      	lsls	r6, r6, #12
 8002ea2:	1a12      	subs	r2, r2, r0
 8002ea4:	0552      	lsls	r2, r2, #21
 8002ea6:	0b36      	lsrs	r6, r6, #12
 8002ea8:	0d53      	lsrs	r3, r2, #21
 8002eaa:	e7e1      	b.n	8002e70 <__aeabi_f2d+0x20>
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	d009      	beq.n	8002ec4 <__aeabi_f2d+0x74>
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	0b36      	lsrs	r6, r6, #12
 8002eb4:	0312      	lsls	r2, r2, #12
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <__aeabi_f2d+0x8c>)
 8002eb8:	076d      	lsls	r5, r5, #29
 8002eba:	4316      	orrs	r6, r2
 8002ebc:	e7d8      	b.n	8002e70 <__aeabi_f2d+0x20>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	e7d5      	b.n	8002e70 <__aeabi_f2d+0x20>
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <__aeabi_f2d+0x8c>)
 8002ec8:	e7d2      	b.n	8002e70 <__aeabi_f2d+0x20>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	3b0b      	subs	r3, #11
 8002ece:	409d      	lsls	r5, r3
 8002ed0:	002e      	movs	r6, r5
 8002ed2:	2500      	movs	r5, #0
 8002ed4:	e7e3      	b.n	8002e9e <__aeabi_f2d+0x4e>
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	00000389 	.word	0x00000389
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__aeabi_d2f>:
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	004b      	lsls	r3, r1, #1
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	0d5b      	lsrs	r3, r3, #21
 8002ee8:	030c      	lsls	r4, r1, #12
 8002eea:	4e3d      	ldr	r6, [pc, #244]	; (8002fe0 <__aeabi_d2f+0x100>)
 8002eec:	0a64      	lsrs	r4, r4, #9
 8002eee:	0f40      	lsrs	r0, r0, #29
 8002ef0:	1c5f      	adds	r7, r3, #1
 8002ef2:	0fc9      	lsrs	r1, r1, #31
 8002ef4:	4304      	orrs	r4, r0
 8002ef6:	00d5      	lsls	r5, r2, #3
 8002ef8:	4237      	tst	r7, r6
 8002efa:	d00a      	beq.n	8002f12 <__aeabi_d2f+0x32>
 8002efc:	4839      	ldr	r0, [pc, #228]	; (8002fe4 <__aeabi_d2f+0x104>)
 8002efe:	181e      	adds	r6, r3, r0
 8002f00:	2efe      	cmp	r6, #254	; 0xfe
 8002f02:	dd16      	ble.n	8002f32 <__aeabi_d2f+0x52>
 8002f04:	20ff      	movs	r0, #255	; 0xff
 8002f06:	2400      	movs	r4, #0
 8002f08:	05c0      	lsls	r0, r0, #23
 8002f0a:	4320      	orrs	r0, r4
 8002f0c:	07c9      	lsls	r1, r1, #31
 8002f0e:	4308      	orrs	r0, r1
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <__aeabi_d2f+0x44>
 8002f16:	432c      	orrs	r4, r5
 8002f18:	d026      	beq.n	8002f68 <__aeabi_d2f+0x88>
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	0192      	lsls	r2, r2, #6
 8002f1e:	0a54      	lsrs	r4, r2, #9
 8002f20:	b2d8      	uxtb	r0, r3
 8002f22:	e7f1      	b.n	8002f08 <__aeabi_d2f+0x28>
 8002f24:	4325      	orrs	r5, r4
 8002f26:	d0ed      	beq.n	8002f04 <__aeabi_d2f+0x24>
 8002f28:	2080      	movs	r0, #128	; 0x80
 8002f2a:	03c0      	lsls	r0, r0, #15
 8002f2c:	4304      	orrs	r4, r0
 8002f2e:	20ff      	movs	r0, #255	; 0xff
 8002f30:	e7ea      	b.n	8002f08 <__aeabi_d2f+0x28>
 8002f32:	2e00      	cmp	r6, #0
 8002f34:	dd1b      	ble.n	8002f6e <__aeabi_d2f+0x8e>
 8002f36:	0192      	lsls	r2, r2, #6
 8002f38:	1e53      	subs	r3, r2, #1
 8002f3a:	419a      	sbcs	r2, r3
 8002f3c:	00e4      	lsls	r4, r4, #3
 8002f3e:	0f6d      	lsrs	r5, r5, #29
 8002f40:	4322      	orrs	r2, r4
 8002f42:	432a      	orrs	r2, r5
 8002f44:	0753      	lsls	r3, r2, #29
 8002f46:	d048      	beq.n	8002fda <__aeabi_d2f+0xfa>
 8002f48:	230f      	movs	r3, #15
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d000      	beq.n	8002f52 <__aeabi_d2f+0x72>
 8002f50:	3204      	adds	r2, #4
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	04db      	lsls	r3, r3, #19
 8002f56:	4013      	ands	r3, r2
 8002f58:	d03f      	beq.n	8002fda <__aeabi_d2f+0xfa>
 8002f5a:	1c70      	adds	r0, r6, #1
 8002f5c:	2efe      	cmp	r6, #254	; 0xfe
 8002f5e:	d0d1      	beq.n	8002f04 <__aeabi_d2f+0x24>
 8002f60:	0192      	lsls	r2, r2, #6
 8002f62:	0a54      	lsrs	r4, r2, #9
 8002f64:	b2c0      	uxtb	r0, r0
 8002f66:	e7cf      	b.n	8002f08 <__aeabi_d2f+0x28>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	2400      	movs	r4, #0
 8002f6c:	e7cc      	b.n	8002f08 <__aeabi_d2f+0x28>
 8002f6e:	0032      	movs	r2, r6
 8002f70:	3217      	adds	r2, #23
 8002f72:	db22      	blt.n	8002fba <__aeabi_d2f+0xda>
 8002f74:	2080      	movs	r0, #128	; 0x80
 8002f76:	0400      	lsls	r0, r0, #16
 8002f78:	4320      	orrs	r0, r4
 8002f7a:	241e      	movs	r4, #30
 8002f7c:	1ba4      	subs	r4, r4, r6
 8002f7e:	2c1f      	cmp	r4, #31
 8002f80:	dd1d      	ble.n	8002fbe <__aeabi_d2f+0xde>
 8002f82:	2202      	movs	r2, #2
 8002f84:	4252      	negs	r2, r2
 8002f86:	1b96      	subs	r6, r2, r6
 8002f88:	0002      	movs	r2, r0
 8002f8a:	40f2      	lsrs	r2, r6
 8002f8c:	0016      	movs	r6, r2
 8002f8e:	2c20      	cmp	r4, #32
 8002f90:	d004      	beq.n	8002f9c <__aeabi_d2f+0xbc>
 8002f92:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <__aeabi_d2f+0x108>)
 8002f94:	4694      	mov	ip, r2
 8002f96:	4463      	add	r3, ip
 8002f98:	4098      	lsls	r0, r3
 8002f9a:	4305      	orrs	r5, r0
 8002f9c:	002a      	movs	r2, r5
 8002f9e:	1e53      	subs	r3, r2, #1
 8002fa0:	419a      	sbcs	r2, r3
 8002fa2:	4332      	orrs	r2, r6
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	0753      	lsls	r3, r2, #29
 8002fa8:	d1ce      	bne.n	8002f48 <__aeabi_d2f+0x68>
 8002faa:	2480      	movs	r4, #128	; 0x80
 8002fac:	0013      	movs	r3, r2
 8002fae:	04e4      	lsls	r4, r4, #19
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	4023      	ands	r3, r4
 8002fb4:	4222      	tst	r2, r4
 8002fb6:	d1d3      	bne.n	8002f60 <__aeabi_d2f+0x80>
 8002fb8:	e7b0      	b.n	8002f1c <__aeabi_d2f+0x3c>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e7ad      	b.n	8002f1a <__aeabi_d2f+0x3a>
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <__aeabi_d2f+0x10c>)
 8002fc0:	4694      	mov	ip, r2
 8002fc2:	002a      	movs	r2, r5
 8002fc4:	40e2      	lsrs	r2, r4
 8002fc6:	0014      	movs	r4, r2
 8002fc8:	002a      	movs	r2, r5
 8002fca:	4463      	add	r3, ip
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	4098      	lsls	r0, r3
 8002fd0:	1e55      	subs	r5, r2, #1
 8002fd2:	41aa      	sbcs	r2, r5
 8002fd4:	4302      	orrs	r2, r0
 8002fd6:	4322      	orrs	r2, r4
 8002fd8:	e7e4      	b.n	8002fa4 <__aeabi_d2f+0xc4>
 8002fda:	0033      	movs	r3, r6
 8002fdc:	e79e      	b.n	8002f1c <__aeabi_d2f+0x3c>
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	000007fe 	.word	0x000007fe
 8002fe4:	fffffc80 	.word	0xfffffc80
 8002fe8:	fffffca2 	.word	0xfffffca2
 8002fec:	fffffc82 	.word	0xfffffc82

08002ff0 <__clzsi2>:
 8002ff0:	211c      	movs	r1, #28
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	4298      	cmp	r0, r3
 8002ff8:	d301      	bcc.n	8002ffe <__clzsi2+0xe>
 8002ffa:	0c00      	lsrs	r0, r0, #16
 8002ffc:	3910      	subs	r1, #16
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	4298      	cmp	r0, r3
 8003002:	d301      	bcc.n	8003008 <__clzsi2+0x18>
 8003004:	0a00      	lsrs	r0, r0, #8
 8003006:	3908      	subs	r1, #8
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	4298      	cmp	r0, r3
 800300c:	d301      	bcc.n	8003012 <__clzsi2+0x22>
 800300e:	0900      	lsrs	r0, r0, #4
 8003010:	3904      	subs	r1, #4
 8003012:	a202      	add	r2, pc, #8	; (adr r2, 800301c <__clzsi2+0x2c>)
 8003014:	5c10      	ldrb	r0, [r2, r0]
 8003016:	1840      	adds	r0, r0, r1
 8003018:	4770      	bx	lr
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	02020304 	.word	0x02020304
 8003020:	01010101 	.word	0x01010101
	...

0800302c <main>:
	MAX30100_setLedsCurrent(MAX30100_LED_CURR_7_6MA, MAX30100_LED_CURR_7_6MA);
	MAX30100_setSamplingRate(MAX30100_SAMPRATE_100HZ);
	MAX30100_setHighresModeEnabled(true);
}

int main(void) {
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
	RCC_CONFIG_48MHZ();
 8003032:	f001 fbd3 	bl	80047dc <RCC_CONFIG_48MHZ>
	uart_print_config(9600);
 8003036:	2396      	movs	r3, #150	; 0x96
 8003038:	019b      	lsls	r3, r3, #6
 800303a:	0018      	movs	r0, r3
 800303c:	f001 fe56 	bl	8004cec <uart_print_config>
	print("Running\n");
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <main+0xcc>)
 8003042:	0018      	movs	r0, r3
 8003044:	f001 fdfc 	bl	8004c40 <print>

//	Tester();
//	MAX30100_begin();
//	max30100_configfun();

	if (!PulseOximeter_begin(PULSEOXIMETER_DEBUGGINGMODE_RAW_VALUES)) {
 8003048:	2001      	movs	r0, #1
 800304a:	f002 faab 	bl	80055a4 <PulseOximeter_begin>
 800304e:	0003      	movs	r3, r0
 8003050:	001a      	movs	r2, r3
 8003052:	2301      	movs	r3, #1
 8003054:	4053      	eors	r3, r2
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <main+0x3a>
		print("Failed\n");
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <main+0xd0>)
 800305e:	0018      	movs	r0, r3
 8003060:	f001 fdee 	bl	8004c40 <print>
 8003064:	e003      	b.n	800306e <main+0x42>
	} else {
		print("Success\n");
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <main+0xd4>)
 8003068:	0018      	movs	r0, r3
 800306a:	f001 fde9 	bl	8004c40 <print>
	}
	PulseOximeter_setIRLedCurrent(MAX30100_LED_CURR_7_6MA);
 800306e:	2002      	movs	r0, #2
 8003070:	f002 fb02 	bl	8005678 <PulseOximeter_setIRLedCurrent>

//	uint16_t ir = 0;
//	uint16_t red = 0;
	float ir = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
	float red = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	607b      	str	r3, [r7, #4]

	uint8_t MAX30100_ready = 1;
 800307c:	230f      	movs	r3, #15
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
	uint16_t tsLastReport = 0;
 8003084:	230c      	movs	r3, #12
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	801a      	strh	r2, [r3, #0]
//		 print("IR: %f, RED: %f\n", ir, red);
//		 }
//		 }


		if (PulseOximeter_update() != BML_OK) {
 800308c:	f002 fad4 	bl	8005638 <PulseOximeter_update>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d00b      	beq.n	80030ac <main+0x80>
			print("Error Updating\n");
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <main+0xd8>)
 8003096:	0018      	movs	r0, r3
 8003098:	f001 fdd2 	bl	8004c40 <print>
			PulseOximeter_begin(PULSEOXIMETER_DEBUGGINGMODE_NONE);
 800309c:	2000      	movs	r0, #0
 800309e:	f002 fa81 	bl	80055a4 <PulseOximeter_begin>
			MAX30100_ready = 0;
 80030a2:	230f      	movs	r3, #15
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e003      	b.n	80030b4 <main+0x88>
		} else {
			MAX30100_ready = 1;
 80030ac:	230f      	movs	r3, #15
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
		}
		if (MAX30100_ready) {
 80030b4:	230f      	movs	r3, #15
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d019      	beq.n	80030f2 <main+0xc6>
			if (HAL_GetTick() - tsLastReport > 100) {
 80030be:	f000 f96d 	bl	800339c <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	240c      	movs	r4, #12
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b64      	cmp	r3, #100	; 0x64
 80030ce:	d910      	bls.n	80030f2 <main+0xc6>
				ir = PulseOximeter_getHeartRate();
 80030d0:	f002 fac2 	bl	8005658 <PulseOximeter_getHeartRate>
 80030d4:	1c03      	adds	r3, r0, #0
 80030d6:	60bb      	str	r3, [r7, #8]
				red = PulseOximeter_getSpO2();
 80030d8:	f002 fac6 	bl	8005668 <PulseOximeter_getSpO2>
 80030dc:	0003      	movs	r3, r0
 80030de:	0018      	movs	r0, r3
 80030e0:	f7fe f88e 	bl	8001200 <__aeabi_ui2f>
 80030e4:	1c03      	adds	r3, r0, #0
 80030e6:	607b      	str	r3, [r7, #4]
//				print("                     Float: %0.2f, %0.2f\n\r", ir, red);

				tsLastReport = HAL_GetTick();
 80030e8:	f000 f958 	bl	800339c <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	801a      	strh	r2, [r3, #0]
			}
		}
		MAX30100_resetFifo();
 80030f2:	f001 ffbf 	bl	8005074 <MAX30100_resetFifo>
		if (PulseOximeter_update() != BML_OK) {
 80030f6:	e7c9      	b.n	800308c <main+0x60>
 80030f8:	08009164 	.word	0x08009164
 80030fc:	08009170 	.word	0x08009170
 8003100:	08009178 	.word	0x08009178
 8003104:	08009184 	.word	0x08009184

08003108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800310c:	e7fe      	b.n	800310c <NMI_Handler+0x4>

0800310e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <HardFault_Handler+0x4>

08003114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800312c:	f000 f924 	bl	8003378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
	return 1;
 800313a:	2301      	movs	r3, #1
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_kill>:

int _kill(int pid, int sig)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800314c:	f002 fd5c 	bl	8005c08 <__errno>
 8003150:	0003      	movs	r3, r0
 8003152:	2216      	movs	r2, #22
 8003154:	601a      	str	r2, [r3, #0]
	return -1;
 8003156:	2301      	movs	r3, #1
 8003158:	425b      	negs	r3, r3
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <_exit>:

void _exit (int status)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800316a:	2301      	movs	r3, #1
 800316c:	425a      	negs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff ffe5 	bl	8003142 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003178:	e7fe      	b.n	8003178 <_exit+0x16>

0800317a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00a      	b.n	80031a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800318c:	e000      	b.n	8003190 <_read+0x16>
 800318e:	bf00      	nop
 8003190:	0001      	movs	r1, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	60ba      	str	r2, [r7, #8]
 8003198:	b2ca      	uxtb	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	dbf0      	blt.n	800318c <_read+0x12>
	}

return len;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b006      	add	sp, #24
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e009      	b.n	80031da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	0018      	movs	r0, r3
 80031d0:	e000      	b.n	80031d4 <_write+0x20>
 80031d2:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	dbf1      	blt.n	80031c6 <_write+0x12>
	}
	return len;
 80031e2:	687b      	ldr	r3, [r7, #4]
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b006      	add	sp, #24
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_close>:

int _close(int file)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	return -1;
 80031f4:	2301      	movs	r3, #1
 80031f6:	425b      	negs	r3, r3
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	0192      	lsls	r2, r2, #6
 8003210:	605a      	str	r2, [r3, #4]
	return 0;
 8003212:	2300      	movs	r3, #0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <_isatty>:

int _isatty(int file)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	return 1;
 8003224:	2301      	movs	r3, #1
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}

0800322e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
	return 0;
 800323a:	2300      	movs	r3, #0
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}

08003244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <_sbrk+0x5c>)
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <_sbrk+0x60>)
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <_sbrk+0x64>)
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <_sbrk+0x68>)
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	18d3      	adds	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d207      	bcs.n	8003284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003274:	f002 fcc8 	bl	8005c08 <__errno>
 8003278:	0003      	movs	r3, r0
 800327a:	220c      	movs	r2, #12
 800327c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327e:	2301      	movs	r3, #1
 8003280:	425b      	negs	r3, r3
 8003282:	e009      	b.n	8003298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	18d2      	adds	r2, r2, r3
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <_sbrk+0x64>)
 8003294:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b006      	add	sp, #24
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20004000 	.word	0x20004000
 80032a4:	00000400 	.word	0x00000400
 80032a8:	20000240 	.word	0x20000240
 80032ac:	200004f0 	.word	0x200004f0

080032b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032bc:	480d      	ldr	r0, [pc, #52]	; (80032f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c0:	480d      	ldr	r0, [pc, #52]	; (80032f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80032c2:	490e      	ldr	r1, [pc, #56]	; (80032fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <LoopForever+0xe>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c8:	e002      	b.n	80032d0 <LoopCopyDataInit>

080032ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ce:	3304      	adds	r3, #4

080032d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d4:	d3f9      	bcc.n	80032ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d8:	4c0b      	ldr	r4, [pc, #44]	; (8003308 <LoopForever+0x16>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032dc:	e001      	b.n	80032e2 <LoopFillZerobss>

080032de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e0:	3204      	adds	r2, #4

080032e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e4:	d3fb      	bcc.n	80032de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032e6:	f7ff ffe3 	bl	80032b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032ea:	f002 fc93 	bl	8005c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ee:	f7ff fe9d 	bl	800302c <main>

080032f2 <LoopForever>:

LoopForever:
    b LoopForever
 80032f2:	e7fe      	b.n	80032f2 <LoopForever>
  ldr   r0, =_estack
 80032f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80032f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032fc:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003300:	08009774 	.word	0x08009774
  ldr r2, =_sbss
 8003304:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003308:	200004f0 	.word	0x200004f0

0800330c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC1_IRQHandler>
	...

08003310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_InitTick+0x5c>)
 800331a:	681c      	ldr	r4, [r3, #0]
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_InitTick+0x60>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	0019      	movs	r1, r3
 8003322:	23fa      	movs	r3, #250	; 0xfa
 8003324:	0098      	lsls	r0, r3, #2
 8003326:	f7fc ff0b 	bl	8000140 <__udivsi3>
 800332a:	0003      	movs	r3, r0
 800332c:	0019      	movs	r1, r3
 800332e:	0020      	movs	r0, r4
 8003330:	f7fc ff06 	bl	8000140 <__udivsi3>
 8003334:	0003      	movs	r3, r0
 8003336:	0018      	movs	r0, r3
 8003338:	f000 f905 	bl	8003546 <HAL_SYSTICK_Config>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d001      	beq.n	8003344 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e00f      	b.n	8003364 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d80b      	bhi.n	8003362 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	2301      	movs	r3, #1
 800334e:	425b      	negs	r3, r3
 8003350:	2200      	movs	r2, #0
 8003352:	0018      	movs	r0, r3
 8003354:	f000 f8e2 	bl	800351c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_InitTick+0x64>)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b003      	add	sp, #12
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	20000000 	.word	0x20000000
 8003370:	20000008 	.word	0x20000008
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_IncTick+0x1c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	001a      	movs	r2, r3
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_IncTick+0x20>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	18d2      	adds	r2, r2, r3
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_IncTick+0x20>)
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000008 	.word	0x20000008
 8003398:	20000244 	.word	0x20000244

0800339c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b02      	ldr	r3, [pc, #8]	; (80033ac <HAL_GetTick+0x10>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	20000244 	.word	0x20000244

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff fff0 	bl	800339c <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_Delay+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	001a      	movs	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	f7ff ffe0 	bl	800339c <HAL_GetTick>
 80033dc:	0002      	movs	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000008 	.word	0x20000008

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	0002      	movs	r2, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b7f      	cmp	r3, #127	; 0x7f
 800340c:	d828      	bhi.n	8003460 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800340e:	4a2f      	ldr	r2, [pc, #188]	; (80034cc <__NVIC_SetPriority+0xd4>)
 8003410:	1dfb      	adds	r3, r7, #7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b25b      	sxtb	r3, r3
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	33c0      	adds	r3, #192	; 0xc0
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	589b      	ldr	r3, [r3, r2]
 800341e:	1dfa      	adds	r2, r7, #7
 8003420:	7812      	ldrb	r2, [r2, #0]
 8003422:	0011      	movs	r1, r2
 8003424:	2203      	movs	r2, #3
 8003426:	400a      	ands	r2, r1
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	21ff      	movs	r1, #255	; 0xff
 800342c:	4091      	lsls	r1, r2
 800342e:	000a      	movs	r2, r1
 8003430:	43d2      	mvns	r2, r2
 8003432:	401a      	ands	r2, r3
 8003434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	22ff      	movs	r2, #255	; 0xff
 800343c:	401a      	ands	r2, r3
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	2303      	movs	r3, #3
 8003446:	4003      	ands	r3, r0
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344c:	481f      	ldr	r0, [pc, #124]	; (80034cc <__NVIC_SetPriority+0xd4>)
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b25b      	sxtb	r3, r3
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	430a      	orrs	r2, r1
 8003458:	33c0      	adds	r3, #192	; 0xc0
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800345e:	e031      	b.n	80034c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <__NVIC_SetPriority+0xd8>)
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	0019      	movs	r1, r3
 8003468:	230f      	movs	r3, #15
 800346a:	400b      	ands	r3, r1
 800346c:	3b08      	subs	r3, #8
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3306      	adds	r3, #6
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	3304      	adds	r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1dfa      	adds	r2, r7, #7
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	0011      	movs	r1, r2
 8003480:	2203      	movs	r2, #3
 8003482:	400a      	ands	r2, r1
 8003484:	00d2      	lsls	r2, r2, #3
 8003486:	21ff      	movs	r1, #255	; 0xff
 8003488:	4091      	lsls	r1, r2
 800348a:	000a      	movs	r2, r1
 800348c:	43d2      	mvns	r2, r2
 800348e:	401a      	ands	r2, r3
 8003490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	22ff      	movs	r2, #255	; 0xff
 8003498:	401a      	ands	r2, r3
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	0018      	movs	r0, r3
 80034a0:	2303      	movs	r3, #3
 80034a2:	4003      	ands	r3, r0
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a8:	4809      	ldr	r0, [pc, #36]	; (80034d0 <__NVIC_SetPriority+0xd8>)
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	001c      	movs	r4, r3
 80034b0:	230f      	movs	r3, #15
 80034b2:	4023      	ands	r3, r4
 80034b4:	3b08      	subs	r3, #8
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	430a      	orrs	r2, r1
 80034ba:	3306      	adds	r3, #6
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	18c3      	adds	r3, r0, r3
 80034c0:	3304      	adds	r3, #4
 80034c2:	601a      	str	r2, [r3, #0]
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b003      	add	sp, #12
 80034ca:	bd90      	pop	{r4, r7, pc}
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	045b      	lsls	r3, r3, #17
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d301      	bcc.n	80034ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e8:	2301      	movs	r3, #1
 80034ea:	e010      	b.n	800350e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <SysTick_Config+0x44>)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	3a01      	subs	r2, #1
 80034f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f4:	2301      	movs	r3, #1
 80034f6:	425b      	negs	r3, r3
 80034f8:	2103      	movs	r1, #3
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff ff7c 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <SysTick_Config+0x44>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <SysTick_Config+0x44>)
 8003508:	2207      	movs	r2, #7
 800350a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b002      	add	sp, #8
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	e000e010 	.word	0xe000e010

0800351c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	210f      	movs	r1, #15
 8003528:	187b      	adds	r3, r7, r1
 800352a:	1c02      	adds	r2, r0, #0
 800352c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	187b      	adds	r3, r7, r1
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b25b      	sxtb	r3, r3
 8003536:	0011      	movs	r1, r2
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff ffbf 	bl	80034d4 <SysTick_Config>
 8003556:	0003      	movs	r3, r0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e305      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	4013      	ands	r3, r2
 800357a:	d100      	bne.n	800357e <HAL_RCC_OscConfig+0x1e>
 800357c:	e08d      	b.n	800369a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800357e:	4bc5      	ldr	r3, [pc, #788]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	220c      	movs	r2, #12
 8003584:	4013      	ands	r3, r2
 8003586:	2b04      	cmp	r3, #4
 8003588:	d00e      	beq.n	80035a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358a:	4bc2      	ldr	r3, [pc, #776]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	220c      	movs	r2, #12
 8003590:	4013      	ands	r3, r2
 8003592:	2b08      	cmp	r3, #8
 8003594:	d116      	bne.n	80035c4 <HAL_RCC_OscConfig+0x64>
 8003596:	4bbf      	ldr	r3, [pc, #764]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	23c0      	movs	r3, #192	; 0xc0
 800359c:	025b      	lsls	r3, r3, #9
 800359e:	401a      	ands	r2, r3
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	025b      	lsls	r3, r3, #9
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d10d      	bne.n	80035c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	4bba      	ldr	r3, [pc, #744]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	4013      	ands	r3, r2
 80035b2:	d100      	bne.n	80035b6 <HAL_RCC_OscConfig+0x56>
 80035b4:	e070      	b.n	8003698 <HAL_RCC_OscConfig+0x138>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d000      	beq.n	80035c0 <HAL_RCC_OscConfig+0x60>
 80035be:	e06b      	b.n	8003698 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e2dc      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x7c>
 80035cc:	4bb1      	ldr	r3, [pc, #708]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4bb0      	ldr	r3, [pc, #704]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	0249      	lsls	r1, r1, #9
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e02f      	b.n	800363c <HAL_RCC_OscConfig+0xdc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_OscConfig+0x9e>
 80035e4:	4bab      	ldr	r3, [pc, #684]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4baa      	ldr	r3, [pc, #680]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035ea:	49ab      	ldr	r1, [pc, #684]	; (8003898 <HAL_RCC_OscConfig+0x338>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	4ba8      	ldr	r3, [pc, #672]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4ba7      	ldr	r3, [pc, #668]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80035f6:	49a9      	ldr	r1, [pc, #676]	; (800389c <HAL_RCC_OscConfig+0x33c>)
 80035f8:	400a      	ands	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e01e      	b.n	800363c <HAL_RCC_OscConfig+0xdc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d10e      	bne.n	8003624 <HAL_RCC_OscConfig+0xc4>
 8003606:	4ba3      	ldr	r3, [pc, #652]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4ba2      	ldr	r3, [pc, #648]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	02c9      	lsls	r1, r1, #11
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	4b9f      	ldr	r3, [pc, #636]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	0249      	lsls	r1, r1, #9
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xdc>
 8003624:	4b9b      	ldr	r3, [pc, #620]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b9a      	ldr	r3, [pc, #616]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800362a:	499b      	ldr	r1, [pc, #620]	; (8003898 <HAL_RCC_OscConfig+0x338>)
 800362c:	400a      	ands	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	4b98      	ldr	r3, [pc, #608]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b97      	ldr	r3, [pc, #604]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003636:	4999      	ldr	r1, [pc, #612]	; (800389c <HAL_RCC_OscConfig+0x33c>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d014      	beq.n	800366e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7ff feaa 	bl	800339c <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364e:	f7ff fea5 	bl	800339c <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e28e      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003660:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	4013      	ands	r3, r2
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0xee>
 800366c:	e015      	b.n	800369a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7ff fe95 	bl	800339c <HAL_GetTick>
 8003672:	0003      	movs	r3, r0
 8003674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003678:	f7ff fe90 	bl	800339c <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e279      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	4b82      	ldr	r3, [pc, #520]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	4013      	ands	r3, r2
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x118>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	d100      	bne.n	80036a6 <HAL_RCC_OscConfig+0x146>
 80036a4:	e06c      	b.n	8003780 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036a6:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	220c      	movs	r2, #12
 80036ac:	4013      	ands	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036b0:	4b78      	ldr	r3, [pc, #480]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	220c      	movs	r2, #12
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11f      	bne.n	80036fc <HAL_RCC_OscConfig+0x19c>
 80036bc:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	025b      	lsls	r3, r3, #9
 80036c4:	401a      	ands	r2, r3
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d116      	bne.n	80036fc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	4b71      	ldr	r3, [pc, #452]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2202      	movs	r2, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x184>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e24c      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b6b      	ldr	r3, [pc, #428]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	22f8      	movs	r2, #248	; 0xf8
 80036ea:	4393      	bics	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	00da      	lsls	r2, r3, #3
 80036f4:	4b67      	ldr	r3, [pc, #412]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80036f6:	430a      	orrs	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	e041      	b.n	8003780 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d024      	beq.n	800374e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003704:	4b63      	ldr	r3, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800370a:	2101      	movs	r1, #1
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7ff fe44 	bl	800339c <HAL_GetTick>
 8003714:	0003      	movs	r3, r0
 8003716:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371a:	f7ff fe3f 	bl	800339c <HAL_GetTick>
 800371e:	0002      	movs	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e228      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d0f1      	beq.n	800371a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	22f8      	movs	r2, #248	; 0xf8
 800373c:	4393      	bics	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00da      	lsls	r2, r3, #3
 8003746:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e018      	b.n	8003780 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003754:	2101      	movs	r1, #1
 8003756:	438a      	bics	r2, r1
 8003758:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7ff fe1f 	bl	800339c <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003764:	f7ff fe1a 	bl	800339c <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e203      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d1f1      	bne.n	8003764 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2208      	movs	r2, #8
 8003786:	4013      	ands	r3, r2
 8003788:	d036      	beq.n	80037f8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d019      	beq.n	80037c6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7ff fdfd 	bl	800339c <HAL_GetTick>
 80037a2:	0003      	movs	r3, r0
 80037a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a8:	f7ff fdf8 	bl	800339c <HAL_GetTick>
 80037ac:	0002      	movs	r2, r0
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1e1      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2202      	movs	r2, #2
 80037c0:	4013      	ands	r3, r2
 80037c2:	d0f1      	beq.n	80037a8 <HAL_RCC_OscConfig+0x248>
 80037c4:	e018      	b.n	80037f8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80037c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80037cc:	2101      	movs	r1, #1
 80037ce:	438a      	bics	r2, r1
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d2:	f7ff fde3 	bl	800339c <HAL_GetTick>
 80037d6:	0003      	movs	r3, r0
 80037d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037dc:	f7ff fdde 	bl	800339c <HAL_GetTick>
 80037e0:	0002      	movs	r2, r0
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1c7      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2202      	movs	r2, #2
 80037f4:	4013      	ands	r3, r2
 80037f6:	d1f1      	bne.n	80037dc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	d100      	bne.n	8003804 <HAL_RCC_OscConfig+0x2a4>
 8003802:	e0b5      	b.n	8003970 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003804:	201f      	movs	r0, #31
 8003806:	183b      	adds	r3, r7, r0
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	055b      	lsls	r3, r3, #21
 8003814:	4013      	ands	r3, r2
 8003816:	d110      	bne.n	800383a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	0549      	lsls	r1, r1, #21
 8003822:	430a      	orrs	r2, r1
 8003824:	61da      	str	r2, [r3, #28]
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	055b      	lsls	r3, r3, #21
 800382e:	4013      	ands	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003834:	183b      	adds	r3, r7, r0
 8003836:	2201      	movs	r2, #1
 8003838:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_OscConfig+0x340>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4013      	ands	r3, r2
 8003844:	d11a      	bne.n	800387c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_RCC_OscConfig+0x340>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_RCC_OscConfig+0x340>)
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	0049      	lsls	r1, r1, #1
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003854:	f7ff fda2 	bl	800339c <HAL_GetTick>
 8003858:	0003      	movs	r3, r0
 800385a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7ff fd9d 	bl	800339c <HAL_GetTick>
 8003862:	0002      	movs	r2, r0
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e186      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x340>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4013      	ands	r3, r2
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10f      	bne.n	80038a4 <HAL_RCC_OscConfig+0x344>
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	4b02      	ldr	r3, [pc, #8]	; (8003894 <HAL_RCC_OscConfig+0x334>)
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	621a      	str	r2, [r3, #32]
 8003890:	e036      	b.n	8003900 <HAL_RCC_OscConfig+0x3a0>
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	40021000 	.word	0x40021000
 8003898:	fffeffff 	.word	0xfffeffff
 800389c:	fffbffff 	.word	0xfffbffff
 80038a0:	40007000 	.word	0x40007000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x366>
 80038ac:	4bb6      	ldr	r3, [pc, #728]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	4bb5      	ldr	r3, [pc, #724]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	438a      	bics	r2, r1
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	4bb3      	ldr	r3, [pc, #716]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	4bb2      	ldr	r3, [pc, #712]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038be:	2104      	movs	r1, #4
 80038c0:	438a      	bics	r2, r1
 80038c2:	621a      	str	r2, [r3, #32]
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x3a0>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x388>
 80038ce:	4bae      	ldr	r3, [pc, #696]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	4bad      	ldr	r3, [pc, #692]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038d4:	2104      	movs	r1, #4
 80038d6:	430a      	orrs	r2, r1
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	4bab      	ldr	r3, [pc, #684]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	4baa      	ldr	r3, [pc, #680]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0x3a0>
 80038e8:	4ba7      	ldr	r3, [pc, #668]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4ba6      	ldr	r3, [pc, #664]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	438a      	bics	r2, r1
 80038f2:	621a      	str	r2, [r3, #32]
 80038f4:	4ba4      	ldr	r3, [pc, #656]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	4ba3      	ldr	r3, [pc, #652]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80038fa:	2104      	movs	r1, #4
 80038fc:	438a      	bics	r2, r1
 80038fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d014      	beq.n	8003932 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7ff fd48 	bl	800339c <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e009      	b.n	8003926 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7ff fd43 	bl	800339c <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	4a9b      	ldr	r2, [pc, #620]	; (8003b8c <HAL_RCC_OscConfig+0x62c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e12b      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	4b98      	ldr	r3, [pc, #608]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x3b2>
 8003930:	e013      	b.n	800395a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7ff fd33 	bl	800339c <HAL_GetTick>
 8003936:	0003      	movs	r3, r0
 8003938:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	e009      	b.n	8003950 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7ff fd2e 	bl	800339c <HAL_GetTick>
 8003940:	0002      	movs	r2, r0
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4a91      	ldr	r2, [pc, #580]	; (8003b8c <HAL_RCC_OscConfig+0x62c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e116      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	4b8d      	ldr	r3, [pc, #564]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800395a:	231f      	movs	r3, #31
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	4b87      	ldr	r3, [pc, #540]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 800396a:	4989      	ldr	r1, [pc, #548]	; (8003b90 <HAL_RCC_OscConfig+0x630>)
 800396c:	400a      	ands	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	4013      	ands	r3, r2
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d12a      	bne.n	80039d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003982:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	4b80      	ldr	r3, [pc, #512]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003988:	2104      	movs	r1, #4
 800398a:	430a      	orrs	r2, r1
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800398e:	4b7e      	ldr	r3, [pc, #504]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	4b7d      	ldr	r3, [pc, #500]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7ff fcff 	bl	800339c <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039a4:	f7ff fcfa 	bl	800339c <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0e3      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039b6:	4b74      	ldr	r3, [pc, #464]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d0f1      	beq.n	80039a4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039c0:	4b71      	ldr	r3, [pc, #452]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	22f8      	movs	r2, #248	; 0xf8
 80039c6:	4393      	bics	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	00da      	lsls	r2, r3, #3
 80039d0:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039d2:	430a      	orrs	r2, r1
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34
 80039d6:	e034      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	3305      	adds	r3, #5
 80039de:	d111      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039e0:	4b69      	ldr	r3, [pc, #420]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e4:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039e6:	2104      	movs	r1, #4
 80039e8:	438a      	bics	r2, r1
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039ec:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	22f8      	movs	r2, #248	; 0xf8
 80039f2:	4393      	bics	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	4b62      	ldr	r3, [pc, #392]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 80039fe:	430a      	orrs	r2, r1
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
 8003a02:	e01e      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a04:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a10:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	438a      	bics	r2, r1
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7ff fcbe 	bl	800339c <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a26:	f7ff fcb9 	bl	800339c <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e0a2      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d1f1      	bne.n	8003a26 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d100      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4ec>
 8003a4a:	e097      	b.n	8003b7c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	220c      	movs	r2, #12
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d100      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4fa>
 8003a58:	e06b      	b.n	8003b32 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d14c      	bne.n	8003afc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b48      	ldr	r3, [pc, #288]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a68:	494a      	ldr	r1, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x634>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7ff fc95 	bl	800339c <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a78:	f7ff fc90 	bl	800339c <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e079      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	049b      	lsls	r3, r3, #18
 8003a92:	4013      	ands	r3, r2
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a96:	4b3c      	ldr	r3, [pc, #240]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	4b38      	ldr	r3, [pc, #224]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	; (8003b98 <HAL_RCC_OscConfig+0x638>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0449      	lsls	r1, r1, #17
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7ff fc63 	bl	800339c <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7ff fc5e 	bl	800339c <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e047      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aee:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	049b      	lsls	r3, r3, #18
 8003af6:	4013      	ands	r3, r2
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x57c>
 8003afa:	e03f      	b.n	8003b7c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003b02:	4924      	ldr	r1, [pc, #144]	; (8003b94 <HAL_RCC_OscConfig+0x634>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7ff fc48 	bl	800339c <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7ff fc43 	bl	800339c <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e02c      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	049b      	lsls	r3, r3, #18
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5b2>
 8003b30:	e024      	b.n	8003b7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e01f      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_RCC_OscConfig+0x628>)
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	23c0      	movs	r3, #192	; 0xc0
 8003b4e:	025b      	lsls	r3, r3, #9
 8003b50:	401a      	ands	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d10e      	bne.n	8003b78 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	23f0      	movs	r3, #240	; 0xf0
 8003b6c:	039b      	lsls	r3, r3, #14
 8003b6e:	401a      	ands	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b008      	add	sp, #32
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	00001388 	.word	0x00001388
 8003b90:	efffffff 	.word	0xefffffff
 8003b94:	feffffff 	.word	0xfeffffff
 8003b98:	ffc27fff 	.word	0xffc27fff

08003b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b3      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d911      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4393      	bics	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	4b55      	ldr	r3, [pc, #340]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e09a      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d015      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d006      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003bfc:	21e0      	movs	r1, #224	; 0xe0
 8003bfe:	00c9      	lsls	r1, r1, #3
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	22f0      	movs	r2, #240	; 0xf0
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d040      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	4013      	ands	r3, r2
 8003c34:	d114      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06e      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	049b      	lsls	r3, r3, #18
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e062      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e05b      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2203      	movs	r2, #3
 8003c66:	4393      	bics	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7ff fb92 	bl	800339c <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7c:	e009      	b.n	8003c92 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7e:	f7ff fb8d 	bl	800339c <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_RCC_ClockConfig+0x18c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e042      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	220c      	movs	r2, #12
 8003c98:	401a      	ands	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1ec      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d211      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4393      	bics	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x184>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e020      	b.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_RCC_ClockConfig+0x190>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cf4:	f000 f820 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf8:	0001      	movs	r1, r0
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x188>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	220f      	movs	r2, #15
 8003d02:	4013      	ands	r3, r2
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x194>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	000a      	movs	r2, r1
 8003d0a:	40da      	lsrs	r2, r3
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x198>)
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7ff fafd 	bl	8003310 <HAL_InitTick>
  
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	00001388 	.word	0x00001388
 8003d2c:	fffff8ff 	.word	0xfffff8ff
 8003d30:	08009338 	.word	0x08009338
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b08f      	sub	sp, #60	; 0x3c
 8003d3c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003d3e:	2314      	movs	r3, #20
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d46:	c313      	stmia	r3!, {r0, r1, r4}
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	4a2a      	ldr	r2, [pc, #168]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d52:	c313      	stmia	r3!, {r0, r1, r4}
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d60:	2300      	movs	r3, #0
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	220c      	movs	r2, #12
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d002      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x4a>
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d003      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x50>
 8003d80:	e02f      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d86:	e02f      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	0c9b      	lsrs	r3, r3, #18
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2214      	movs	r2, #20
 8003d92:	18ba      	adds	r2, r7, r2
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	4013      	ands	r3, r2
 8003da0:	1d3a      	adds	r2, r7, #4
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da8:	23c0      	movs	r3, #192	; 0xc0
 8003daa:	025b      	lsls	r3, r3, #9
 8003dac:	401a      	ands	r2, r3
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	025b      	lsls	r3, r3, #9
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db8:	4811      	ldr	r0, [pc, #68]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dba:	f7fc f9c1 	bl	8000140 <__udivsi3>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	4353      	muls	r3, r2
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dcc:	480c      	ldr	r0, [pc, #48]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dce:	f7fc f9b7 	bl	8000140 <__udivsi3>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	4353      	muls	r3, r2
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003de6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b00f      	add	sp, #60	; 0x3c
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	08009194 	.word	0x08009194
 8003df8:	080091a4 	.word	0x080091a4
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	007a1200 	.word	0x007a1200

08003e04 <adc_chsel>:
			return BML_TIMEOUT;
		}
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	000a      	movs	r2, r1
 8003e0e:	1cbb      	adds	r3, r7, #2
 8003e10:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	2390      	movs	r3, #144	; 0x90
 8003e16:	05db      	lsls	r3, r3, #23
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d141      	bne.n	8003ea0 <adc_chsel+0x9c>
		switch (pin) {
 8003e1c:	1cbb      	adds	r3, r7, #2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	d900      	bls.n	8003e26 <adc_chsel+0x22>
 8003e24:	e094      	b.n	8003f50 <adc_chsel+0x14c>
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	4b4e      	ldr	r3, [pc, #312]	; (8003f64 <adc_chsel+0x160>)
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 8003e30:	4b4d      	ldr	r3, [pc, #308]	; (8003f68 <adc_chsel+0x164>)
 8003e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <adc_chsel+0x164>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e3c:	e08d      	b.n	8003f5a <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <adc_chsel+0x164>)
 8003e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e42:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <adc_chsel+0x164>)
 8003e44:	2102      	movs	r1, #2
 8003e46:	430a      	orrs	r2, r1
 8003e48:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e4a:	e086      	b.n	8003f5a <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 8003e4c:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <adc_chsel+0x164>)
 8003e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <adc_chsel+0x164>)
 8003e52:	2104      	movs	r1, #4
 8003e54:	430a      	orrs	r2, r1
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e58:	e07f      	b.n	8003f5a <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 8003e5a:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <adc_chsel+0x164>)
 8003e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5e:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <adc_chsel+0x164>)
 8003e60:	2108      	movs	r1, #8
 8003e62:	430a      	orrs	r2, r1
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e66:	e078      	b.n	8003f5a <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 8003e68:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <adc_chsel+0x164>)
 8003e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6c:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <adc_chsel+0x164>)
 8003e6e:	2110      	movs	r1, #16
 8003e70:	430a      	orrs	r2, r1
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e74:	e071      	b.n	8003f5a <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 8003e76:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <adc_chsel+0x164>)
 8003e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <adc_chsel+0x164>)
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e82:	e06a      	b.n	8003f5a <adc_chsel+0x156>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8003e84:	4b38      	ldr	r3, [pc, #224]	; (8003f68 <adc_chsel+0x164>)
 8003e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <adc_chsel+0x164>)
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e90:	e063      	b.n	8003f5a <adc_chsel+0x156>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8003e92:	4b35      	ldr	r3, [pc, #212]	; (8003f68 <adc_chsel+0x164>)
 8003e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e96:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <adc_chsel+0x164>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003e9e:	e05c      	b.n	8003f5a <adc_chsel+0x156>
		default:
			break;
		}
	} else if (port == GPIOB) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a32      	ldr	r2, [pc, #200]	; (8003f6c <adc_chsel+0x168>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d116      	bne.n	8003ed6 <adc_chsel+0xd2>
		switch (pin) {
 8003ea8:	1cbb      	adds	r3, r7, #2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <adc_chsel+0xb2>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d008      	beq.n	8003ec6 <adc_chsel+0xc2>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 8003eb4:	e051      	b.n	8003f5a <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8003eb6:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <adc_chsel+0x164>)
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <adc_chsel+0x164>)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	0049      	lsls	r1, r1, #1
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003ec4:	e049      	b.n	8003f5a <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <adc_chsel+0x164>)
 8003ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <adc_chsel+0x164>)
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	0089      	lsls	r1, r1, #2
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003ed4:	e041      	b.n	8003f5a <adc_chsel+0x156>
		}
	} else if (port == GPIOC) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <adc_chsel+0x16c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d13a      	bne.n	8003f54 <adc_chsel+0x150>
		switch (pin) {
 8003ede:	1cbb      	adds	r3, r7, #2
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d838      	bhi.n	8003f58 <adc_chsel+0x154>
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <adc_chsel+0x170>)
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <adc_chsel+0x164>)
 8003ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef4:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <adc_chsel+0x164>)
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	00c9      	lsls	r1, r1, #3
 8003efa:	430a      	orrs	r2, r1
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003efe:	e02c      	b.n	8003f5a <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <adc_chsel+0x164>)
 8003f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <adc_chsel+0x164>)
 8003f06:	2180      	movs	r1, #128	; 0x80
 8003f08:	0109      	lsls	r1, r1, #4
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003f0e:	e024      	b.n	8003f5a <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <adc_chsel+0x164>)
 8003f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <adc_chsel+0x164>)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	0149      	lsls	r1, r1, #5
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003f1e:	e01c      	b.n	8003f5a <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <adc_chsel+0x164>)
 8003f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <adc_chsel+0x164>)
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	0189      	lsls	r1, r1, #6
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003f2e:	e014      	b.n	8003f5a <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <adc_chsel+0x164>)
 8003f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <adc_chsel+0x164>)
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	01c9      	lsls	r1, r1, #7
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003f3e:	e00c      	b.n	8003f5a <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <adc_chsel+0x164>)
 8003f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <adc_chsel+0x164>)
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	0209      	lsls	r1, r1, #8
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003f4e:	e004      	b.n	8003f5a <adc_chsel+0x156>
			break;
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	e002      	b.n	8003f5a <adc_chsel+0x156>
		default:
			break;
		}
	}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	e000      	b.n	8003f5a <adc_chsel+0x156>
			break;
 8003f58:	46c0      	nop			; (mov r8, r8)
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	08009348 	.word	0x08009348
 8003f68:	40012400 	.word	0x40012400
 8003f6c:	48000400 	.word	0x48000400
 8003f70:	48000800 	.word	0x48000800
 8003f74:	08009368 	.word	0x08009368

08003f78 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	2390      	movs	r3, #144	; 0x90
 8003f84:	05db      	lsls	r3, r3, #23
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d107      	bne.n	8003f9a <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <gpio_clk_en+0x80>)
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <gpio_clk_en+0x80>)
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	0289      	lsls	r1, r1, #10
 8003f94:	430a      	orrs	r2, r1
 8003f96:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 8003f98:	e02a      	b.n	8003ff0 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <gpio_clk_en+0x84>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d107      	bne.n	8003fb2 <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	02c9      	lsls	r1, r1, #11
 8003fac:	430a      	orrs	r2, r1
 8003fae:	615a      	str	r2, [r3, #20]
}
 8003fb0:	e01e      	b.n	8003ff0 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <gpio_clk_en+0x88>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d107      	bne.n	8003fca <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0309      	lsls	r1, r1, #12
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	615a      	str	r2, [r3, #20]
}
 8003fc8:	e012      	b.n	8003ff0 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <gpio_clk_en+0x8c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d107      	bne.n	8003fe2 <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	0349      	lsls	r1, r1, #13
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	615a      	str	r2, [r3, #20]
}
 8003fe0:	e006      	b.n	8003ff0 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <gpio_clk_en+0x80>)
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	03c9      	lsls	r1, r1, #15
 8003fec:	430a      	orrs	r2, r1
 8003fee:	615a      	str	r2, [r3, #20]
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	48000400 	.word	0x48000400
 8004000:	48000800 	.word	0x48000800
 8004004:	48000c00 	.word	0x48000c00

08004008 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d11c      	bne.n	8004056 <gpio_config+0x4e>
		gpio_clk_en(port);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff ffaa 	bl	8003f78 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	0018      	movs	r0, r3
 800402c:	f000 f858 	bl	80040e0 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f86a 	bl	8004110 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	0018      	movs	r0, r3
 8004044:	f000 f87c 	bl	8004140 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	0018      	movs	r0, r3
 8004050:	f000 f88e 	bl	8004170 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 8004054:	e040      	b.n	80040d8 <gpio_config+0xd0>
	} else if (pinMode == INPUT_MODE) {
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d110      	bne.n	800407e <gpio_config+0x76>
		gpio_clk_en(port);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	0018      	movs	r0, r3
 8004060:	f7ff ff8a 	bl	8003f78 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f838 	bl	80040e0 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0018      	movs	r0, r3
 8004078:	f000 f862 	bl	8004140 <gpio_PUPD>
}
 800407c:	e02c      	b.n	80040d8 <gpio_config+0xd0>
	} else if (pinMode == ALT_MODE) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d116      	bne.n	80040b2 <gpio_config+0xaa>
		gpio_clk_en(port);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff ff76 	bl	8003f78 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f824 	bl	80040e0 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 f84e 	bl	8004140 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f860 	bl	8004170 <gpio_PHPL_OD>
}
 80040b0:	e012      	b.n	80040d8 <gpio_config+0xd0>
	} else if (pinMode == ANALOG_MODE) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d10f      	bne.n	80040d8 <gpio_config+0xd0>
		gpio_clk_en(port);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff ff5c 	bl	8003f78 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 f80a 	bl	80040e0 <gpio_moder>
		adc_chsel(port, pinNumber);
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7ff fe96 	bl	8003e04 <adc_chsel>
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bd80      	pop	{r7, pc}

080040e0 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <gpio_moder+0x2c>)
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	0089      	lsls	r1, r1, #2
 80040f6:	58cb      	ldr	r3, [r1, r3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4099      	lsls	r1, r3
 80040fc:	000b      	movs	r3, r1
 80040fe:	431a      	orrs	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b004      	add	sp, #16
 800410a:	bd80      	pop	{r7, pc}
 800410c:	2000000c 	.word	0x2000000c

08004110 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <gpio_speed+0x2c>)
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	0089      	lsls	r1, r1, #2
 8004126:	58cb      	ldr	r3, [r1, r3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4099      	lsls	r1, r3
 800412c:	000b      	movs	r3, r1
 800412e:	431a      	orrs	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2000000c 	.word	0x2000000c

08004140 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <gpio_PUPD+0x2c>)
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	0089      	lsls	r1, r1, #2
 8004156:	58cb      	ldr	r3, [r1, r3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4099      	lsls	r1, r3
 800415c:	000b      	movs	r3, r1
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	60da      	str	r2, [r3, #12]
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b004      	add	sp, #16
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000000c 	.word	0x2000000c

08004170 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4099      	lsls	r1, r3
 8004186:	000b      	movs	r3, r1
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}

08004196 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b07      	cmp	r3, #7
 80041a6:	d80a      	bhi.n	80041be <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4099      	lsls	r1, r3
 80041b4:	000b      	movs	r3, r1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 80041bc:	e00a      	b.n	80041d4 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3b08      	subs	r3, #8
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4099      	lsls	r1, r3
 80041cc:	000b      	movs	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_EN>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_EN(I2C_TypeDef *i2c) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_PE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	601a      	str	r2, [r3, #0]
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <I2C_DI>:

void I2C_DI(I2C_TypeDef *i2c) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~I2C_CR1_PE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	4393      	bics	r3, r2
 8004208:	001a      	movs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b002      	add	sp, #8
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <I2C_INIT>:

void I2C_INIT(I2C_TypeDef *i2c, uint32_t timing) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
	if (i2c == I2C1) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a11      	ldr	r2, [pc, #68]	; (800426c <I2C_INIT+0x54>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d107      	bne.n	800423a <I2C_INIT+0x22>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <I2C_INIT+0x58>)
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <I2C_INIT+0x58>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0389      	lsls	r1, r1, #14
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
 8004238:	e00a      	b.n	8004250 <I2C_INIT+0x38>
	} else if (i2c == I2C2) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <I2C_INIT+0x5c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d106      	bne.n	8004250 <I2C_INIT+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <I2C_INIT+0x58>)
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <I2C_INIT+0x58>)
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	03c9      	lsls	r1, r1, #15
 800424c:	430a      	orrs	r2, r1
 800424e:	61da      	str	r2, [r3, #28]
	}
	i2c->CR1 = 0; /* software reset I2C1 */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
	i2c->TIMINGR = timing; /* 100 KHz, peripheral clock is 8/48 MHz */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	611a      	str	r2, [r3, #16]
	I2C_EN(i2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff ffbc 	bl	80041dc <I2C_EN>
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b002      	add	sp, #8
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40005400 	.word	0x40005400
 8004270:	40021000 	.word	0x40021000
 8004274:	40005800 	.word	0x40005800

08004278 <I2C_CR2>:
	} else if (i2c == I2C2) {
		RCC->APB1ENR &= ~RCC_APB1ENR_I2C2EN;
	}
}

void I2C_CR2(I2C_TypeDef *i2c, uint32_t val) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	i2c->CR2 = val;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	605a      	str	r2, [r3, #4]
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_DeviceReady>:

BML_StatusTypeDef I2C_DeviceReady(I2C_TypeDef *i2c, uint8_t saddr,
		uint16_t timeout) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	0008      	movs	r0, r1
 800429a:	0011      	movs	r1, r2
 800429c:	1cfb      	adds	r3, r7, #3
 800429e:	1c02      	adds	r2, r0, #0
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	003b      	movs	r3, r7
 80042a4:	1c0a      	adds	r2, r1, #0
 80042a6:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 80042a8:	230e      	movs	r3, #14
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	003a      	movs	r2, r7
 80042ae:	8812      	ldrh	r2, [r2, #0]
 80042b0:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 80042b2:	230d      	movs	r3, #13
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 80042ba:	e00e      	b.n	80042da <I2C_DeviceReady+0x4a>
		I2C_Delay(1);
 80042bc:	2001      	movs	r0, #1
 80042be:	f7ff f877 	bl	80033b0 <HAL_Delay>
		i--;
 80042c2:	210e      	movs	r1, #14
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	881a      	ldrh	r2, [r3, #0]
 80042c8:	187b      	adds	r3, r7, r1
 80042ca:	3a01      	subs	r2, #1
 80042cc:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <I2C_DeviceReady+0x4a>
			return BML_BUSY;
 80042d6:	2302      	movs	r3, #2
 80042d8:	e035      	b.n	8004346 <I2C_DeviceReady+0xb6>
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	4013      	ands	r3, r2
 80042e4:	d1ea      	bne.n	80042bc <I2C_DeviceReady+0x2c>
		}
	}
	I2C_CR2(i2c, I2C_CR2_START | (saddr << 1));
 80042e6:	1cfb      	adds	r3, r7, #3
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	001a      	movs	r2, r3
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ffbd 	bl	8004278 <I2C_CR2>

	I2C_Delay(1);
 80042fe:	2001      	movs	r0, #1
 8004300:	f7ff f856 	bl	80033b0 <HAL_Delay>

	if (!(i2c->ISR & I2C_ISR_NACKF)) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2210      	movs	r2, #16
 800430a:	4013      	ands	r3, r2
 800430c:	d104      	bne.n	8004318 <I2C_DeviceReady+0x88>
		flag = 1;
 800430e:	230d      	movs	r3, #13
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e003      	b.n	8004320 <I2C_DeviceReady+0x90>
	} else {
		flag = 0;
 8004318:	230d      	movs	r3, #13
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
	}

	i2c->CR2 = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
	I2C_DI(i2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff ff65 	bl	80041f8 <I2C_DI>
	I2C_EN(i2c);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff ff53 	bl	80041dc <I2C_EN>
	if (flag == LOW) {
 8004336:	230d      	movs	r3, #13
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <I2C_DeviceReady+0xb4>
		return BML_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <I2C_DeviceReady+0xb6>
	}
	return BML_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b004      	add	sp, #16
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <I2C_MasterByteWrite>:

BML_StatusTypeDef I2C_MasterByteWrite(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint8_t data, uint16_t timeout) {
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	000c      	movs	r4, r1
 800435a:	0010      	movs	r0, r2
 800435c:	0019      	movs	r1, r3
 800435e:	1cfb      	adds	r3, r7, #3
 8004360:	1c22      	adds	r2, r4, #0
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	1cbb      	adds	r3, r7, #2
 8004366:	1c02      	adds	r2, r0, #0
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	1c7b      	adds	r3, r7, #1
 800436c:	1c0a      	adds	r2, r1, #0
 800436e:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 8004370:	230e      	movs	r3, #14
 8004372:	18fa      	adds	r2, r7, r3
 8004374:	2320      	movs	r3, #32
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	8013      	strh	r3, [r2, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 800437c:	e00e      	b.n	800439c <I2C_MasterByteWrite+0x4c>
		I2C_Delay(1);
 800437e:	2001      	movs	r0, #1
 8004380:	f7ff f816 	bl	80033b0 <HAL_Delay>
		i--;
 8004384:	210e      	movs	r1, #14
 8004386:	187b      	adds	r3, r7, r1
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	187b      	adds	r3, r7, r1
 800438c:	3a01      	subs	r2, #1
 800438e:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8004390:	187b      	adds	r3, r7, r1
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <I2C_MasterByteWrite+0x4c>
			return BML_BUSY;
 8004398:	2302      	movs	r3, #2
 800439a:	e074      	b.n	8004486 <I2C_MasterByteWrite+0x136>
	while (i2c->ISR & I2C_ISR_BUSY) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4013      	ands	r3, r2
 80043a6:	d1ea      	bne.n	800437e <I2C_MasterByteWrite+0x2e>
		}
	} /* wait until bus not busy */

	i = timeout;
 80043a8:	230e      	movs	r3, #14
 80043aa:	18fa      	adds	r2, r7, r3
 80043ac:	2320      	movs	r3, #32
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	8013      	strh	r3, [r2, #0]

	I2C_CR2(i2c, I2C_CR2_START | I2C_CR2_AUTOEND | (2 << 16) | (saddr << 1));
 80043b4:	1cfb      	adds	r3, r7, #3
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	001a      	movs	r2, r3
 80043bc:	4b34      	ldr	r3, [pc, #208]	; (8004490 <I2C_MasterByteWrite+0x140>)
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7ff ff57 	bl	8004278 <I2C_CR2>
	/* generate start, autoend, byte count 2 and send slave address */

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80043ca:	e00e      	b.n	80043ea <I2C_MasterByteWrite+0x9a>
		I2C_Delay(1);
 80043cc:	2001      	movs	r0, #1
 80043ce:	f7fe ffef 	bl	80033b0 <HAL_Delay>
		i--;
 80043d2:	210e      	movs	r1, #14
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	3a01      	subs	r2, #1
 80043dc:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <I2C_MasterByteWrite+0x9a>
			return BML_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e04d      	b.n	8004486 <I2C_MasterByteWrite+0x136>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2202      	movs	r2, #2
 80043f0:	4013      	ands	r3, r2
 80043f2:	d0eb      	beq.n	80043cc <I2C_MasterByteWrite+0x7c>
		}
	} /* wait until TXIS is set */
	i2c->TXDR = maddr; /* send register address */
 80043f4:	1cbb      	adds	r3, r7, #2
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

	i = timeout;
 80043fc:	230e      	movs	r3, #14
 80043fe:	18fa      	adds	r2, r7, r3
 8004400:	2320      	movs	r3, #32
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8004408:	e00e      	b.n	8004428 <I2C_MasterByteWrite+0xd8>
		I2C_Delay(1);
 800440a:	2001      	movs	r0, #1
 800440c:	f7fe ffd0 	bl	80033b0 <HAL_Delay>
		i--;
 8004410:	210e      	movs	r1, #14
 8004412:	187b      	adds	r3, r7, r1
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	187b      	adds	r3, r7, r1
 8004418:	3a01      	subs	r2, #1
 800441a:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 800441c:	187b      	adds	r3, r7, r1
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <I2C_MasterByteWrite+0xd8>
			return BML_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e02e      	b.n	8004486 <I2C_MasterByteWrite+0x136>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d0eb      	beq.n	800440a <I2C_MasterByteWrite+0xba>
		}
	} /* wait until TXIS is set */
	i2c->TXDR = data; /* send data */
 8004432:	1c7b      	adds	r3, r7, #1
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	629a      	str	r2, [r3, #40]	; 0x28

	i = timeout;
 800443a:	230e      	movs	r3, #14
 800443c:	18fa      	adds	r2, r7, r3
 800443e:	2320      	movs	r3, #32
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8004446:	e00e      	b.n	8004466 <I2C_MasterByteWrite+0x116>
		I2C_Delay(1);
 8004448:	2001      	movs	r0, #1
 800444a:	f7fe ffb1 	bl	80033b0 <HAL_Delay>
		i--;
 800444e:	210e      	movs	r1, #14
 8004450:	187b      	adds	r3, r7, r1
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	187b      	adds	r3, r7, r1
 8004456:	3a01      	subs	r2, #1
 8004458:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 800445a:	187b      	adds	r3, r7, r1
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <I2C_MasterByteWrite+0x116>
			return BML_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <I2C_MasterByteWrite+0x136>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2220      	movs	r2, #32
 800446c:	4013      	ands	r3, r2
 800446e:	d0eb      	beq.n	8004448 <I2C_MasterByteWrite+0xf8>
		}
	}/* wait until stop flag is set */

	i2c->ICR = I2C_ICR_STOPCF; /* clear stop flag */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	049a      	lsls	r2, r3, #18
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff fefa 	bl	8004278 <I2C_CR2>

	return BML_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b005      	add	sp, #20
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	02022000 	.word	0x02022000

08004494 <I2C_MasterByteRead>:

BML_StatusTypeDef I2C_MasterByteRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint8_t *data, uint16_t timeout) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	0008      	movs	r0, r1
 800449e:	0011      	movs	r1, r2
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	230b      	movs	r3, #11
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	1c02      	adds	r2, r0, #0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	230a      	movs	r3, #10
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	1c0a      	adds	r2, r1, #0
 80044b0:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 80044b2:	2316      	movs	r3, #22
 80044b4:	18fa      	adds	r2, r7, r3
 80044b6:	2320      	movs	r3, #32
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	8013      	strh	r3, [r2, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 80044be:	e00e      	b.n	80044de <I2C_MasterByteRead+0x4a>
		I2C_Delay(1);
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7fe ff75 	bl	80033b0 <HAL_Delay>
		i--;
 80044c6:	2116      	movs	r1, #22
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	881a      	ldrh	r2, [r3, #0]
 80044cc:	187b      	adds	r3, r7, r1
 80044ce:	3a01      	subs	r2, #1
 80044d0:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80044d2:	187b      	adds	r3, r7, r1
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <I2C_MasterByteRead+0x4a>
			return BML_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	e09f      	b.n	800461e <I2C_MasterByteRead+0x18a>
	while (i2c->ISR & I2C_ISR_BUSY) {
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	4013      	ands	r3, r2
 80044e8:	d1ea      	bne.n	80044c0 <I2C_MasterByteRead+0x2c>
		}
	} /* wait until bus not busy */

	i = timeout;
 80044ea:	2316      	movs	r3, #22
 80044ec:	18fa      	adds	r2, r7, r3
 80044ee:	2320      	movs	r3, #32
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	8013      	strh	r3, [r2, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));
 80044f6:	230b      	movs	r3, #11
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	001a      	movs	r2, r3
 8004500:	2390      	movs	r3, #144	; 0x90
 8004502:	025b      	lsls	r3, r3, #9
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	0011      	movs	r1, r2
 800450a:	0018      	movs	r0, r3
 800450c:	f7ff feb4 	bl	8004278 <I2C_CR2>
	/* generate start and send slave address */
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8004510:	e00e      	b.n	8004530 <I2C_MasterByteRead+0x9c>
		I2C_Delay(1);
 8004512:	2001      	movs	r0, #1
 8004514:	f7fe ff4c 	bl	80033b0 <HAL_Delay>
		i--;
 8004518:	2116      	movs	r1, #22
 800451a:	187b      	adds	r3, r7, r1
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	187b      	adds	r3, r7, r1
 8004520:	3a01      	subs	r2, #1
 8004522:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8004524:	187b      	adds	r3, r7, r1
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <I2C_MasterByteRead+0x9c>
			return BML_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e076      	b.n	800461e <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2202      	movs	r2, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d0eb      	beq.n	8004512 <I2C_MasterByteRead+0x7e>
		}
	} /* wait until start flag is set */
	i = timeout;
 800453a:	2316      	movs	r3, #22
 800453c:	18fa      	adds	r2, r7, r3
 800453e:	2320      	movs	r3, #32
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	8013      	strh	r3, [r2, #0]

	i2c->TXDR = maddr; /* send memory address */
 8004546:	230a      	movs	r3, #10
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

	while (!(i2c->ISR & I2C_ISR_TC)) {
 8004550:	e00e      	b.n	8004570 <I2C_MasterByteRead+0xdc>
		I2C_Delay(1);
 8004552:	2001      	movs	r0, #1
 8004554:	f7fe ff2c 	bl	80033b0 <HAL_Delay>
		i--;
 8004558:	2116      	movs	r1, #22
 800455a:	187b      	adds	r3, r7, r1
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	187b      	adds	r3, r7, r1
 8004560:	3a01      	subs	r2, #1
 8004562:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8004564:	187b      	adds	r3, r7, r1
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <I2C_MasterByteRead+0xdc>
			return BML_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e056      	b.n	800461e <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	4013      	ands	r3, r2
 8004578:	d0eb      	beq.n	8004552 <I2C_MasterByteRead+0xbe>
		}
	} /* wait until transfer complete */

	i = timeout;
 800457a:	2316      	movs	r3, #22
 800457c:	18fa      	adds	r2, r7, r3
 800457e:	2320      	movs	r3, #32
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	8013      	strh	r3, [r2, #0]

	/* generate restart, send slave address, read 1 byte, set for auto end */
	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND | (1 << 16)
					| (saddr << 1));
 8004586:	230b      	movs	r3, #11
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	001a      	movs	r2, r3
	I2C_CR2(i2c,
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <I2C_MasterByteRead+0x194>)
 8004592:	431a      	orrs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0011      	movs	r1, r2
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff fe6d 	bl	8004278 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_RXNE)) {
 800459e:	e00e      	b.n	80045be <I2C_MasterByteRead+0x12a>
		I2C_Delay(1);
 80045a0:	2001      	movs	r0, #1
 80045a2:	f7fe ff05 	bl	80033b0 <HAL_Delay>
		i--;
 80045a6:	2116      	movs	r1, #22
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	187b      	adds	r3, r7, r1
 80045ae:	3a01      	subs	r2, #1
 80045b0:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <I2C_MasterByteRead+0x12a>
			return BML_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e02f      	b.n	800461e <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_RXNE)) {
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	d0eb      	beq.n	80045a0 <I2C_MasterByteRead+0x10c>
		}
	} /* Wait until RXNE flag is set */
	*data = i2c->RXDR; /* Read data from DR */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	701a      	strb	r2, [r3, #0]

	i = timeout;
 80045d2:	2316      	movs	r3, #22
 80045d4:	18fa      	adds	r2, r7, r3
 80045d6:	2320      	movs	r3, #32
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 80045de:	e00e      	b.n	80045fe <I2C_MasterByteRead+0x16a>
		I2C_Delay(1);
 80045e0:	2001      	movs	r0, #1
 80045e2:	f7fe fee5 	bl	80033b0 <HAL_Delay>
		i--;
 80045e6:	2116      	movs	r1, #22
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	3a01      	subs	r2, #1
 80045f0:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80045f2:	187b      	adds	r3, r7, r1
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <I2C_MasterByteRead+0x16a>
			return BML_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e00f      	b.n	800461e <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2220      	movs	r2, #32
 8004604:	4013      	ands	r3, r2
 8004606:	d0eb      	beq.n	80045e0 <I2C_MasterByteRead+0x14c>
		}
	} /* wait until stop flag is set */

	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	049a      	lsls	r2, r3, #18
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	0011      	movs	r1, r2
 8004616:	0018      	movs	r0, r3
 8004618:	f7ff fe2e 	bl	8004278 <I2C_CR2>

	return BML_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b006      	add	sp, #24
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	02012400 	.word	0x02012400

0800462c <I2C_MasterMultiRead>:

	return BML_OK;
}

BML_StatusTypeDef I2C_MasterMultiRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint32_t n, uint8_t *data, uint16_t timeout) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	0008      	movs	r0, r1
 8004636:	0011      	movs	r1, r2
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	230b      	movs	r3, #11
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	1c02      	adds	r2, r0, #0
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	230a      	movs	r3, #10
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	1c0a      	adds	r2, r1, #0
 8004648:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 800464a:	2316      	movs	r3, #22
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2224      	movs	r2, #36	; 0x24
 8004650:	18ba      	adds	r2, r7, r2
 8004652:	8812      	ldrh	r2, [r2, #0]
 8004654:	801a      	strh	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 8004656:	e00e      	b.n	8004676 <I2C_MasterMultiRead+0x4a>
		I2C_Delay(1);
 8004658:	2001      	movs	r0, #1
 800465a:	f7fe fea9 	bl	80033b0 <HAL_Delay>
		i--;
 800465e:	2116      	movs	r1, #22
 8004660:	187b      	adds	r3, r7, r1
 8004662:	881a      	ldrh	r2, [r3, #0]
 8004664:	187b      	adds	r3, r7, r1
 8004666:	3a01      	subs	r2, #1
 8004668:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 800466a:	187b      	adds	r3, r7, r1
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <I2C_MasterMultiRead+0x4a>
			return BML_BUSY;
 8004672:	2302      	movs	r3, #2
 8004674:	e0ac      	b.n	80047d0 <I2C_MasterMultiRead+0x1a4>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	4013      	ands	r3, r2
 8004680:	d1ea      	bne.n	8004658 <I2C_MasterMultiRead+0x2c>
		}
	} /* wait until bus not busy */
	i = timeout;
 8004682:	2316      	movs	r3, #22
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	18ba      	adds	r2, r7, r2
 800468a:	8812      	ldrh	r2, [r2, #0]
 800468c:	801a      	strh	r2, [r3, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));/* generate start and send slave address */
 800468e:	230b      	movs	r3, #11
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	001a      	movs	r2, r3
 8004698:	2390      	movs	r3, #144	; 0x90
 800469a:	025b      	lsls	r3, r3, #9
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	0011      	movs	r1, r2
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7ff fde8 	bl	8004278 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80046a8:	e00e      	b.n	80046c8 <I2C_MasterMultiRead+0x9c>
		I2C_Delay(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fe fe80 	bl	80033b0 <HAL_Delay>
		i--;
 80046b0:	2116      	movs	r1, #22
 80046b2:	187b      	adds	r3, r7, r1
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	3a01      	subs	r2, #1
 80046ba:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <I2C_MasterMultiRead+0x9c>
			return BML_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e083      	b.n	80047d0 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2202      	movs	r2, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d0eb      	beq.n	80046aa <I2C_MasterMultiRead+0x7e>
		}
	}/* wait until transmitter is ready */

	i = timeout;
 80046d2:	2316      	movs	r3, #22
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	18ba      	adds	r2, r7, r2
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	801a      	strh	r2, [r3, #0]

	i2c->TXDR = maddr; /* send memory address */
 80046de:	230a      	movs	r3, #10
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(i2c->ISR & I2C_ISR_TC)) {
 80046e8:	e00e      	b.n	8004708 <I2C_MasterMultiRead+0xdc>
		I2C_Delay(1);
 80046ea:	2001      	movs	r0, #1
 80046ec:	f7fe fe60 	bl	80033b0 <HAL_Delay>
		i--;
 80046f0:	2116      	movs	r1, #22
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	3a01      	subs	r2, #1
 80046fa:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <I2C_MasterMultiRead+0xdc>
			return BML_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e063      	b.n	80047d0 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2240      	movs	r2, #64	; 0x40
 800470e:	4013      	ands	r3, r2
 8004710:	d0eb      	beq.n	80046ea <I2C_MasterMultiRead+0xbe>

	/* generate restart, send slave address, repeat read n bytes, set for auto end */

	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND
					| ((n & 0xFF) << 16) | (saddr << 1));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	041a      	lsls	r2, r3, #16
 8004716:	23ff      	movs	r3, #255	; 0xff
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	4013      	ands	r3, r2
 800471c:	220b      	movs	r2, #11
 800471e:	18ba      	adds	r2, r7, r2
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	0052      	lsls	r2, r2, #1
 8004724:	4313      	orrs	r3, r2
	I2C_CR2(i2c,
 8004726:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <I2C_MasterMultiRead+0x1ac>)
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff fda2 	bl	8004278 <I2C_CR2>

	for (; n > 0; n--) {
 8004734:	e023      	b.n	800477e <I2C_MasterMultiRead+0x152>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
			I2C_Delay(1);
 8004736:	2001      	movs	r0, #1
 8004738:	f7fe fe3a 	bl	80033b0 <HAL_Delay>
			i--;
 800473c:	2116      	movs	r1, #22
 800473e:	187b      	adds	r3, r7, r1
 8004740:	881a      	ldrh	r2, [r3, #0]
 8004742:	187b      	adds	r3, r7, r1
 8004744:	3a01      	subs	r2, #1
 8004746:	801a      	strh	r2, [r3, #0]
			if (i <= 0) {
 8004748:	187b      	adds	r3, r7, r1
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <I2C_MasterMultiRead+0x128>
				return BML_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e03d      	b.n	80047d0 <I2C_MasterMultiRead+0x1a4>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2204      	movs	r2, #4
 800475a:	4013      	ands	r3, r2
 800475c:	d0eb      	beq.n	8004736 <I2C_MasterMultiRead+0x10a>
			}
		} /* Wait until RXNE flag is set */
		i = timeout;
 800475e:	2316      	movs	r3, #22
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	18ba      	adds	r2, r7, r2
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	801a      	strh	r2, [r3, #0]
		*data++ = i2c->RXDR; /* Read data from DR */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	623a      	str	r2, [r7, #32]
 8004774:	b2ca      	uxtb	r2, r1
 8004776:	701a      	strb	r2, [r3, #0]
	for (; n > 0; n--) {
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e7      	bne.n	8004754 <I2C_MasterMultiRead+0x128>
	}

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8004784:	e00e      	b.n	80047a4 <I2C_MasterMultiRead+0x178>
		I2C_Delay(1);
 8004786:	2001      	movs	r0, #1
 8004788:	f7fe fe12 	bl	80033b0 <HAL_Delay>
		i--;
 800478c:	2116      	movs	r1, #22
 800478e:	187b      	adds	r3, r7, r1
 8004790:	881a      	ldrh	r2, [r3, #0]
 8004792:	187b      	adds	r3, r7, r1
 8004794:	3a01      	subs	r2, #1
 8004796:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8004798:	187b      	adds	r3, r7, r1
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <I2C_MasterMultiRead+0x178>
			return BML_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e015      	b.n	80047d0 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2220      	movs	r2, #32
 80047aa:	4013      	ands	r3, r2
 80047ac:	d0eb      	beq.n	8004786 <I2C_MasterMultiRead+0x15a>
		}
	} /* wait until stop flag is set */
	i = timeout;
 80047ae:	2316      	movs	r3, #22
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	2224      	movs	r2, #36	; 0x24
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	801a      	strh	r2, [r3, #0]
	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	049a      	lsls	r2, r3, #18
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0011      	movs	r1, r2
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7ff fd55 	bl	8004278 <I2C_CR2>

	return BML_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b006      	add	sp, #24
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	02002400 	.word	0x02002400

080047dc <RCC_CONFIG_48MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_48MHZ() {
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b091      	sub	sp, #68	; 0x44
 80047e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80047e2:	2410      	movs	r4, #16
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	0018      	movs	r0, r3
 80047e8:	2330      	movs	r3, #48	; 0x30
 80047ea:	001a      	movs	r2, r3
 80047ec:	2100      	movs	r1, #0
 80047ee:	f001 fa35 	bl	8005c5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80047f2:	003b      	movs	r3, r7
 80047f4:	0018      	movs	r0, r3
 80047f6:	2310      	movs	r3, #16
 80047f8:	001a      	movs	r2, r3
 80047fa:	2100      	movs	r1, #0
 80047fc:	f001 fa2e 	bl	8005c5c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004800:	0021      	movs	r1, r4
 8004802:	187b      	adds	r3, r7, r1
 8004804:	2202      	movs	r2, #2
 8004806:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004808:	187b      	adds	r3, r7, r1
 800480a:	2201      	movs	r2, #1
 800480c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800480e:	187b      	adds	r3, r7, r1
 8004810:	2210      	movs	r2, #16
 8004812:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004814:	187b      	adds	r3, r7, r1
 8004816:	2202      	movs	r2, #2
 8004818:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800481a:	187b      	adds	r3, r7, r1
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	0212      	lsls	r2, r2, #8
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004822:	187b      	adds	r3, r7, r1
 8004824:	2280      	movs	r2, #128	; 0x80
 8004826:	0352      	lsls	r2, r2, #13
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800482a:	187b      	adds	r3, r7, r1
 800482c:	2200      	movs	r2, #0
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != BML_OK) {
 8004830:	187b      	adds	r3, r7, r1
 8004832:	0018      	movs	r0, r3
 8004834:	f7fe fe94 	bl	8003560 <HAL_RCC_OscConfig>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d001      	beq.n	8004840 <RCC_CONFIG_48MHZ+0x64>
		return BML_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e014      	b.n	800486a <RCC_CONFIG_48MHZ+0x8e>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004840:	003b      	movs	r3, r7
 8004842:	2207      	movs	r2, #7
 8004844:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004846:	003b      	movs	r3, r7
 8004848:	2202      	movs	r2, #2
 800484a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800484c:	003b      	movs	r3, r7
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004852:	003b      	movs	r3, r7
 8004854:	2200      	movs	r2, #0
 8004856:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004858:	003b      	movs	r3, r7
 800485a:	2101      	movs	r1, #1
 800485c:	0018      	movs	r0, r3
 800485e:	f7ff f99d 	bl	8003b9c <HAL_RCC_ClockConfig>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d001      	beq.n	800486a <RCC_CONFIG_48MHZ+0x8e>
		return BML_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e7ff      	b.n	800486a <RCC_CONFIG_48MHZ+0x8e>
	}
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b011      	add	sp, #68	; 0x44
 8004870:	bd90      	pop	{r4, r7, pc}
	...

08004874 <TIM6_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
	ticks++;
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <TIM6_IRQHandler+0x24>)
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <TIM6_IRQHandler+0x24>)
 8004882:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <TIM6_IRQHandler+0x28>)
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <TIM6_IRQHandler+0x28>)
 800488a:	2101      	movs	r1, #1
 800488c:	438a      	bics	r2, r1
 800488e:	611a      	str	r2, [r3, #16]
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20000248 	.word	0x20000248
 800489c:	40001000 	.word	0x40001000

080048a0 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f000 f819 	bl	80048e8 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 80048b6:	683c      	ldr	r4, [r7, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	0023      	movs	r3, r4
 80048c4:	f000 f852 	bl	800496c <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f960 	bl	8004b94 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	220d      	movs	r2, #13
 80048da:	431a      	orrs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b005      	add	sp, #20
 80048e6:	bd90      	pop	{r4, r7, pc}

080048e8 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a19      	ldr	r2, [pc, #100]	; (8004958 <USART_CLK_EN+0x70>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d107      	bne.n	8004908 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <USART_CLK_EN+0x74>)
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <USART_CLK_EN+0x74>)
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	01c9      	lsls	r1, r1, #7
 8004902:	430a      	orrs	r2, r1
 8004904:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 8004906:	e022      	b.n	800494e <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <USART_CLK_EN+0x78>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d107      	bne.n	8004920 <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <USART_CLK_EN+0x74>)
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <USART_CLK_EN+0x74>)
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	0289      	lsls	r1, r1, #10
 800491a:	430a      	orrs	r2, r1
 800491c:	61da      	str	r2, [r3, #28]
}
 800491e:	e016      	b.n	800494e <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <USART_CLK_EN+0x7c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d107      	bne.n	8004938 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <USART_CLK_EN+0x74>)
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <USART_CLK_EN+0x74>)
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	02c9      	lsls	r1, r1, #11
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
}
 8004936:	e00a      	b.n	800494e <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <USART_CLK_EN+0x80>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d106      	bne.n	800494e <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <USART_CLK_EN+0x74>)
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <USART_CLK_EN+0x74>)
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	0309      	lsls	r1, r1, #12
 800494a:	430a      	orrs	r2, r1
 800494c:	61da      	str	r2, [r3, #28]
}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b002      	add	sp, #8
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40013800 	.word	0x40013800
 800495c:	40021000 	.word	0x40021000
 8004960:	40004400 	.word	0x40004400
 8004964:	40004800 	.word	0x40004800
 8004968:	40004c00 	.word	0x40004c00

0800496c <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	2300      	movs	r3, #0
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	2300      	movs	r3, #0
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2302      	movs	r3, #2
 8004988:	2202      	movs	r2, #2
 800498a:	f7ff fb3d 	bl	8004008 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800498e:	69b9      	ldr	r1, [r7, #24]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	2300      	movs	r3, #0
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	2300      	movs	r3, #0
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2302      	movs	r3, #2
 800499c:	2202      	movs	r2, #2
 800499e:	f7ff fb33 	bl	8004008 <gpio_config>

	if (usart == USART1) {
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a75      	ldr	r2, [pc, #468]	; (8004b7c <USART_PIN_CONFIG+0x210>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d13a      	bne.n	8004a20 <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	2390      	movs	r3, #144	; 0x90
 80049ae:	05db      	lsls	r3, r3, #23
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d109      	bne.n	80049c8 <USART_PIN_CONFIG+0x5c>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b09      	cmp	r3, #9
 80049b8:	d106      	bne.n	80049c8 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2201      	movs	r2, #1
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fbe8 	bl	8004196 <gpio_altfn>
 80049c6:	e00c      	b.n	80049e2 <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4a6d      	ldr	r2, [pc, #436]	; (8004b80 <USART_PIN_CONFIG+0x214>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <USART_PIN_CONFIG+0x76>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d105      	bne.n	80049e2 <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff fbda 	bl	8004196 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	2390      	movs	r3, #144	; 0x90
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d109      	bne.n	8004a00 <USART_PIN_CONFIG+0x94>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b0a      	cmp	r3, #10
 80049f0:	d106      	bne.n	8004a00 <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7ff fbcc 	bl	8004196 <gpio_altfn>
 80049fe:	e0b8      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a5f      	ldr	r2, [pc, #380]	; (8004b80 <USART_PIN_CONFIG+0x214>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d000      	beq.n	8004a0a <USART_PIN_CONFIG+0x9e>
 8004a08:	e0b3      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b07      	cmp	r3, #7
 8004a0e:	d000      	beq.n	8004a12 <USART_PIN_CONFIG+0xa6>
 8004a10:	e0af      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7ff fbbc 	bl	8004196 <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 8004a1e:	e0a8      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <USART_PIN_CONFIG+0x218>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d13c      	bne.n	8004aa2 <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	2390      	movs	r3, #144	; 0x90
 8004a2c:	05db      	lsls	r3, r3, #23
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d109      	bne.n	8004a46 <USART_PIN_CONFIG+0xda>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d106      	bne.n	8004a46 <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff fba9 	bl	8004196 <gpio_altfn>
 8004a44:	e00d      	b.n	8004a62 <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	2390      	movs	r3, #144	; 0x90
 8004a4a:	05db      	lsls	r3, r3, #23
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d108      	bne.n	8004a62 <USART_PIN_CONFIG+0xf6>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b0e      	cmp	r3, #14
 8004a54:	d105      	bne.n	8004a62 <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff fb9a 	bl	8004196 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	2390      	movs	r3, #144	; 0x90
 8004a66:	05db      	lsls	r3, r3, #23
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d109      	bne.n	8004a80 <USART_PIN_CONFIG+0x114>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d106      	bne.n	8004a80 <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 8004a72:	69b9      	ldr	r1, [r7, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7ff fb8c 	bl	8004196 <gpio_altfn>
 8004a7e:	e078      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	2390      	movs	r3, #144	; 0x90
 8004a84:	05db      	lsls	r3, r3, #23
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d000      	beq.n	8004a8c <USART_PIN_CONFIG+0x120>
 8004a8a:	e072      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d000      	beq.n	8004a94 <USART_PIN_CONFIG+0x128>
 8004a92:	e06e      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7ff fb7b 	bl	8004196 <gpio_altfn>
}
 8004aa0:	e067      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <USART_PIN_CONFIG+0x21c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d152      	bne.n	8004b50 <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a37      	ldr	r2, [pc, #220]	; (8004b8c <USART_PIN_CONFIG+0x220>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d109      	bne.n	8004ac6 <USART_PIN_CONFIG+0x15a>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d106      	bne.n	8004ac6 <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2201      	movs	r2, #1
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff fb69 	bl	8004196 <gpio_altfn>
 8004ac4:	e01a      	b.n	8004afc <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4a2d      	ldr	r2, [pc, #180]	; (8004b80 <USART_PIN_CONFIG+0x214>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d109      	bne.n	8004ae2 <USART_PIN_CONFIG+0x176>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b0a      	cmp	r3, #10
 8004ad2:	d106      	bne.n	8004ae2 <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff fb5b 	bl	8004196 <gpio_altfn>
 8004ae0:	e00c      	b.n	8004afc <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <USART_PIN_CONFIG+0x220>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <USART_PIN_CONFIG+0x190>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b0a      	cmp	r3, #10
 8004aee:	d105      	bne.n	8004afc <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2201      	movs	r2, #1
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7ff fb4d 	bl	8004196 <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a23      	ldr	r2, [pc, #140]	; (8004b8c <USART_PIN_CONFIG+0x220>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d109      	bne.n	8004b18 <USART_PIN_CONFIG+0x1ac>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d106      	bne.n	8004b18 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7ff fb40 	bl	8004196 <gpio_altfn>
 8004b16:	e02c      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <USART_PIN_CONFIG+0x220>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d109      	bne.n	8004b34 <USART_PIN_CONFIG+0x1c8>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0b      	cmp	r3, #11
 8004b24:	d106      	bne.n	8004b34 <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 8004b26:	69b9      	ldr	r1, [r7, #24]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff fb32 	bl	8004196 <gpio_altfn>
 8004b32:	e01e      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a12      	ldr	r2, [pc, #72]	; (8004b80 <USART_PIN_CONFIG+0x214>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d11a      	bne.n	8004b72 <USART_PIN_CONFIG+0x206>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b0b      	cmp	r3, #11
 8004b40:	d117      	bne.n	8004b72 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 8004b42:	69b9      	ldr	r1, [r7, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff fb24 	bl	8004196 <gpio_altfn>
}
 8004b4e:	e010      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <USART_PIN_CONFIG+0x224>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10c      	bne.n	8004b72 <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7ff fb19 	bl	8004196 <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7ff fb13 	bl	8004196 <gpio_altfn>
}
 8004b70:	e7ff      	b.n	8004b72 <USART_PIN_CONFIG+0x206>
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b004      	add	sp, #16
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	40013800 	.word	0x40013800
 8004b80:	48000400 	.word	0x48000400
 8004b84:	40004400 	.word	0x40004400
 8004b88:	40004800 	.word	0x40004800
 8004b8c:	48000800 	.word	0x48000800
 8004b90:	40004c00 	.word	0x40004c00

08004b94 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <USART_BDR_SEL+0x30>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7fb facb 	bl	8000140 <__udivsi3>
 8004baa:	0003      	movs	r3, r0
 8004bac:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b004      	add	sp, #16
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	20000000 	.word	0x20000000

08004bc8 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	1cbb      	adds	r3, r7, #2
 8004bd8:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8004bda:	2314      	movs	r3, #20
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	1cba      	adds	r2, r7, #2
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8004be4:	2317      	movs	r3, #23
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e01c      	b.n	8004c28 <USART_WRITE+0x60>
		if (len == 1) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d104      	bne.n	8004bfe <USART_WRITE+0x36>
			usart->TDR = ch;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
 8004bfc:	e008      	b.n	8004c10 <USART_WRITE+0x48>
		} else {
			usart->TDR = ch[i];
 8004bfe:	2317      	movs	r3, #23
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE)){
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d0fa      	beq.n	8004c12 <USART_WRITE+0x4a>
	for (uint8_t i = 0; i < len; i++) {
 8004c1c:	2117      	movs	r1, #23
 8004c1e:	187b      	adds	r3, r7, r1
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	3201      	adds	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	2317      	movs	r3, #23
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d8dc      	bhi.n	8004bee <USART_WRITE+0x26>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b006      	add	sp, #24
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8004c40:	b40f      	push	{r0, r1, r2, r3}
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8004c48:	2314      	movs	r3, #20
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	0049      	lsls	r1, r1, #1
 8004c56:	480c      	ldr	r0, [pc, #48]	; (8004c88 <print+0x48>)
 8004c58:	f001 fca2 	bl	80065a0 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <print+0x48>)
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fb fa52 	bl	8000108 <strlen>
 8004c64:	0002      	movs	r2, r0
 8004c66:	1dbb      	adds	r3, r7, #6
 8004c68:	801a      	strh	r2, [r3, #0]
	USART_WRITE(UART_TYPE, buffer, len, 1000);
 8004c6a:	1dbb      	adds	r3, r7, #6
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	23fa      	movs	r3, #250	; 0xfa
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4905      	ldr	r1, [pc, #20]	; (8004c88 <print+0x48>)
 8004c74:	4805      	ldr	r0, [pc, #20]	; (8004c8c <print+0x4c>)
 8004c76:	f7ff ffa7 	bl	8004bc8 <USART_WRITE>

}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bc80      	pop	{r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	b004      	add	sp, #16
 8004c86:	4718      	bx	r3
 8004c88:	2000024c 	.word	0x2000024c
 8004c8c:	40004400 	.word	0x40004400

08004c90 <println>:

void println(const char *fmt, ...) {
 8004c90:	b40f      	push	{r0, r1, r2, r3}
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8004c98:	2314      	movs	r3, #20
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	2180      	movs	r1, #128	; 0x80
 8004ca4:	0049      	lsls	r1, r1, #1
 8004ca6:	480f      	ldr	r0, [pc, #60]	; (8004ce4 <println+0x54>)
 8004ca8:	f001 fc7a 	bl	80065a0 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <println+0x54>)
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7fb fa2a 	bl	8000108 <strlen>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	1dbb      	adds	r3, r7, #6
 8004cb8:	801a      	strh	r2, [r3, #0]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	4909      	ldr	r1, [pc, #36]	; (8004ce4 <println+0x54>)
 8004cc0:	4809      	ldr	r0, [pc, #36]	; (8004ce8 <println+0x58>)
 8004cc2:	2364      	movs	r3, #100	; 0x64
 8004cc4:	f7ff ff80 	bl	8004bc8 <USART_WRITE>
	USART_WRITE(UART_TYPE, '\n', 1, 100);
 8004cc8:	4807      	ldr	r0, [pc, #28]	; (8004ce8 <println+0x58>)
 8004cca:	2364      	movs	r3, #100	; 0x64
 8004ccc:	2201      	movs	r2, #1
 8004cce:	210a      	movs	r1, #10
 8004cd0:	f7ff ff7a 	bl	8004bc8 <USART_WRITE>

}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b002      	add	sp, #8
 8004cda:	bc80      	pop	{r7}
 8004cdc:	bc08      	pop	{r3}
 8004cde:	b004      	add	sp, #16
 8004ce0:	4718      	bx	r3
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	2000034c 	.word	0x2000034c
 8004ce8:	40004400 	.word	0x40004400

08004cec <uart_print_config>:

void uart_print_config(uint32_t baudRate) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8004cf4:	2390      	movs	r3, #144	; 0x90
 8004cf6:	05da      	lsls	r2, r3, #23
 8004cf8:	2390      	movs	r3, #144	; 0x90
 8004cfa:	05d9      	lsls	r1, r3, #23
 8004cfc:	4805      	ldr	r0, [pc, #20]	; (8004d14 <uart_print_config+0x28>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2303      	movs	r3, #3
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2302      	movs	r3, #2
 8004d08:	f7ff fdca 	bl	80048a0 <USART_INIT>
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b002      	add	sp, #8
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40004400 	.word	0x40004400

08004d18 <rb_size>:
rb_data_type        rb_data_at(uint16_t index) ;

/**
 * Returns how many elements are actually stored in the buffer.
 */
static uint16_t     inline rb_size(void) { return( buf_count ) ; }
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <rb_size+0x10>)
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	200004d8 	.word	0x200004d8

08004d2c <user_i2cConfig>:
 *      Author: hp
 */

#include "MAX30100.h"

BML_StatusTypeDef user_i2cConfig(void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af02      	add	r7, sp, #8
	gpio_config(SCL_PORT, SCL_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 8004d32:	4818      	ldr	r0, [pc, #96]	; (8004d94 <user_i2cConfig+0x68>)
 8004d34:	2301      	movs	r3, #1
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	2202      	movs	r2, #2
 8004d40:	2108      	movs	r1, #8
 8004d42:	f7ff f961 	bl	8004008 <gpio_config>
	gpio_config(SDA_PORT, SDA_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 8004d46:	4813      	ldr	r0, [pc, #76]	; (8004d94 <user_i2cConfig+0x68>)
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2302      	movs	r3, #2
 8004d52:	2202      	movs	r2, #2
 8004d54:	2109      	movs	r1, #9
 8004d56:	f7ff f957 	bl	8004008 <gpio_config>

	gpio_altfn(SCL_PORT, SCL_PIN, I2C1_SCL_PB8);
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <user_i2cConfig+0x68>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	2108      	movs	r1, #8
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff fa18 	bl	8004196 <gpio_altfn>
	gpio_altfn(SDA_PORT, SDA_PIN, I2C1_SDA_PB9);
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <user_i2cConfig+0x68>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2109      	movs	r1, #9
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff fa12 	bl	8004196 <gpio_altfn>

	I2C_INIT(_MAX30100_I2C, _MAX30100_I2C_SPEED);
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <user_i2cConfig+0x6c>)
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <user_i2cConfig+0x70>)
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff fa4d 	bl	8004218 <I2C_INIT>

	return I2C_DeviceReady(I2C1, _MAX30100_I2C_ADDRESS, 1000);
 8004d7e:	23fa      	movs	r3, #250	; 0xfa
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4806      	ldr	r0, [pc, #24]	; (8004d9c <user_i2cConfig+0x70>)
 8004d84:	001a      	movs	r2, r3
 8004d86:	2157      	movs	r1, #87	; 0x57
 8004d88:	f7ff fa82 	bl	8004290 <I2C_DeviceReady>
 8004d8c:	0003      	movs	r3, r0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	48000400 	.word	0x48000400
 8004d98:	2000090e 	.word	0x2000090e
 8004d9c:	40005400 	.word	0x40005400

08004da0 <MAX30100_begin>:

BML_StatusTypeDef MAX30100_begin(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	if (user_i2cConfig() != BML_OK) {
 8004da4:	f7ff ffc2 	bl	8004d2c <user_i2cConfig>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d001      	beq.n	8004db0 <MAX30100_begin+0x10>
		return BML_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02b      	b.n	8004e08 <MAX30100_begin+0x68>
	}

	if (MAX30100_getPartId() != EXPECTED_PART_ID) {
 8004db0:	f000 f88c 	bl	8004ecc <MAX30100_getPartId>
 8004db4:	0003      	movs	r3, r0
 8004db6:	2b11      	cmp	r3, #17
 8004db8:	d001      	beq.n	8004dbe <MAX30100_begin+0x1e>
		return BML_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e024      	b.n	8004e08 <MAX30100_begin+0x68>
	}

	if (MAX30100_setMode(DEFAULT_MODE) != BML_OK) {
 8004dbe:	2002      	movs	r0, #2
 8004dc0:	f000 f88d 	bl	8004ede <MAX30100_setMode>
 8004dc4:	1e03      	subs	r3, r0, #0
 8004dc6:	d001      	beq.n	8004dcc <MAX30100_begin+0x2c>
		return BML_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e01d      	b.n	8004e08 <MAX30100_begin+0x68>
	}
	if (MAX30100_setLedsPulseWidth(DEFAULT_PULSE_WIDTH) != BML_OK) {
 8004dcc:	2003      	movs	r0, #3
 8004dce:	f000 f897 	bl	8004f00 <MAX30100_setLedsPulseWidth>
 8004dd2:	1e03      	subs	r3, r0, #0
 8004dd4:	d001      	beq.n	8004dda <MAX30100_begin+0x3a>
		return BML_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e016      	b.n	8004e08 <MAX30100_begin+0x68>
	}
	if (MAX30100_setSamplingRate(DEFAULT_SAMPLING_RATE) != BML_OK) {
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f000 f8b2 	bl	8004f44 <MAX30100_setSamplingRate>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d001      	beq.n	8004de8 <MAX30100_begin+0x48>
		return BML_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e00f      	b.n	8004e08 <MAX30100_begin+0x68>
	}
	if (MAX30100_setLedsCurrent(DEFAULT_IR_LED_CURRENT, DEFAULT_RED_LED_CURRENT)
 8004de8:	210f      	movs	r1, #15
 8004dea:	200f      	movs	r0, #15
 8004dec:	f000 f8cd 	bl	8004f8a <MAX30100_setLedsCurrent>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <MAX30100_begin+0x58>
			!= BML_OK) {
		return BML_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e007      	b.n	8004e08 <MAX30100_begin+0x68>
	}
	if (MAX30100_setHighresModeEnabled(true) != BML_OK) {
 8004df8:	2001      	movs	r0, #1
 8004dfa:	f000 f8e2 	bl	8004fc2 <MAX30100_setHighresModeEnabled>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d001      	beq.n	8004e06 <MAX30100_begin+0x66>
		return BML_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <MAX30100_begin+0x68>
	}
	return BML_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <MAX30100_readRegister>:

uint8_t MAX30100_readRegister(uint8_t address) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	0002      	movs	r2, r0
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	701a      	strb	r2, [r3, #0]
	uint8_t rdata = 0;
 8004e1c:	210f      	movs	r1, #15
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
	if (I2C_MasterByteRead(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address,
 8004e24:	1879      	adds	r1, r7, r1
 8004e26:	1dfb      	adds	r3, r7, #7
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	4809      	ldr	r0, [pc, #36]	; (8004e50 <MAX30100_readRegister+0x40>)
 8004e2c:	2364      	movs	r3, #100	; 0x64
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	000b      	movs	r3, r1
 8004e32:	2157      	movs	r1, #87	; 0x57
 8004e34:	f7ff fb2e 	bl	8004494 <I2C_MasterByteRead>
 8004e38:	1e03      	subs	r3, r0, #0
 8004e3a:	d001      	beq.n	8004e40 <MAX30100_readRegister+0x30>
			&rdata, 100) != BML_OK) {
		return 255;
 8004e3c:	23ff      	movs	r3, #255	; 0xff
 8004e3e:	e002      	b.n	8004e46 <MAX30100_readRegister+0x36>
	}
	return rdata;
 8004e40:	230f      	movs	r3, #15
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b004      	add	sp, #16
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	40005400 	.word	0x40005400

08004e54 <MAX30100_writeRegister>:

BML_StatusTypeDef MAX30100_writeRegister(uint8_t address, uint8_t data) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	1dfb      	adds	r3, r7, #7
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	1dbb      	adds	r3, r7, #6
 8004e62:	1c0a      	adds	r2, r1, #0
 8004e64:	701a      	strb	r2, [r3, #0]
	return I2C_MasterByteWrite(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address,
 8004e66:	1dbb      	adds	r3, r7, #6
 8004e68:	7819      	ldrb	r1, [r3, #0]
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	4806      	ldr	r0, [pc, #24]	; (8004e88 <MAX30100_writeRegister+0x34>)
 8004e70:	2364      	movs	r3, #100	; 0x64
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	000b      	movs	r3, r1
 8004e76:	2157      	movs	r1, #87	; 0x57
 8004e78:	f7ff fa6a 	bl	8004350 <I2C_MasterByteWrite>
 8004e7c:	0003      	movs	r3, r0
			data, 100);
}
 8004e7e:	0018      	movs	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b002      	add	sp, #8
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	40005400 	.word	0x40005400

08004e8c <MAX30100_burstRead>:

BML_StatusTypeDef MAX30100_burstRead(uint8_t baseAddress, uint8_t *buffer,
		uint8_t length) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	6039      	str	r1, [r7, #0]
 8004e94:	0011      	movs	r1, r2
 8004e96:	1dfb      	adds	r3, r7, #7
 8004e98:	1c02      	adds	r2, r0, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	1dbb      	adds	r3, r7, #6
 8004e9e:	1c0a      	adds	r2, r1, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
	return I2C_MasterMultiRead(_MAX30100_I2C, _MAX30100_I2C_ADDRESS,
 8004ea2:	1dbb      	adds	r3, r7, #6
 8004ea4:	7819      	ldrb	r1, [r3, #0]
 8004ea6:	1dfb      	adds	r3, r7, #7
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	4807      	ldr	r0, [pc, #28]	; (8004ec8 <MAX30100_burstRead+0x3c>)
 8004eac:	2364      	movs	r3, #100	; 0x64
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	000b      	movs	r3, r1
 8004eb6:	2157      	movs	r1, #87	; 0x57
 8004eb8:	f7ff fbb8 	bl	800462c <I2C_MasterMultiRead>
 8004ebc:	0003      	movs	r3, r0
			baseAddress, length, buffer, 100);
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	40005400 	.word	0x40005400

08004ecc <MAX30100_getPartId>:

uint8_t MAX30100_getPartId() {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	return MAX30100_readRegister(0xff);
 8004ed0:	20ff      	movs	r0, #255	; 0xff
 8004ed2:	f7ff ff9d 	bl	8004e10 <MAX30100_readRegister>
 8004ed6:	0003      	movs	r3, r0
}
 8004ed8:	0018      	movs	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <MAX30100_setMode>:

BML_StatusTypeDef MAX30100_setMode(Mode mode) {
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	0002      	movs	r2, r0
 8004ee6:	1dfb      	adds	r3, r7, #7
 8004ee8:	701a      	strb	r2, [r3, #0]
	return MAX30100_writeRegister(MAX30100_REG_MODE_CONFIGURATION, mode);
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	0019      	movs	r1, r3
 8004ef0:	2006      	movs	r0, #6
 8004ef2:	f7ff ffaf 	bl	8004e54 <MAX30100_writeRegister>
 8004ef6:	0003      	movs	r3, r0
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <MAX30100_setLedsPulseWidth>:

BML_StatusTypeDef MAX30100_setLedsPulseWidth(LEDPulseWidth ledPulseWidth) {
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	0002      	movs	r2, r0
 8004f08:	1dfb      	adds	r3, r7, #7
 8004f0a:	701a      	strb	r2, [r3, #0]
	uint8_t previous = MAX30100_readRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8004f0c:	250f      	movs	r5, #15
 8004f0e:	197c      	adds	r4, r7, r5
 8004f10:	2007      	movs	r0, #7
 8004f12:	f7ff ff7d 	bl	8004e10 <MAX30100_readRegister>
 8004f16:	0003      	movs	r3, r0
 8004f18:	7023      	strb	r3, [r4, #0]
	return MAX30100_writeRegister(MAX30100_REG_SPO2_CONFIGURATION,
			(previous & 0xfc) | ledPulseWidth);
 8004f1a:	197b      	adds	r3, r7, r5
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	2203      	movs	r2, #3
 8004f22:	4393      	bics	r3, r2
 8004f24:	b25a      	sxtb	r2, r3
 8004f26:	1dfb      	adds	r3, r7, #7
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b25b      	sxtb	r3, r3
	return MAX30100_writeRegister(MAX30100_REG_SPO2_CONFIGURATION,
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	0019      	movs	r1, r3
 8004f34:	2007      	movs	r0, #7
 8004f36:	f7ff ff8d 	bl	8004e54 <MAX30100_writeRegister>
 8004f3a:	0003      	movs	r3, r0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bdb0      	pop	{r4, r5, r7, pc}

08004f44 <MAX30100_setSamplingRate>:

BML_StatusTypeDef MAX30100_setSamplingRate(SamplingRate samplingRate) {
 8004f44:	b5b0      	push	{r4, r5, r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	0002      	movs	r2, r0
 8004f4c:	1dfb      	adds	r3, r7, #7
 8004f4e:	701a      	strb	r2, [r3, #0]
	uint8_t previous = MAX30100_readRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8004f50:	250f      	movs	r5, #15
 8004f52:	197c      	adds	r4, r7, r5
 8004f54:	2007      	movs	r0, #7
 8004f56:	f7ff ff5b 	bl	8004e10 <MAX30100_readRegister>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	7023      	strb	r3, [r4, #0]
	return MAX30100_writeRegister(MAX30100_REG_SPO2_CONFIGURATION,
			(previous & 0xe3) | (samplingRate << 2));
 8004f5e:	197b      	adds	r3, r7, r5
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	221c      	movs	r2, #28
 8004f66:	4393      	bics	r3, r2
 8004f68:	b25a      	sxtb	r2, r3
 8004f6a:	1dfb      	adds	r3, r7, #7
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b25b      	sxtb	r3, r3
	return MAX30100_writeRegister(MAX30100_REG_SPO2_CONFIGURATION,
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	0019      	movs	r1, r3
 8004f7a:	2007      	movs	r0, #7
 8004f7c:	f7ff ff6a 	bl	8004e54 <MAX30100_writeRegister>
 8004f80:	0003      	movs	r3, r0
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b004      	add	sp, #16
 8004f88:	bdb0      	pop	{r4, r5, r7, pc}

08004f8a <MAX30100_setLedsCurrent>:

BML_StatusTypeDef MAX30100_setLedsCurrent(LEDCurrent irLedCurrent,
		LEDCurrent redLedCurrent) {
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	0002      	movs	r2, r0
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	1dbb      	adds	r3, r7, #6
 8004f98:	1c0a      	adds	r2, r1, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
	return MAX30100_writeRegister(MAX30100_REG_LED_CONFIGURATION,
			redLedCurrent << 4 | irLedCurrent);
 8004f9c:	1dbb      	adds	r3, r7, #6
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	b25a      	sxtb	r2, r3
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b25b      	sxtb	r3, r3
	return MAX30100_writeRegister(MAX30100_REG_LED_CONFIGURATION,
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	2009      	movs	r0, #9
 8004fb4:	f7ff ff4e 	bl	8004e54 <MAX30100_writeRegister>
 8004fb8:	0003      	movs	r3, r0
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b002      	add	sp, #8
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <MAX30100_setHighresModeEnabled>:

BML_StatusTypeDef MAX30100_setHighresModeEnabled(bool enabled) {
 8004fc2:	b5b0      	push	{r4, r5, r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	0002      	movs	r2, r0
 8004fca:	1dfb      	adds	r3, r7, #7
 8004fcc:	701a      	strb	r2, [r3, #0]
	uint8_t previous = MAX30100_readRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8004fce:	250f      	movs	r5, #15
 8004fd0:	197c      	adds	r4, r7, r5
 8004fd2:	2007      	movs	r0, #7
 8004fd4:	f7ff ff1c 	bl	8004e10 <MAX30100_readRegister>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	7023      	strb	r3, [r4, #0]
	if (enabled) {
 8004fdc:	1dfb      	adds	r3, r7, #7
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <MAX30100_setHighresModeEnabled+0x38>
		return MAX30100_writeRegister(MAX30100_REG_SPO2_CONFIGURATION,
 8004fe4:	197b      	adds	r3, r7, r5
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2240      	movs	r2, #64	; 0x40
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	0019      	movs	r1, r3
 8004ff0:	2007      	movs	r0, #7
 8004ff2:	f7ff ff2f 	bl	8004e54 <MAX30100_writeRegister>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	e00a      	b.n	8005010 <MAX30100_setHighresModeEnabled+0x4e>
				previous | MAX30100_SPC_SPO2_HI_RES_EN);
	} else {
		return MAX30100_writeRegister(MAX30100_REG_SPO2_CONFIGURATION,
 8004ffa:	230f      	movs	r3, #15
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2240      	movs	r2, #64	; 0x40
 8005002:	4393      	bics	r3, r2
 8005004:	b2db      	uxtb	r3, r3
 8005006:	0019      	movs	r1, r3
 8005008:	2007      	movs	r0, #7
 800500a:	f7ff ff23 	bl	8004e54 <MAX30100_writeRegister>
 800500e:	0003      	movs	r3, r0
				previous & ~MAX30100_SPC_SPO2_HI_RES_EN);
	}
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	b004      	add	sp, #16
 8005016:	bdb0      	pop	{r4, r5, r7, pc}

08005018 <MAX30100_update>:

BML_StatusTypeDef MAX30100_update() {
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	return MAX30100_readFifoData();
 800501c:	f000 f848 	bl	80050b0 <MAX30100_readFifoData>
 8005020:	0003      	movs	r3, r0
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <MAX30100_getRawValues>:

bool MAX30100_getRawValues(uint16_t *ir, uint16_t *red) {
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	bool result = false;
 8005032:	240f      	movs	r4, #15
 8005034:	193b      	adds	r3, r7, r4
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
	rb_data_type data;

	if (rb_size()) {
 800503a:	f7ff fe6d 	bl	8004d18 <rb_size>
 800503e:	1e03      	subs	r3, r0, #0
 8005040:	d011      	beq.n	8005066 <MAX30100_getRawValues+0x3e>
		data = rb_shift();
 8005042:	f000 fda5 	bl	8005b90 <rb_shift>
 8005046:	0003      	movs	r3, r0
 8005048:	001a      	movs	r2, r3
 800504a:	2108      	movs	r1, #8
 800504c:	187b      	adds	r3, r7, r1
 800504e:	601a      	str	r2, [r3, #0]
		*ir = data.ir;
 8005050:	187b      	adds	r3, r7, r1
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	801a      	strh	r2, [r3, #0]
		*red = data.red;
 8005058:	187b      	adds	r3, r7, r1
 800505a:	885a      	ldrh	r2, [r3, #2]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	801a      	strh	r2, [r3, #0]
		result = true;
 8005060:	193b      	adds	r3, r7, r4
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8005066:	230f      	movs	r3, #15
 8005068:	18fb      	adds	r3, r7, r3
 800506a:	781b      	ldrb	r3, [r3, #0]
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b005      	add	sp, #20
 8005072:	bd90      	pop	{r4, r7, pc}

08005074 <MAX30100_resetFifo>:

BML_StatusTypeDef MAX30100_resetFifo() {
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
	if (MAX30100_writeRegister(MAX30100_REG_FIFO_WRITE_POINTER, 0) != BML_OK) {
 8005078:	2100      	movs	r1, #0
 800507a:	2002      	movs	r0, #2
 800507c:	f7ff feea 	bl	8004e54 <MAX30100_writeRegister>
 8005080:	1e03      	subs	r3, r0, #0
 8005082:	d001      	beq.n	8005088 <MAX30100_resetFifo+0x14>
		return BML_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e010      	b.n	80050aa <MAX30100_resetFifo+0x36>
	}
	if (MAX30100_writeRegister(MAX30100_REG_FIFO_READ_POINTER, 0) != BML_OK) {
 8005088:	2100      	movs	r1, #0
 800508a:	2004      	movs	r0, #4
 800508c:	f7ff fee2 	bl	8004e54 <MAX30100_writeRegister>
 8005090:	1e03      	subs	r3, r0, #0
 8005092:	d001      	beq.n	8005098 <MAX30100_resetFifo+0x24>
		return BML_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e008      	b.n	80050aa <MAX30100_resetFifo+0x36>
	}
	if (MAX30100_writeRegister(MAX30100_REG_FIFO_OVERFLOW_COUNTER, 0)
 8005098:	2100      	movs	r1, #0
 800509a:	2003      	movs	r0, #3
 800509c:	f7ff feda 	bl	8004e54 <MAX30100_writeRegister>
 80050a0:	1e03      	subs	r3, r0, #0
 80050a2:	d001      	beq.n	80050a8 <MAX30100_resetFifo+0x34>
			!= BML_OK) {
		return BML_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <MAX30100_resetFifo+0x36>
	}
	return BML_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	0018      	movs	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <MAX30100_readFifoData>:

BML_StatusTypeDef MAX30100_readFifoData() {
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b093      	sub	sp, #76	; 0x4c
 80050b4:	af00      	add	r7, sp, #0
	uint8_t buffer[MAX30100_FIFO_DEPTH * 4];
	uint8_t toRead;
	rb_data_type value;

	toRead = (MAX30100_readRegister(MAX30100_REG_FIFO_WRITE_POINTER)
 80050b6:	2002      	movs	r0, #2
 80050b8:	f7ff feaa 	bl	8004e10 <MAX30100_readRegister>
 80050bc:	0003      	movs	r3, r0
 80050be:	001c      	movs	r4, r3
			- MAX30100_readRegister(MAX30100_REG_FIFO_READ_POINTER))
 80050c0:	2004      	movs	r0, #4
 80050c2:	f7ff fea5 	bl	8004e10 <MAX30100_readRegister>
 80050c6:	0003      	movs	r3, r0
			& (MAX30100_FIFO_DEPTH - 1);
 80050c8:	1ae3      	subs	r3, r4, r3
 80050ca:	b2da      	uxtb	r2, r3
	toRead = (MAX30100_readRegister(MAX30100_REG_FIFO_WRITE_POINTER)
 80050cc:	2046      	movs	r0, #70	; 0x46
 80050ce:	183b      	adds	r3, r7, r0
 80050d0:	210f      	movs	r1, #15
 80050d2:	400a      	ands	r2, r1
 80050d4:	701a      	strb	r2, [r3, #0]

	if (toRead) {
 80050d6:	0002      	movs	r2, r0
 80050d8:	18bb      	adds	r3, r7, r2
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d04c      	beq.n	800517a <MAX30100_readFifoData+0xca>
		if (MAX30100_burstRead(MAX30100_REG_FIFO_DATA, buffer, 4 * toRead)
 80050e0:	18bb      	adds	r3, r7, r2
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	0019      	movs	r1, r3
 80050ec:	2005      	movs	r0, #5
 80050ee:	f7ff fecd 	bl	8004e8c <MAX30100_burstRead>
 80050f2:	1e03      	subs	r3, r0, #0
 80050f4:	d001      	beq.n	80050fa <MAX30100_readFifoData+0x4a>
				!= BML_OK) {
			return BML_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e040      	b.n	800517c <MAX30100_readFifoData+0xcc>
		}

		for (uint8_t i = 0; i < toRead; ++i) {
 80050fa:	2347      	movs	r3, #71	; 0x47
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e030      	b.n	8005166 <MAX30100_readFifoData+0xb6>
			// Warning: the values are always left-aligned
			value.ir = (uint16_t) ((buffer[i * 4] << 8) | buffer[i * 4 + 1]);
 8005104:	2447      	movs	r4, #71	; 0x47
 8005106:	193b      	adds	r3, r7, r4
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	1d3a      	adds	r2, r7, #4
 800510e:	5cd3      	ldrb	r3, [r2, r3]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b21a      	sxth	r2, r3
 8005114:	193b      	adds	r3, r7, r4
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	3301      	adds	r3, #1
 800511c:	1d39      	adds	r1, r7, #4
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	b21b      	sxth	r3, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	b21b      	sxth	r3, r3
 8005126:	b29a      	uxth	r2, r3
 8005128:	003b      	movs	r3, r7
 800512a:	801a      	strh	r2, [r3, #0]
			value.red =(uint16_t) ((buffer[i * 4 + 2] << 8) | buffer[i * 4 + 3]);
 800512c:	193b      	adds	r3, r7, r4
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	3302      	adds	r3, #2
 8005134:	1d3a      	adds	r2, r7, #4
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b21a      	sxth	r2, r3
 800513c:	193b      	adds	r3, r7, r4
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	3303      	adds	r3, #3
 8005144:	1d39      	adds	r1, r7, #4
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	b21b      	sxth	r3, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	b21b      	sxth	r3, r3
 800514e:	b29a      	uxth	r2, r3
 8005150:	003b      	movs	r3, r7
 8005152:	805a      	strh	r2, [r3, #2]
			rb_push(value);
 8005154:	003b      	movs	r3, r7
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	f000 fcdc 	bl	8005b14 <rb_push>
		for (uint8_t i = 0; i < toRead; ++i) {
 800515c:	193b      	adds	r3, r7, r4
 800515e:	193a      	adds	r2, r7, r4
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	3201      	adds	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	2347      	movs	r3, #71	; 0x47
 8005168:	18fa      	adds	r2, r7, r3
 800516a:	2346      	movs	r3, #70	; 0x46
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d3c6      	bcc.n	8005104 <MAX30100_readFifoData+0x54>
		}
		return BML_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <MAX30100_readFifoData+0xcc>
	}
	return BML_TIMEOUT;
 800517a:	2303      	movs	r3, #3
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b013      	add	sp, #76	; 0x4c
 8005182:	bd90      	pop	{r4, r7, pc}

08005184 <BeatDetector_addSample>:
float beatPeriod = 0;
float lastMaxValue = 0;
uint32_t tsLastBeat = 0;

bool BeatDetector_addSample(float sample)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
    return BeatDetector_checkForBeat(sample);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1c18      	adds	r0, r3, #0
 8005190:	f000 f838 	bl	8005204 <BeatDetector_checkForBeat>
 8005194:	0003      	movs	r3, r0
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b002      	add	sp, #8
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <BeatDetector_getRate>:

float BeatDetector_getRate()
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
    if (beatPeriod != 0) {
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <BeatDetector_getRate+0x44>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2100      	movs	r1, #0
 80051aa:	1c18      	adds	r0, r3, #0
 80051ac:	f7fb f988 	bl	80004c0 <__aeabi_fcmpeq>
 80051b0:	1e03      	subs	r3, r0, #0
 80051b2:	d112      	bne.n	80051da <BeatDetector_getRate+0x3a>
        return 1 / beatPeriod * 1000 * 60;
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <BeatDetector_getRate+0x44>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	1c19      	adds	r1, r3, #0
 80051ba:	20fe      	movs	r0, #254	; 0xfe
 80051bc:	0580      	lsls	r0, r0, #22
 80051be:	f7fb fb63 	bl	8000888 <__aeabi_fdiv>
 80051c2:	1c03      	adds	r3, r0, #0
 80051c4:	4908      	ldr	r1, [pc, #32]	; (80051e8 <BeatDetector_getRate+0x48>)
 80051c6:	1c18      	adds	r0, r3, #0
 80051c8:	f7fb fd26 	bl	8000c18 <__aeabi_fmul>
 80051cc:	1c03      	adds	r3, r0, #0
 80051ce:	4907      	ldr	r1, [pc, #28]	; (80051ec <BeatDetector_getRate+0x4c>)
 80051d0:	1c18      	adds	r0, r3, #0
 80051d2:	f7fb fd21 	bl	8000c18 <__aeabi_fmul>
 80051d6:	1c03      	adds	r3, r0, #0
 80051d8:	e000      	b.n	80051dc <BeatDetector_getRate+0x3c>
    } else {
        return 0;
 80051da:	2300      	movs	r3, #0
    }
}
 80051dc:	1c18      	adds	r0, r3, #0
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	20000450 	.word	0x20000450
 80051e8:	447a0000 	.word	0x447a0000
 80051ec:	42700000 	.word	0x42700000

080051f0 <BeatDetector_getCurrentThreshold>:

float BeatDetector_getCurrentThreshold()
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
    return threshold;
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <BeatDetector_getCurrentThreshold+0x10>)
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	1c18      	adds	r0, r3, #0
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	2000004c 	.word	0x2000004c

08005204 <BeatDetector_checkForBeat>:

bool BeatDetector_checkForBeat(float sample)
{
 8005204:	b5b0      	push	{r4, r5, r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
    bool beatDetected = false;
 800520c:	230f      	movs	r3, #15
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]

    switch (state) {
 8005214:	4b61      	ldr	r3, [pc, #388]	; (800539c <BeatDetector_checkForBeat+0x198>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d900      	bls.n	800521e <BeatDetector_checkForBeat+0x1a>
 800521c:	e0b6      	b.n	800538c <BeatDetector_checkForBeat+0x188>
 800521e:	009a      	lsls	r2, r3, #2
 8005220:	4b5f      	ldr	r3, [pc, #380]	; (80053a0 <BeatDetector_checkForBeat+0x19c>)
 8005222:	18d3      	adds	r3, r2, r3
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	469f      	mov	pc, r3
    print("In check for beat\n");
        case BEATDETECTOR_STATE_INIT:
            if (HAL_GetTick() > BEATDETECTOR_INIT_HOLDOFF) {
 8005228:	f7fe f8b8 	bl	800339c <HAL_GetTick>
 800522c:	0002      	movs	r2, r0
 800522e:	23fa      	movs	r3, #250	; 0xfa
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	429a      	cmp	r2, r3
 8005234:	d800      	bhi.n	8005238 <BeatDetector_checkForBeat+0x34>
 8005236:	e0a8      	b.n	800538a <BeatDetector_checkForBeat+0x186>
                state = BEATDETECTOR_STATE_WAITING;
 8005238:	4b58      	ldr	r3, [pc, #352]	; (800539c <BeatDetector_checkForBeat+0x198>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800523e:	e0a4      	b.n	800538a <BeatDetector_checkForBeat+0x186>

        case BEATDETECTOR_STATE_WAITING:
            if (sample > threshold) {
 8005240:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <BeatDetector_checkForBeat+0x1a0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	1c19      	adds	r1, r3, #0
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fb f954 	bl	80004f4 <__aeabi_fcmpgt>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d00d      	beq.n	800526c <BeatDetector_checkForBeat+0x68>
                threshold = min(sample, BEATDETECTOR_MAX_THRESHOLD);
 8005250:	4955      	ldr	r1, [pc, #340]	; (80053a8 <BeatDetector_checkForBeat+0x1a4>)
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb f93a 	bl	80004cc <__aeabi_fcmplt>
 8005258:	1e03      	subs	r3, r0, #0
 800525a:	d001      	beq.n	8005260 <BeatDetector_checkForBeat+0x5c>
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	e000      	b.n	8005262 <BeatDetector_checkForBeat+0x5e>
 8005260:	4a51      	ldr	r2, [pc, #324]	; (80053a8 <BeatDetector_checkForBeat+0x1a4>)
 8005262:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <BeatDetector_checkForBeat+0x1a0>)
 8005264:	601a      	str	r2, [r3, #0]
                state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8005266:	4b4d      	ldr	r3, [pc, #308]	; (800539c <BeatDetector_checkForBeat+0x198>)
 8005268:	2202      	movs	r2, #2
 800526a:	701a      	strb	r2, [r3, #0]
            }

            // Tracking lost, resetting
            if (HAL_GetTick() - tsLastBeat > BEATDETECTOR_INVALID_READOUT_DELAY) {
 800526c:	f7fe f896 	bl	800339c <HAL_GetTick>
 8005270:	0002      	movs	r2, r0
 8005272:	4b4e      	ldr	r3, [pc, #312]	; (80053ac <BeatDetector_checkForBeat+0x1a8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	23fa      	movs	r3, #250	; 0xfa
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	429a      	cmp	r2, r3
 800527e:	d905      	bls.n	800528c <BeatDetector_checkForBeat+0x88>
                beatPeriod = 0;
 8005280:	4b4b      	ldr	r3, [pc, #300]	; (80053b0 <BeatDetector_checkForBeat+0x1ac>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
                lastMaxValue = 0;
 8005286:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <BeatDetector_checkForBeat+0x1b0>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
            }

            BeatDetector_decreaseThreshold();
 800528c:	f000 f89e 	bl	80053cc <BeatDetector_decreaseThreshold>
            break;
 8005290:	e07c      	b.n	800538c <BeatDetector_checkForBeat+0x188>

        case BEATDETECTOR_STATE_FOLLOWING_SLOPE:
            if (sample < threshold) {
 8005292:	4b44      	ldr	r3, [pc, #272]	; (80053a4 <BeatDetector_checkForBeat+0x1a0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	1c19      	adds	r1, r3, #0
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7fb f917 	bl	80004cc <__aeabi_fcmplt>
 800529e:	1e03      	subs	r3, r0, #0
 80052a0:	d003      	beq.n	80052aa <BeatDetector_checkForBeat+0xa6>
                state = BEATDETECTOR_STATE_MAYBE_DETECTED;
 80052a2:	4b3e      	ldr	r3, [pc, #248]	; (800539c <BeatDetector_checkForBeat+0x198>)
 80052a4:	2203      	movs	r2, #3
 80052a6:	701a      	strb	r2, [r3, #0]
            } else {
                threshold = min(sample, BEATDETECTOR_MAX_THRESHOLD);
            }
            break;
 80052a8:	e070      	b.n	800538c <BeatDetector_checkForBeat+0x188>
                threshold = min(sample, BEATDETECTOR_MAX_THRESHOLD);
 80052aa:	493f      	ldr	r1, [pc, #252]	; (80053a8 <BeatDetector_checkForBeat+0x1a4>)
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fb f90d 	bl	80004cc <__aeabi_fcmplt>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d001      	beq.n	80052ba <BeatDetector_checkForBeat+0xb6>
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	e000      	b.n	80052bc <BeatDetector_checkForBeat+0xb8>
 80052ba:	4a3b      	ldr	r2, [pc, #236]	; (80053a8 <BeatDetector_checkForBeat+0x1a4>)
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <BeatDetector_checkForBeat+0x1a0>)
 80052be:	601a      	str	r2, [r3, #0]
            break;
 80052c0:	e064      	b.n	800538c <BeatDetector_checkForBeat+0x188>

        case BEATDETECTOR_STATE_MAYBE_DETECTED:
            if (sample + BEATDETECTOR_STEP_RESILIENCY < threshold) {
 80052c2:	493d      	ldr	r1, [pc, #244]	; (80053b8 <BeatDetector_checkForBeat+0x1b4>)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fb f941 	bl	800054c <__aeabi_fadd>
 80052ca:	1c03      	adds	r3, r0, #0
 80052cc:	1c1a      	adds	r2, r3, #0
 80052ce:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <BeatDetector_checkForBeat+0x1a0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1c19      	adds	r1, r3, #0
 80052d4:	1c10      	adds	r0, r2, #0
 80052d6:	f7fb f8f9 	bl	80004cc <__aeabi_fcmplt>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d043      	beq.n	8005366 <BeatDetector_checkForBeat+0x162>
                // Found a beat
                beatDetected = true;
 80052de:	230f      	movs	r3, #15
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
                lastMaxValue = sample;
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <BeatDetector_checkForBeat+0x1b0>)
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
                state = BEATDETECTOR_STATE_MASKING;
 80052ec:	4b2b      	ldr	r3, [pc, #172]	; (800539c <BeatDetector_checkForBeat+0x198>)
 80052ee:	2204      	movs	r2, #4
 80052f0:	701a      	strb	r2, [r3, #0]
                float delta = HAL_GetTick() - tsLastBeat;
 80052f2:	f7fe f853 	bl	800339c <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <BeatDetector_checkForBeat+0x1a8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	0018      	movs	r0, r3
 8005300:	f7fb ff7e 	bl	8001200 <__aeabi_ui2f>
 8005304:	1c03      	adds	r3, r0, #0
 8005306:	60bb      	str	r3, [r7, #8]
                if (delta) {
 8005308:	2100      	movs	r1, #0
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f7fb f8d8 	bl	80004c0 <__aeabi_fcmpeq>
 8005310:	1e03      	subs	r3, r0, #0
 8005312:	d122      	bne.n	800535a <BeatDetector_checkForBeat+0x156>
                    beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8005314:	68b8      	ldr	r0, [r7, #8]
 8005316:	f7fd fd9b 	bl	8002e50 <__aeabi_f2d>
 800531a:	4a28      	ldr	r2, [pc, #160]	; (80053bc <BeatDetector_checkForBeat+0x1b8>)
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <BeatDetector_checkForBeat+0x1bc>)
 800531e:	f7fc feef 	bl	8002100 <__aeabi_dmul>
 8005322:	0002      	movs	r2, r0
 8005324:	000b      	movs	r3, r1
 8005326:	0014      	movs	r4, r2
 8005328:	001d      	movs	r5, r3
                            (1 - BEATDETECTOR_BPFILTER_ALPHA) * beatPeriod;
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <BeatDetector_checkForBeat+0x1ac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1c18      	adds	r0, r3, #0
 8005330:	f7fd fd8e 	bl	8002e50 <__aeabi_f2d>
 8005334:	4a23      	ldr	r2, [pc, #140]	; (80053c4 <BeatDetector_checkForBeat+0x1c0>)
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <BeatDetector_checkForBeat+0x1c4>)
 8005338:	f7fc fee2 	bl	8002100 <__aeabi_dmul>
 800533c:	0002      	movs	r2, r0
 800533e:	000b      	movs	r3, r1
                    beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8005340:	0020      	movs	r0, r4
 8005342:	0029      	movs	r1, r5
 8005344:	f7fb ff9e 	bl	8001284 <__aeabi_dadd>
 8005348:	0002      	movs	r2, r0
 800534a:	000b      	movs	r3, r1
 800534c:	0010      	movs	r0, r2
 800534e:	0019      	movs	r1, r3
 8005350:	f7fd fdc6 	bl	8002ee0 <__aeabi_d2f>
 8005354:	1c02      	adds	r2, r0, #0
 8005356:	4b16      	ldr	r3, [pc, #88]	; (80053b0 <BeatDetector_checkForBeat+0x1ac>)
 8005358:	601a      	str	r2, [r3, #0]
                }

                tsLastBeat = HAL_GetTick();
 800535a:	f7fe f81f 	bl	800339c <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <BeatDetector_checkForBeat+0x1a8>)
 8005362:	601a      	str	r2, [r3, #0]
            } else {
                state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
            }
            break;
 8005364:	e012      	b.n	800538c <BeatDetector_checkForBeat+0x188>
                state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8005366:	4b0d      	ldr	r3, [pc, #52]	; (800539c <BeatDetector_checkForBeat+0x198>)
 8005368:	2202      	movs	r2, #2
 800536a:	701a      	strb	r2, [r3, #0]
            break;
 800536c:	e00e      	b.n	800538c <BeatDetector_checkForBeat+0x188>

        case BEATDETECTOR_STATE_MASKING:
            if (HAL_GetTick() - tsLastBeat > BEATDETECTOR_MASKING_HOLDOFF) {
 800536e:	f7fe f815 	bl	800339c <HAL_GetTick>
 8005372:	0002      	movs	r2, r0
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <BeatDetector_checkForBeat+0x1a8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2bc8      	cmp	r3, #200	; 0xc8
 800537c:	d902      	bls.n	8005384 <BeatDetector_checkForBeat+0x180>
                state = BEATDETECTOR_STATE_WAITING;
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <BeatDetector_checkForBeat+0x198>)
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
            }
            BeatDetector_decreaseThreshold();
 8005384:	f000 f822 	bl	80053cc <BeatDetector_decreaseThreshold>
            break;
 8005388:	e000      	b.n	800538c <BeatDetector_checkForBeat+0x188>
            break;
 800538a:	46c0      	nop			; (mov r8, r8)
    }

    return beatDetected;
 800538c:	230f      	movs	r3, #15
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
}
 8005392:	0018      	movs	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	b004      	add	sp, #16
 8005398:	bdb0      	pop	{r4, r5, r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	2000044c 	.word	0x2000044c
 80053a0:	08009380 	.word	0x08009380
 80053a4:	2000004c 	.word	0x2000004c
 80053a8:	44480000 	.word	0x44480000
 80053ac:	20000458 	.word	0x20000458
 80053b0:	20000450 	.word	0x20000450
 80053b4:	20000454 	.word	0x20000454
 80053b8:	41f00000 	.word	0x41f00000
 80053bc:	33333333 	.word	0x33333333
 80053c0:	3fe33333 	.word	0x3fe33333
 80053c4:	9999999a 	.word	0x9999999a
 80053c8:	3fd99999 	.word	0x3fd99999

080053cc <BeatDetector_decreaseThreshold>:

void BeatDetector_decreaseThreshold()
{
 80053cc:	b5b0      	push	{r4, r5, r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
    // When a valid beat rate readout is present, target the
    if (lastMaxValue > 0 && beatPeriod > 0) {
 80053d2:	4b33      	ldr	r3, [pc, #204]	; (80054a0 <BeatDetector_decreaseThreshold+0xd4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2100      	movs	r1, #0
 80053d8:	1c18      	adds	r0, r3, #0
 80053da:	f7fb f88b 	bl	80004f4 <__aeabi_fcmpgt>
 80053de:	1e03      	subs	r3, r0, #0
 80053e0:	d03b      	beq.n	800545a <BeatDetector_decreaseThreshold+0x8e>
 80053e2:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <BeatDetector_decreaseThreshold+0xd8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2100      	movs	r1, #0
 80053e8:	1c18      	adds	r0, r3, #0
 80053ea:	f7fb f883 	bl	80004f4 <__aeabi_fcmpgt>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d033      	beq.n	800545a <BeatDetector_decreaseThreshold+0x8e>
        threshold -= lastMaxValue * (1 - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 80053f2:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <BeatDetector_decreaseThreshold+0xdc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	1c18      	adds	r0, r3, #0
 80053f8:	f7fd fd2a 	bl	8002e50 <__aeabi_f2d>
 80053fc:	0004      	movs	r4, r0
 80053fe:	000d      	movs	r5, r1
 8005400:	4b27      	ldr	r3, [pc, #156]	; (80054a0 <BeatDetector_decreaseThreshold+0xd4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1c18      	adds	r0, r3, #0
 8005406:	f7fd fd23 	bl	8002e50 <__aeabi_f2d>
 800540a:	4a28      	ldr	r2, [pc, #160]	; (80054ac <BeatDetector_decreaseThreshold+0xe0>)
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <BeatDetector_decreaseThreshold+0xe4>)
 800540e:	f7fc fe77 	bl	8002100 <__aeabi_dmul>
 8005412:	0002      	movs	r2, r0
 8005414:	000b      	movs	r3, r1
 8005416:	603a      	str	r2, [r7, #0]
 8005418:	607b      	str	r3, [r7, #4]
                (beatPeriod / BEATDETECTOR_SAMPLES_PERIOD);
 800541a:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <BeatDetector_decreaseThreshold+0xd8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4925      	ldr	r1, [pc, #148]	; (80054b4 <BeatDetector_decreaseThreshold+0xe8>)
 8005420:	1c18      	adds	r0, r3, #0
 8005422:	f7fb fa31 	bl	8000888 <__aeabi_fdiv>
 8005426:	1c03      	adds	r3, r0, #0
 8005428:	1c18      	adds	r0, r3, #0
 800542a:	f7fd fd11 	bl	8002e50 <__aeabi_f2d>
 800542e:	0002      	movs	r2, r0
 8005430:	000b      	movs	r3, r1
        threshold -= lastMaxValue * (1 - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 8005432:	6838      	ldr	r0, [r7, #0]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	f7fc fa61 	bl	80018fc <__aeabi_ddiv>
 800543a:	0002      	movs	r2, r0
 800543c:	000b      	movs	r3, r1
 800543e:	0020      	movs	r0, r4
 8005440:	0029      	movs	r1, r5
 8005442:	f7fd f8c9 	bl	80025d8 <__aeabi_dsub>
 8005446:	0002      	movs	r2, r0
 8005448:	000b      	movs	r3, r1
 800544a:	0010      	movs	r0, r2
 800544c:	0019      	movs	r1, r3
 800544e:	f7fd fd47 	bl	8002ee0 <__aeabi_d2f>
 8005452:	1c02      	adds	r2, r0, #0
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <BeatDetector_decreaseThreshold+0xdc>)
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e011      	b.n	800547e <BeatDetector_decreaseThreshold+0xb2>
    } else {
        // Asymptotic decay
        threshold *= BEATDETECTOR_THRESHOLD_DECAY_FACTOR;
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <BeatDetector_decreaseThreshold+0xdc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1c18      	adds	r0, r3, #0
 8005460:	f7fd fcf6 	bl	8002e50 <__aeabi_f2d>
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <BeatDetector_decreaseThreshold+0xec>)
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <BeatDetector_decreaseThreshold+0xf0>)
 8005468:	f7fc fe4a 	bl	8002100 <__aeabi_dmul>
 800546c:	0002      	movs	r2, r0
 800546e:	000b      	movs	r3, r1
 8005470:	0010      	movs	r0, r2
 8005472:	0019      	movs	r1, r3
 8005474:	f7fd fd34 	bl	8002ee0 <__aeabi_d2f>
 8005478:	1c02      	adds	r2, r0, #0
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <BeatDetector_decreaseThreshold+0xdc>)
 800547c:	601a      	str	r2, [r3, #0]
    }

    if (threshold < BEATDETECTOR_MIN_THRESHOLD) {
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <BeatDetector_decreaseThreshold+0xdc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	490f      	ldr	r1, [pc, #60]	; (80054c0 <BeatDetector_decreaseThreshold+0xf4>)
 8005484:	1c18      	adds	r0, r3, #0
 8005486:	f7fb f821 	bl	80004cc <__aeabi_fcmplt>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d100      	bne.n	8005490 <BeatDetector_decreaseThreshold+0xc4>
        threshold = BEATDETECTOR_MIN_THRESHOLD;
    }
}
 800548e:	e002      	b.n	8005496 <BeatDetector_decreaseThreshold+0xca>
        threshold = BEATDETECTOR_MIN_THRESHOLD;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <BeatDetector_decreaseThreshold+0xdc>)
 8005492:	4a0b      	ldr	r2, [pc, #44]	; (80054c0 <BeatDetector_decreaseThreshold+0xf4>)
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b002      	add	sp, #8
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000454 	.word	0x20000454
 80054a4:	20000450 	.word	0x20000450
 80054a8:	2000004c 	.word	0x2000004c
 80054ac:	66666666 	.word	0x66666666
 80054b0:	3fe66666 	.word	0x3fe66666
 80054b4:	41200000 	.word	0x41200000
 80054b8:	7ae147ae 	.word	0x7ae147ae
 80054bc:	3fefae14 	.word	0x3fefae14
 80054c0:	41a00000 	.word	0x41a00000

080054c4 <stepDCRemover>:
 *  Created on: Nov 8, 2022
 *      Author: hp
 */
#include "MAX30100_Filters.h"

float stepDCRemover(DCRemover* dcr, float x) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
	float olddcw = dcr->dcw;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60fb      	str	r3, [r7, #12]
	dcr->dcw = (float) x + dcr->alpha * dcr->dcw;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	1c19      	adds	r1, r3, #0
 80054de:	1c10      	adds	r0, r2, #0
 80054e0:	f7fb fb9a 	bl	8000c18 <__aeabi_fmul>
 80054e4:	1c03      	adds	r3, r0, #0
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	1c18      	adds	r0, r3, #0
 80054ea:	f7fb f82f 	bl	800054c <__aeabi_fadd>
 80054ee:	1c03      	adds	r3, r0, #0
 80054f0:	1c1a      	adds	r2, r3, #0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]
	return (dcr->dcw - olddcw);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	1c18      	adds	r0, r3, #0
 80054fe:	f7fb fcb1 	bl	8000e64 <__aeabi_fsub>
 8005502:	1c03      	adds	r3, r0, #0
}
 8005504:	1c18      	adds	r0, r3, #0
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}

0800550c <getDCW>:

float getDCW(DCRemover* dcr) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	return dcr->dcw;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
}
 8005518:	1c18      	adds	r0, r3, #0
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}

08005520 <stepFilterBuLp1>:

float stepFilterBuLp1(FilterBuLp1* fbp, float x) //class II
{
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	fbp->v[0] = fbp->v[1];
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
	fbp->v[1] = (0.2452372752527856026 * x) + (0.50952544949442879485 * fbp->v[0]);
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f7fd fc8c 	bl	8002e50 <__aeabi_f2d>
 8005538:	4a16      	ldr	r2, [pc, #88]	; (8005594 <stepFilterBuLp1+0x74>)
 800553a:	4b17      	ldr	r3, [pc, #92]	; (8005598 <stepFilterBuLp1+0x78>)
 800553c:	f7fc fde0 	bl	8002100 <__aeabi_dmul>
 8005540:	0002      	movs	r2, r0
 8005542:	000b      	movs	r3, r1
 8005544:	0014      	movs	r4, r2
 8005546:	001d      	movs	r5, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	1c18      	adds	r0, r3, #0
 800554e:	f7fd fc7f 	bl	8002e50 <__aeabi_f2d>
 8005552:	4a12      	ldr	r2, [pc, #72]	; (800559c <stepFilterBuLp1+0x7c>)
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <stepFilterBuLp1+0x80>)
 8005556:	f7fc fdd3 	bl	8002100 <__aeabi_dmul>
 800555a:	0002      	movs	r2, r0
 800555c:	000b      	movs	r3, r1
 800555e:	0020      	movs	r0, r4
 8005560:	0029      	movs	r1, r5
 8005562:	f7fb fe8f 	bl	8001284 <__aeabi_dadd>
 8005566:	0002      	movs	r2, r0
 8005568:	000b      	movs	r3, r1
 800556a:	0010      	movs	r0, r2
 800556c:	0019      	movs	r1, r3
 800556e:	f7fd fcb7 	bl	8002ee0 <__aeabi_d2f>
 8005572:	1c02      	adds	r2, r0, #0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	605a      	str	r2, [r3, #4]
	return (fbp->v[0] + fbp->v[1]);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	1c19      	adds	r1, r3, #0
 8005582:	1c10      	adds	r0, r2, #0
 8005584:	f7fa ffe2 	bl	800054c <__aeabi_fadd>
 8005588:	1c03      	adds	r3, r0, #0
}
 800558a:	1c18      	adds	r0, r3, #0
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bdb0      	pop	{r4, r5, r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	5e7c4548 	.word	0x5e7c4548
 8005598:	3fcf63ef 	.word	0x3fcf63ef
 800559c:	50c1dd5c 	.word	0x50c1dd5c
 80055a0:	3fe04e08 	.word	0x3fe04e08

080055a4 <PulseOximeter_begin>:
DCRemover redDCRemover;
FilterBuLp1 lpf;
void *onBeatDetected = NULL;

bool PulseOximeter_begin(PulseOximeterDebuggingMode debuggingMode_)
{
 80055a4:	b5b0      	push	{r4, r5, r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	0002      	movs	r2, r0
 80055ac:	1dfb      	adds	r3, r7, #7
 80055ae:	701a      	strb	r2, [r3, #0]
    debuggingMode = debuggingMode_;
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <PulseOximeter_begin+0x78>)
 80055b2:	1dfa      	adds	r2, r7, #7
 80055b4:	7812      	ldrb	r2, [r2, #0]
 80055b6:	701a      	strb	r2, [r3, #0]

    BML_StatusTypeDef ready = MAX30100_begin();
 80055b8:	250f      	movs	r5, #15
 80055ba:	197c      	adds	r4, r7, r5
 80055bc:	f7ff fbf0 	bl	8004da0 <MAX30100_begin>
 80055c0:	0003      	movs	r3, r0
 80055c2:	7023      	strb	r3, [r4, #0]

    if (ready !=  BML_OK) {
 80055c4:	197b      	adds	r3, r7, r5
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <PulseOximeter_begin+0x3c>
        if (debuggingMode != PULSEOXIMETER_DEBUGGINGMODE_NONE) {
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <PulseOximeter_begin+0x78>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <PulseOximeter_begin+0x38>
            println("Failed to initialize the HRM sensor");
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <PulseOximeter_begin+0x7c>)
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7ff fb5a 	bl	8004c90 <println>
        }
        return false;
 80055dc:	2300      	movs	r3, #0
 80055de:	e019      	b.n	8005614 <PulseOximeter_begin+0x70>
    }

//    MAX30100_setMode(MAX30100_MODE_SPO2_HR);
//    MAX30100_setLedsCurrent(irLedCurrent, (LEDCurrent)redLedCurrentIndex);
	MAX30100_setMode(MAX30100_MODE_SPO2_HR);
 80055e0:	2003      	movs	r0, #3
 80055e2:	f7ff fc7c 	bl	8004ede <MAX30100_setMode>
	MAX30100_setLedsCurrent(MAX30100_LED_CURR_50MA, MAX30100_LED_CURR_27_1MA);
 80055e6:	2108      	movs	r1, #8
 80055e8:	200f      	movs	r0, #15
 80055ea:	f7ff fcce 	bl	8004f8a <MAX30100_setLedsCurrent>
	MAX30100_setSamplingRate(MAX30100_SAMPRATE_100HZ);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7ff fca8 	bl	8004f44 <MAX30100_setSamplingRate>
	MAX30100_setHighresModeEnabled(true);
 80055f4:	2001      	movs	r0, #1
 80055f6:	f7ff fce4 	bl	8004fc2 <MAX30100_setHighresModeEnabled>

    irDCRemover.alpha = DC_REMOVER_ALPHA;
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <PulseOximeter_begin+0x80>)
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <PulseOximeter_begin+0x84>)
 80055fe:	601a      	str	r2, [r3, #0]
    redDCRemover.alpha = DC_REMOVER_ALPHA;
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <PulseOximeter_begin+0x88>)
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <PulseOximeter_begin+0x84>)
 8005604:	601a      	str	r2, [r3, #0]

    pstate = PULSEOXIMETER_STATE_IDLE;
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <PulseOximeter_begin+0x8c>)
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]

    lpf.v[0] = 0;
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <PulseOximeter_begin+0x90>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]

    return true;
 8005612:	2301      	movs	r3, #1
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bdb0      	pop	{r4, r5, r7, pc}
 800561c:	2000045d 	.word	0x2000045d
 8005620:	080091b4 	.word	0x080091b4
 8005624:	20000468 	.word	0x20000468
 8005628:	3f733333 	.word	0x3f733333
 800562c:	20000470 	.word	0x20000470
 8005630:	2000045c 	.word	0x2000045c
 8005634:	20000478 	.word	0x20000478

08005638 <PulseOximeter_update>:

BML_StatusTypeDef PulseOximeter_update()
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
    if(MAX30100_update() != BML_OK){
 800563c:	f7ff fcec 	bl	8005018 <MAX30100_update>
 8005640:	1e03      	subs	r3, r0, #0
 8005642:	d001      	beq.n	8005648 <PulseOximeter_update+0x10>
    	return BML_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e004      	b.n	8005652 <PulseOximeter_update+0x1a>
    }

    PulseOximeter_checkSample();
 8005648:	f000 f830 	bl	80056ac <PulseOximeter_checkSample>
    PulseOximeter_checkCurrentBias();
 800564c:	f000 f8f4 	bl	8005838 <PulseOximeter_checkCurrentBias>

    return BML_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	0018      	movs	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <PulseOximeter_getHeartRate>:

float PulseOximeter_getHeartRate()
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
    return BeatDetector_getRate();
 800565c:	f7ff fda0 	bl	80051a0 <BeatDetector_getRate>
 8005660:	1c03      	adds	r3, r0, #0
}
 8005662:	1c18      	adds	r0, r3, #0
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <PulseOximeter_getSpO2>:

uint8_t PulseOximeter_getSpO2()
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
    return SpO2Calculator_getSpO2();
 800566c:	f000 fa48 	bl	8005b00 <SpO2Calculator_getSpO2>
 8005670:	0003      	movs	r3, r0
}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <PulseOximeter_setIRLedCurrent>:
{
    onBeatDetected = cb;
}

void PulseOximeter_setIRLedCurrent(LEDCurrent irLedNewCurrent)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	0002      	movs	r2, r0
 8005680:	1dfb      	adds	r3, r7, #7
 8005682:	701a      	strb	r2, [r3, #0]
    irLedCurrent = irLedNewCurrent;
 8005684:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <PulseOximeter_setIRLedCurrent+0x2c>)
 8005686:	1dfa      	adds	r2, r7, #7
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	701a      	strb	r2, [r3, #0]
    MAX30100_setLedsCurrent(irLedCurrent, (LEDCurrent)redLedCurrentIndex);
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <PulseOximeter_setIRLedCurrent+0x2c>)
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <PulseOximeter_setIRLedCurrent+0x30>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	0019      	movs	r1, r3
 8005696:	0010      	movs	r0, r2
 8005698:	f7ff fc77 	bl	8004f8a <MAX30100_setLedsCurrent>
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	b002      	add	sp, #8
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000051 	.word	0x20000051
 80056a8:	20000050 	.word	0x20000050

080056ac <PulseOximeter_checkSample>:
{
    MAX30100_resume();
}

void PulseOximeter_checkSample()
{
 80056ac:	b5b0      	push	{r4, r5, r7, lr}
 80056ae:	b0a2      	sub	sp, #136	; 0x88
 80056b0:	af02      	add	r7, sp, #8
    uint16_t rawIRValue, rawRedValue;
    uint8_t str[100] = { 0 };
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2260      	movs	r2, #96	; 0x60
 80056bc:	2100      	movs	r1, #0
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 facc 	bl	8005c5c <memset>
    // Dequeue all available samples, they're properly timed by the HRM
    while (MAX30100_getRawValues(&rawIRValue, &rawRedValue)) {
 80056c4:	e097      	b.n	80057f6 <PulseOximeter_checkSample+0x14a>
        float irACValue = stepDCRemover(&irDCRemover, rawIRValue);
 80056c6:	236a      	movs	r3, #106	; 0x6a
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7fb fd97 	bl	8001200 <__aeabi_ui2f>
 80056d2:	1c02      	adds	r2, r0, #0
 80056d4:	4b50      	ldr	r3, [pc, #320]	; (8005818 <PulseOximeter_checkSample+0x16c>)
 80056d6:	1c11      	adds	r1, r2, #0
 80056d8:	0018      	movs	r0, r3
 80056da:	f7ff fef3 	bl	80054c4 <stepDCRemover>
 80056de:	1c03      	adds	r3, r0, #0
 80056e0:	67fb      	str	r3, [r7, #124]	; 0x7c
        float redACValue = stepDCRemover(&redDCRemover, rawRedValue);
 80056e2:	2368      	movs	r3, #104	; 0x68
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7fb fd89 	bl	8001200 <__aeabi_ui2f>
 80056ee:	1c02      	adds	r2, r0, #0
 80056f0:	4b4a      	ldr	r3, [pc, #296]	; (800581c <PulseOximeter_checkSample+0x170>)
 80056f2:	1c11      	adds	r1, r2, #0
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7ff fee5 	bl	80054c4 <stepDCRemover>
 80056fa:	1c03      	adds	r3, r0, #0
 80056fc:	67bb      	str	r3, [r7, #120]	; 0x78
        // The signal fed to the beat detector is mirrored since the cleanest monotonic spike is below zero
        float filteredPulseValue = stepFilterBuLp1(&lpf, -irACValue);
 80056fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005700:	2280      	movs	r2, #128	; 0x80
 8005702:	0612      	lsls	r2, r2, #24
 8005704:	405a      	eors	r2, r3
 8005706:	4b46      	ldr	r3, [pc, #280]	; (8005820 <PulseOximeter_checkSample+0x174>)
 8005708:	1c11      	adds	r1, r2, #0
 800570a:	0018      	movs	r0, r3
 800570c:	f7ff ff08 	bl	8005520 <stepFilterBuLp1>
 8005710:	1c03      	adds	r3, r0, #0
 8005712:	677b      	str	r3, [r7, #116]	; 0x74
        bool beatDetected = BeatDetector_addSample(filteredPulseValue);
 8005714:	2573      	movs	r5, #115	; 0x73
 8005716:	197c      	adds	r4, r7, r5
 8005718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571a:	1c18      	adds	r0, r3, #0
 800571c:	f7ff fd32 	bl	8005184 <BeatDetector_addSample>
 8005720:	0003      	movs	r3, r0
 8005722:	7023      	strb	r3, [r4, #0]

        if (BeatDetector_getRate() > 0) {
 8005724:	f7ff fd3c 	bl	80051a0 <BeatDetector_getRate>
 8005728:	1c03      	adds	r3, r0, #0
 800572a:	2100      	movs	r1, #0
 800572c:	1c18      	adds	r0, r3, #0
 800572e:	f7fa fee1 	bl	80004f4 <__aeabi_fcmpgt>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d00a      	beq.n	800574c <PulseOximeter_checkSample+0xa0>
        	pstate = PULSEOXIMETER_STATE_DETECTING;
 8005736:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <PulseOximeter_checkSample+0x178>)
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_update(irACValue, redACValue, beatDetected);
 800573c:	197b      	adds	r3, r7, r5
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005744:	1c18      	adds	r0, r3, #0
 8005746:	f000 f905 	bl	8005954 <SpO2Calculator_update>
 800574a:	e008      	b.n	800575e <PulseOximeter_checkSample+0xb2>
        } else if (pstate == PULSEOXIMETER_STATE_DETECTING) {
 800574c:	4b35      	ldr	r3, [pc, #212]	; (8005824 <PulseOximeter_checkSample+0x178>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d104      	bne.n	800575e <PulseOximeter_checkSample+0xb2>
        	pstate = PULSEOXIMETER_STATE_IDLE;
 8005754:	4b33      	ldr	r3, [pc, #204]	; (8005824 <PulseOximeter_checkSample+0x178>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_reset();
 800575a:	f000 f9b3 	bl	8005ac4 <SpO2Calculator_reset>
        }

        switch (debuggingMode) {
 800575e:	4b32      	ldr	r3, [pc, #200]	; (8005828 <PulseOximeter_checkSample+0x17c>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b03      	cmp	r3, #3
 8005764:	d025      	beq.n	80057b2 <PulseOximeter_checkSample+0x106>
 8005766:	dc3a      	bgt.n	80057de <PulseOximeter_checkSample+0x132>
 8005768:	2b01      	cmp	r3, #1
 800576a:	d002      	beq.n	8005772 <PulseOximeter_checkSample+0xc6>
 800576c:	2b02      	cmp	r3, #2
 800576e:	d00d      	beq.n	800578c <PulseOximeter_checkSample+0xe0>
            case PULSEOXIMETER_DEBUGGINGMODE_PULSEDETECT:
            	print("R: %f, %f \n",filteredPulseValue, BeatDetector_getCurrentThreshold());
                break;

            default:
                break;
 8005770:	e035      	b.n	80057de <PulseOximeter_checkSample+0x132>
            	print("R: %d, %d \n",rawIRValue, rawRedValue);
 8005772:	236a      	movs	r3, #106	; 0x6a
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	0019      	movs	r1, r3
 800577a:	2368      	movs	r3, #104	; 0x68
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	001a      	movs	r2, r3
 8005782:	4b2a      	ldr	r3, [pc, #168]	; (800582c <PulseOximeter_checkSample+0x180>)
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff fa5b 	bl	8004c40 <print>
                break;
 800578a:	e029      	b.n	80057e0 <PulseOximeter_checkSample+0x134>
                print("R: %f, %f \n",irACValue, redACValue);
 800578c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800578e:	f7fd fb5f 	bl	8002e50 <__aeabi_f2d>
 8005792:	0004      	movs	r4, r0
 8005794:	000d      	movs	r5, r1
 8005796:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8005798:	f7fd fb5a 	bl	8002e50 <__aeabi_f2d>
 800579c:	0002      	movs	r2, r0
 800579e:	000b      	movs	r3, r1
 80057a0:	4923      	ldr	r1, [pc, #140]	; (8005830 <PulseOximeter_checkSample+0x184>)
 80057a2:	9200      	str	r2, [sp, #0]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	0022      	movs	r2, r4
 80057a8:	002b      	movs	r3, r5
 80057aa:	0008      	movs	r0, r1
 80057ac:	f7ff fa48 	bl	8004c40 <print>
                break;
 80057b0:	e016      	b.n	80057e0 <PulseOximeter_checkSample+0x134>
            	print("R: %f, %f \n",filteredPulseValue, BeatDetector_getCurrentThreshold());
 80057b2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80057b4:	f7fd fb4c 	bl	8002e50 <__aeabi_f2d>
 80057b8:	0004      	movs	r4, r0
 80057ba:	000d      	movs	r5, r1
 80057bc:	f7ff fd18 	bl	80051f0 <BeatDetector_getCurrentThreshold>
 80057c0:	1c03      	adds	r3, r0, #0
 80057c2:	1c18      	adds	r0, r3, #0
 80057c4:	f7fd fb44 	bl	8002e50 <__aeabi_f2d>
 80057c8:	0002      	movs	r2, r0
 80057ca:	000b      	movs	r3, r1
 80057cc:	4918      	ldr	r1, [pc, #96]	; (8005830 <PulseOximeter_checkSample+0x184>)
 80057ce:	9200      	str	r2, [sp, #0]
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	0022      	movs	r2, r4
 80057d4:	002b      	movs	r3, r5
 80057d6:	0008      	movs	r0, r1
 80057d8:	f7ff fa32 	bl	8004c40 <print>
                break;
 80057dc:	e000      	b.n	80057e0 <PulseOximeter_checkSample+0x134>
                break;
 80057de:	46c0      	nop			; (mov r8, r8)
        }

        if (beatDetected && onBeatDetected) {
 80057e0:	2373      	movs	r3, #115	; 0x73
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <PulseOximeter_checkSample+0x14a>
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <PulseOximeter_checkSample+0x188>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <PulseOximeter_checkSample+0x14a>
            void *onBeatDetected = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (MAX30100_getRawValues(&rawIRValue, &rawRedValue)) {
 80057f6:	2368      	movs	r3, #104	; 0x68
 80057f8:	18fa      	adds	r2, r7, r3
 80057fa:	236a      	movs	r3, #106	; 0x6a
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f7ff fc11 	bl	8005028 <MAX30100_getRawValues>
 8005806:	1e03      	subs	r3, r0, #0
 8005808:	d000      	beq.n	800580c <PulseOximeter_checkSample+0x160>
 800580a:	e75c      	b.n	80056c6 <PulseOximeter_checkSample+0x1a>
        }
    }
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	46bd      	mov	sp, r7
 8005812:	b020      	add	sp, #128	; 0x80
 8005814:	bdb0      	pop	{r4, r5, r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	20000468 	.word	0x20000468
 800581c:	20000470 	.word	0x20000470
 8005820:	20000478 	.word	0x20000478
 8005824:	2000045c 	.word	0x2000045c
 8005828:	2000045d 	.word	0x2000045d
 800582c:	080091d8 	.word	0x080091d8
 8005830:	080091e4 	.word	0x080091e4
 8005834:	20000480 	.word	0x20000480

08005838 <PulseOximeter_checkCurrentBias>:

void PulseOximeter_checkCurrentBias()
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
    // Follower that adjusts the red led current in order to have comparable DC baselines between
    // red and IR leds. The numbers are really magic: the less possible to avoid oscillations
    if (HAL_GetTick() - tsLastBiasCheck > CURRENT_ADJUSTMENT_PERIOD_MS) {
 800583e:	f7fd fdad 	bl	800339c <HAL_GetTick>
 8005842:	0002      	movs	r2, r0
 8005844:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <PulseOximeter_checkCurrentBias+0xf8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	23fa      	movs	r3, #250	; 0xfa
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	429a      	cmp	r2, r3
 8005850:	d969      	bls.n	8005926 <PulseOximeter_checkCurrentBias+0xee>
        bool changed = false;
 8005852:	1dfb      	adds	r3, r7, #7
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
        if (getDCW(&irDCRemover) - getDCW(&redDCRemover) > 70000 && redLedCurrentIndex < MAX30100_LED_CURR_50MA) {
 8005858:	4b36      	ldr	r3, [pc, #216]	; (8005934 <PulseOximeter_checkCurrentBias+0xfc>)
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff fe56 	bl	800550c <getDCW>
 8005860:	1c04      	adds	r4, r0, #0
 8005862:	4b35      	ldr	r3, [pc, #212]	; (8005938 <PulseOximeter_checkCurrentBias+0x100>)
 8005864:	0018      	movs	r0, r3
 8005866:	f7ff fe51 	bl	800550c <getDCW>
 800586a:	1c03      	adds	r3, r0, #0
 800586c:	1c19      	adds	r1, r3, #0
 800586e:	1c20      	adds	r0, r4, #0
 8005870:	f7fb faf8 	bl	8000e64 <__aeabi_fsub>
 8005874:	1c03      	adds	r3, r0, #0
 8005876:	4931      	ldr	r1, [pc, #196]	; (800593c <PulseOximeter_checkCurrentBias+0x104>)
 8005878:	1c18      	adds	r0, r3, #0
 800587a:	f7fa fe3b 	bl	80004f4 <__aeabi_fcmpgt>
 800587e:	1e03      	subs	r3, r0, #0
 8005880:	d00d      	beq.n	800589e <PulseOximeter_checkCurrentBias+0x66>
 8005882:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b0e      	cmp	r3, #14
 8005888:	d809      	bhi.n	800589e <PulseOximeter_checkCurrentBias+0x66>
            ++redLedCurrentIndex;
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	b2da      	uxtb	r2, r3
 8005892:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 8005894:	701a      	strb	r2, [r3, #0]
            changed = true;
 8005896:	1dfb      	adds	r3, r7, #7
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e021      	b.n	80058e2 <PulseOximeter_checkCurrentBias+0xaa>
        } else if (getDCW(&redDCRemover) - getDCW(&irDCRemover) > 70000 && redLedCurrentIndex > 0) {
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <PulseOximeter_checkCurrentBias+0x100>)
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7ff fe33 	bl	800550c <getDCW>
 80058a6:	1c04      	adds	r4, r0, #0
 80058a8:	4b22      	ldr	r3, [pc, #136]	; (8005934 <PulseOximeter_checkCurrentBias+0xfc>)
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff fe2e 	bl	800550c <getDCW>
 80058b0:	1c03      	adds	r3, r0, #0
 80058b2:	1c19      	adds	r1, r3, #0
 80058b4:	1c20      	adds	r0, r4, #0
 80058b6:	f7fb fad5 	bl	8000e64 <__aeabi_fsub>
 80058ba:	1c03      	adds	r3, r0, #0
 80058bc:	491f      	ldr	r1, [pc, #124]	; (800593c <PulseOximeter_checkCurrentBias+0x104>)
 80058be:	1c18      	adds	r0, r3, #0
 80058c0:	f7fa fe18 	bl	80004f4 <__aeabi_fcmpgt>
 80058c4:	1e03      	subs	r3, r0, #0
 80058c6:	d00c      	beq.n	80058e2 <PulseOximeter_checkCurrentBias+0xaa>
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <PulseOximeter_checkCurrentBias+0xaa>
            --redLedCurrentIndex;
 80058d0:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 80058da:	701a      	strb	r2, [r3, #0]
            changed = true;
 80058dc:	1dfb      	adds	r3, r7, #7
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
        }

        if (changed) {
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d018      	beq.n	800591c <PulseOximeter_checkCurrentBias+0xe4>
            MAX30100_setLedsCurrent(irLedCurrent, (LEDCurrent)redLedCurrentIndex);
 80058ea:	4b16      	ldr	r3, [pc, #88]	; (8005944 <PulseOximeter_checkCurrentBias+0x10c>)
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	0019      	movs	r1, r3
 80058f4:	0010      	movs	r0, r2
 80058f6:	f7ff fb48 	bl	8004f8a <MAX30100_setLedsCurrent>
            tsLastCurrentAdjustment = HAL_GetTick();
 80058fa:	f7fd fd4f 	bl	800339c <HAL_GetTick>
 80058fe:	0002      	movs	r2, r0
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <PulseOximeter_checkCurrentBias+0x110>)
 8005902:	601a      	str	r2, [r3, #0]

            if (debuggingMode != PULSEOXIMETER_DEBUGGINGMODE_NONE) {
 8005904:	4b11      	ldr	r3, [pc, #68]	; (800594c <PulseOximeter_checkCurrentBias+0x114>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <PulseOximeter_checkCurrentBias+0xe4>
                print("I: %d\n", redLedCurrentIndex);
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <PulseOximeter_checkCurrentBias+0x108>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	001a      	movs	r2, r3
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <PulseOximeter_checkCurrentBias+0x118>)
 8005914:	0011      	movs	r1, r2
 8005916:	0018      	movs	r0, r3
 8005918:	f7ff f992 	bl	8004c40 <print>
            }
        }

        tsLastBiasCheck = HAL_GetTick();
 800591c:	f7fd fd3e 	bl	800339c <HAL_GetTick>
 8005920:	0002      	movs	r2, r0
 8005922:	4b03      	ldr	r3, [pc, #12]	; (8005930 <PulseOximeter_checkCurrentBias+0xf8>)
 8005924:	601a      	str	r2, [r3, #0]
    }
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b003      	add	sp, #12
 800592c:	bd90      	pop	{r4, r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	20000460 	.word	0x20000460
 8005934:	20000468 	.word	0x20000468
 8005938:	20000470 	.word	0x20000470
 800593c:	4788b800 	.word	0x4788b800
 8005940:	20000050 	.word	0x20000050
 8005944:	20000051 	.word	0x20000051
 8005948:	20000464 	.word	0x20000464
 800594c:	2000045d 	.word	0x2000045d
 8005950:	080091f0 	.word	0x080091f0

08005954 <SpO2Calculator_update>:
const uint8_t SpO2Calculator_spO2LUT[43] = {100,100,100,100,99,99,99,99,99,99,98,98,98,98,
                                             98,97,97,97,97,97,97,96,96,96,96,96,96,95,95,
                                             95,95,95,95,94,94,94,94,94,93,93,93,93,93};

void SpO2Calculator_update(float irACValue, float redACValue, bool beatDetected)
{
 8005954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	1dfb      	adds	r3, r7, #7
 8005960:	701a      	strb	r2, [r3, #0]
    irACValueSqSum += irACValue * irACValue;
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7fb f957 	bl	8000c18 <__aeabi_fmul>
 800596a:	1c03      	adds	r3, r0, #0
 800596c:	1c1a      	adds	r2, r3, #0
 800596e:	4b4d      	ldr	r3, [pc, #308]	; (8005aa4 <SpO2Calculator_update+0x150>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	1c19      	adds	r1, r3, #0
 8005974:	1c10      	adds	r0, r2, #0
 8005976:	f7fa fde9 	bl	800054c <__aeabi_fadd>
 800597a:	1c03      	adds	r3, r0, #0
 800597c:	1c1a      	adds	r2, r3, #0
 800597e:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <SpO2Calculator_update+0x150>)
 8005980:	601a      	str	r2, [r3, #0]
    redACValueSqSum += redACValue * redACValue;
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	68b8      	ldr	r0, [r7, #8]
 8005986:	f7fb f947 	bl	8000c18 <__aeabi_fmul>
 800598a:	1c03      	adds	r3, r0, #0
 800598c:	1c1a      	adds	r2, r3, #0
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <SpO2Calculator_update+0x154>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	1c19      	adds	r1, r3, #0
 8005994:	1c10      	adds	r0, r2, #0
 8005996:	f7fa fdd9 	bl	800054c <__aeabi_fadd>
 800599a:	1c03      	adds	r3, r0, #0
 800599c:	1c1a      	adds	r2, r3, #0
 800599e:	4b42      	ldr	r3, [pc, #264]	; (8005aa8 <SpO2Calculator_update+0x154>)
 80059a0:	601a      	str	r2, [r3, #0]
    ++samplesRecorded;
 80059a2:	4b42      	ldr	r3, [pc, #264]	; (8005aac <SpO2Calculator_update+0x158>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	4b40      	ldr	r3, [pc, #256]	; (8005aac <SpO2Calculator_update+0x158>)
 80059aa:	601a      	str	r2, [r3, #0]

    if (beatDetected) {
 80059ac:	1dfb      	adds	r3, r7, #7
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d072      	beq.n	8005a9a <SpO2Calculator_update+0x146>
        ++beatsDetectedNum;
 80059b4:	4b3e      	ldr	r3, [pc, #248]	; (8005ab0 <SpO2Calculator_update+0x15c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	4b3c      	ldr	r3, [pc, #240]	; (8005ab0 <SpO2Calculator_update+0x15c>)
 80059be:	701a      	strb	r2, [r3, #0]
        if (beatsDetectedNum == CALCULATE_EVERY_N_BEATS) {
 80059c0:	4b3b      	ldr	r3, [pc, #236]	; (8005ab0 <SpO2Calculator_update+0x15c>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d168      	bne.n	8005a9a <SpO2Calculator_update+0x146>
            float acSqRatio = 100.0 * log(redACValueSqSum/samplesRecorded) / log(irACValueSqSum/samplesRecorded);
 80059c8:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <SpO2Calculator_update+0x154>)
 80059ca:	681c      	ldr	r4, [r3, #0]
 80059cc:	4b37      	ldr	r3, [pc, #220]	; (8005aac <SpO2Calculator_update+0x158>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7fb fc15 	bl	8001200 <__aeabi_ui2f>
 80059d6:	1c03      	adds	r3, r0, #0
 80059d8:	1c19      	adds	r1, r3, #0
 80059da:	1c20      	adds	r0, r4, #0
 80059dc:	f7fa ff54 	bl	8000888 <__aeabi_fdiv>
 80059e0:	1c03      	adds	r3, r0, #0
 80059e2:	1c18      	adds	r0, r3, #0
 80059e4:	f7fd fa34 	bl	8002e50 <__aeabi_f2d>
 80059e8:	0002      	movs	r2, r0
 80059ea:	000b      	movs	r3, r1
 80059ec:	0010      	movs	r0, r2
 80059ee:	0019      	movs	r1, r3
 80059f0:	f003 f8ee 	bl	8008bd0 <log>
 80059f4:	2200      	movs	r2, #0
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <SpO2Calculator_update+0x160>)
 80059f8:	f7fc fb82 	bl	8002100 <__aeabi_dmul>
 80059fc:	0002      	movs	r2, r0
 80059fe:	000b      	movs	r3, r1
 8005a00:	0014      	movs	r4, r2
 8005a02:	001d      	movs	r5, r3
 8005a04:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <SpO2Calculator_update+0x150>)
 8005a06:	681e      	ldr	r6, [r3, #0]
 8005a08:	4b28      	ldr	r3, [pc, #160]	; (8005aac <SpO2Calculator_update+0x158>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7fb fbf7 	bl	8001200 <__aeabi_ui2f>
 8005a12:	1c03      	adds	r3, r0, #0
 8005a14:	1c19      	adds	r1, r3, #0
 8005a16:	1c30      	adds	r0, r6, #0
 8005a18:	f7fa ff36 	bl	8000888 <__aeabi_fdiv>
 8005a1c:	1c03      	adds	r3, r0, #0
 8005a1e:	1c18      	adds	r0, r3, #0
 8005a20:	f7fd fa16 	bl	8002e50 <__aeabi_f2d>
 8005a24:	0002      	movs	r2, r0
 8005a26:	000b      	movs	r3, r1
 8005a28:	0010      	movs	r0, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	f003 f8d0 	bl	8008bd0 <log>
 8005a30:	0002      	movs	r2, r0
 8005a32:	000b      	movs	r3, r1
 8005a34:	0020      	movs	r0, r4
 8005a36:	0029      	movs	r1, r5
 8005a38:	f7fb ff60 	bl	80018fc <__aeabi_ddiv>
 8005a3c:	0002      	movs	r2, r0
 8005a3e:	000b      	movs	r3, r1
 8005a40:	0010      	movs	r0, r2
 8005a42:	0019      	movs	r1, r3
 8005a44:	f7fd fa4c 	bl	8002ee0 <__aeabi_d2f>
 8005a48:	1c03      	adds	r3, r0, #0
 8005a4a:	613b      	str	r3, [r7, #16]
            uint8_t index = 0;
 8005a4c:	2417      	movs	r4, #23
 8005a4e:	193b      	adds	r3, r7, r4
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]

            if (acSqRatio > 66) {
 8005a54:	4918      	ldr	r1, [pc, #96]	; (8005ab8 <SpO2Calculator_update+0x164>)
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7fa fd4c 	bl	80004f4 <__aeabi_fcmpgt>
 8005a5c:	1e03      	subs	r3, r0, #0
 8005a5e:	d008      	beq.n	8005a72 <SpO2Calculator_update+0x11e>
                index = (uint8_t)acSqRatio - 66;
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7fa fd5b 	bl	800051c <__aeabi_f2uiz>
 8005a66:	0003      	movs	r3, r0
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	193b      	adds	r3, r7, r4
 8005a6c:	3a42      	subs	r2, #66	; 0x42
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e00e      	b.n	8005a90 <SpO2Calculator_update+0x13c>
            } else if (acSqRatio > 50) {
 8005a72:	4912      	ldr	r1, [pc, #72]	; (8005abc <SpO2Calculator_update+0x168>)
 8005a74:	6938      	ldr	r0, [r7, #16]
 8005a76:	f7fa fd3d 	bl	80004f4 <__aeabi_fcmpgt>
 8005a7a:	1e03      	subs	r3, r0, #0
 8005a7c:	d008      	beq.n	8005a90 <SpO2Calculator_update+0x13c>
                index = (uint8_t)acSqRatio - 50;
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f7fa fd4c 	bl	800051c <__aeabi_f2uiz>
 8005a84:	0003      	movs	r3, r0
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	2317      	movs	r3, #23
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	3a32      	subs	r2, #50	; 0x32
 8005a8e:	701a      	strb	r2, [r3, #0]
            }
            SpO2Calculator_reset();
 8005a90:	f000 f818 	bl	8005ac4 <SpO2Calculator_reset>

            spO2 = spO2LUT[index];
 8005a94:	2200      	movs	r2, #0
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <SpO2Calculator_update+0x16c>)
 8005a98:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b007      	add	sp, #28
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	20000484 	.word	0x20000484
 8005aa8:	20000488 	.word	0x20000488
 8005aac:	20000490 	.word	0x20000490
 8005ab0:	2000048c 	.word	0x2000048c
 8005ab4:	40590000 	.word	0x40590000
 8005ab8:	42840000 	.word	0x42840000
 8005abc:	42480000 	.word	0x42480000
 8005ac0:	20000494 	.word	0x20000494

08005ac4 <SpO2Calculator_reset>:

void SpO2Calculator_reset()
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
    samplesRecorded = 0;
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <SpO2Calculator_reset+0x28>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
    redACValueSqSum = 0;
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <SpO2Calculator_reset+0x2c>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
    irACValueSqSum = 0;
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <SpO2Calculator_reset+0x30>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
    beatsDetectedNum = 0;
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <SpO2Calculator_reset+0x34>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
    spO2 = 0;
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <SpO2Calculator_reset+0x38>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20000490 	.word	0x20000490
 8005af0:	20000488 	.word	0x20000488
 8005af4:	20000484 	.word	0x20000484
 8005af8:	2000048c 	.word	0x2000048c
 8005afc:	20000494 	.word	0x20000494

08005b00 <SpO2Calculator_getSpO2>:

uint8_t SpO2Calculator_getSpO2()
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
    return spO2;
 8005b04:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <SpO2Calculator_getSpO2+0x10>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	20000494 	.word	0x20000494

08005b14 <rb_push>:
/**
 * Add an element to the end of the buffer:
 * @returns: 0 if the addition caused overwriting an existing element.
 */
bool                rb_push(rb_data_type value) 
{
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	6018      	str	r0, [r3, #0]
    bool result = 1 ;
 8005b1e:	240f      	movs	r4, #15
 8005b20:	193b      	adds	r3, r7, r4
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]

    w_index = (w_index + 1) % buf_size ;
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <rb_push+0x68>)
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <rb_push+0x6c>)
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	0019      	movs	r1, r3
 8005b32:	0010      	movs	r0, r2
 8005b34:	f7fa fc74 	bl	8000420 <__aeabi_idivmod>
 8005b38:	000b      	movs	r3, r1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <rb_push+0x68>)
 8005b3e:	801a      	strh	r2, [r3, #0]
    if (w_index == r_index) {
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <rb_push+0x68>)
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <rb_push+0x70>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d102      	bne.n	8005b52 <rb_push+0x3e>
        result = 0 ;
 8005b4c:	193b      	adds	r3, r7, r4
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
    }

    ring_buffer[w_index] = value ;
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <rb_push+0x68>)
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <rb_push+0x74>)
 8005b58:	0099      	lsls	r1, r3, #2
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	508b      	str	r3, [r1, r2]
    buf_count++ ;
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <rb_push+0x78>)
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <rb_push+0x78>)
 8005b6a:	801a      	strh	r2, [r3, #0]
    
    return( result ) ;
 8005b6c:	230f      	movs	r3, #15
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	781b      	ldrb	r3, [r3, #0]
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b005      	add	sp, #20
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	200004dc 	.word	0x200004dc
 8005b80:	20000052 	.word	0x20000052
 8005b84:	200004da 	.word	0x200004da
 8005b88:	20000498 	.word	0x20000498
 8005b8c:	200004d8 	.word	0x200004d8

08005b90 <rb_shift>:

/**
 * Removes an element from the beginning of the buffer.
*/
rb_data_type        rb_shift(void) 
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
    rb_data_type result ;
    result = ring_buffer[r_index] ;
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <rb_shift+0x68>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	003b      	movs	r3, r7
 8005b9e:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <rb_shift+0x6c>)
 8005ba0:	0089      	lsls	r1, r1, #2
 8005ba2:	588a      	ldr	r2, [r1, r2]
 8005ba4:	601a      	str	r2, [r3, #0]
    r_index = (r_index + 1) % buf_size ;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <rb_shift+0x68>)
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <rb_shift+0x70>)
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	0010      	movs	r0, r2
 8005bb4:	f7fa fc34 	bl	8000420 <__aeabi_idivmod>
 8005bb8:	000b      	movs	r3, r1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <rb_shift+0x68>)
 8005bbe:	801a      	strh	r2, [r3, #0]
    buf_count-- ;
 8005bc0:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <rb_shift+0x74>)
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <rb_shift+0x74>)
 8005bca:	801a      	strh	r2, [r3, #0]
    return( result ) ;
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	003a      	movs	r2, r7
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	1d3a      	adds	r2, r7, #4
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	8811      	ldrh	r1, [r2, #0]
 8005bda:	0409      	lsls	r1, r1, #16
 8005bdc:	0c09      	lsrs	r1, r1, #16
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	430b      	orrs	r3, r1
 8005be4:	8852      	ldrh	r2, [r2, #2]
 8005be6:	0412      	lsls	r2, r2, #16
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	4313      	orrs	r3, r2
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	200004da 	.word	0x200004da
 8005bfc:	20000498 	.word	0x20000498
 8005c00:	20000052 	.word	0x20000052
 8005c04:	200004d8 	.word	0x200004d8

08005c08 <__errno>:
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <__errno+0x8>)
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	20000054 	.word	0x20000054

08005c14 <__libc_init_array>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	2600      	movs	r6, #0
 8005c18:	4d0c      	ldr	r5, [pc, #48]	; (8005c4c <__libc_init_array+0x38>)
 8005c1a:	4c0d      	ldr	r4, [pc, #52]	; (8005c50 <__libc_init_array+0x3c>)
 8005c1c:	1b64      	subs	r4, r4, r5
 8005c1e:	10a4      	asrs	r4, r4, #2
 8005c20:	42a6      	cmp	r6, r4
 8005c22:	d109      	bne.n	8005c38 <__libc_init_array+0x24>
 8005c24:	2600      	movs	r6, #0
 8005c26:	f003 f9bf 	bl	8008fa8 <_init>
 8005c2a:	4d0a      	ldr	r5, [pc, #40]	; (8005c54 <__libc_init_array+0x40>)
 8005c2c:	4c0a      	ldr	r4, [pc, #40]	; (8005c58 <__libc_init_array+0x44>)
 8005c2e:	1b64      	subs	r4, r4, r5
 8005c30:	10a4      	asrs	r4, r4, #2
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	d105      	bne.n	8005c42 <__libc_init_array+0x2e>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	00b3      	lsls	r3, r6, #2
 8005c3a:	58eb      	ldr	r3, [r5, r3]
 8005c3c:	4798      	blx	r3
 8005c3e:	3601      	adds	r6, #1
 8005c40:	e7ee      	b.n	8005c20 <__libc_init_array+0xc>
 8005c42:	00b3      	lsls	r3, r6, #2
 8005c44:	58eb      	ldr	r3, [r5, r3]
 8005c46:	4798      	blx	r3
 8005c48:	3601      	adds	r6, #1
 8005c4a:	e7f2      	b.n	8005c32 <__libc_init_array+0x1e>
 8005c4c:	0800976c 	.word	0x0800976c
 8005c50:	0800976c 	.word	0x0800976c
 8005c54:	0800976c 	.word	0x0800976c
 8005c58:	08009770 	.word	0x08009770

08005c5c <memset>:
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	1882      	adds	r2, r0, r2
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d100      	bne.n	8005c66 <memset+0xa>
 8005c64:	4770      	bx	lr
 8005c66:	7019      	strb	r1, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	e7f9      	b.n	8005c60 <memset+0x4>

08005c6c <__cvt>:
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6e:	001e      	movs	r6, r3
 8005c70:	2300      	movs	r3, #0
 8005c72:	0014      	movs	r4, r2
 8005c74:	b08b      	sub	sp, #44	; 0x2c
 8005c76:	429e      	cmp	r6, r3
 8005c78:	da04      	bge.n	8005c84 <__cvt+0x18>
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	0609      	lsls	r1, r1, #24
 8005c7e:	1873      	adds	r3, r6, r1
 8005c80:	001e      	movs	r6, r3
 8005c82:	232d      	movs	r3, #45	; 0x2d
 8005c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c86:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c88:	7013      	strb	r3, [r2, #0]
 8005c8a:	2320      	movs	r3, #32
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	439f      	bics	r7, r3
 8005c90:	2f46      	cmp	r7, #70	; 0x46
 8005c92:	d007      	beq.n	8005ca4 <__cvt+0x38>
 8005c94:	003b      	movs	r3, r7
 8005c96:	3b45      	subs	r3, #69	; 0x45
 8005c98:	4259      	negs	r1, r3
 8005c9a:	414b      	adcs	r3, r1
 8005c9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	18cb      	adds	r3, r1, r3
 8005ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ca4:	ab09      	add	r3, sp, #36	; 0x24
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	ab08      	add	r3, sp, #32
 8005caa:	9303      	str	r3, [sp, #12]
 8005cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cae:	9200      	str	r2, [sp, #0]
 8005cb0:	9302      	str	r3, [sp, #8]
 8005cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cb4:	0022      	movs	r2, r4
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	0033      	movs	r3, r6
 8005cba:	f000 fd09 	bl	80066d0 <_dtoa_r>
 8005cbe:	0005      	movs	r5, r0
 8005cc0:	2f47      	cmp	r7, #71	; 0x47
 8005cc2:	d102      	bne.n	8005cca <__cvt+0x5e>
 8005cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cc6:	07db      	lsls	r3, r3, #31
 8005cc8:	d528      	bpl.n	8005d1c <__cvt+0xb0>
 8005cca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ccc:	18eb      	adds	r3, r5, r3
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	2f46      	cmp	r7, #70	; 0x46
 8005cd2:	d114      	bne.n	8005cfe <__cvt+0x92>
 8005cd4:	782b      	ldrb	r3, [r5, #0]
 8005cd6:	2b30      	cmp	r3, #48	; 0x30
 8005cd8:	d10c      	bne.n	8005cf4 <__cvt+0x88>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2300      	movs	r3, #0
 8005cde:	0020      	movs	r0, r4
 8005ce0:	0031      	movs	r1, r6
 8005ce2:	f7fa fbb3 	bl	800044c <__aeabi_dcmpeq>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d104      	bne.n	8005cf4 <__cvt+0x88>
 8005cea:	2301      	movs	r3, #1
 8005cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cf6:	9a07      	ldr	r2, [sp, #28]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	9307      	str	r3, [sp, #28]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2300      	movs	r3, #0
 8005d02:	0020      	movs	r0, r4
 8005d04:	0031      	movs	r1, r6
 8005d06:	f7fa fba1 	bl	800044c <__aeabi_dcmpeq>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d001      	beq.n	8005d12 <__cvt+0xa6>
 8005d0e:	9b07      	ldr	r3, [sp, #28]
 8005d10:	9309      	str	r3, [sp, #36]	; 0x24
 8005d12:	2230      	movs	r2, #48	; 0x30
 8005d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d16:	9907      	ldr	r1, [sp, #28]
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	d306      	bcc.n	8005d2a <__cvt+0xbe>
 8005d1c:	0028      	movs	r0, r5
 8005d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d22:	1b5b      	subs	r3, r3, r5
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	b00b      	add	sp, #44	; 0x2c
 8005d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2a:	1c59      	adds	r1, r3, #1
 8005d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e7f0      	b.n	8005d14 <__cvt+0xa8>

08005d32 <__exponent>:
 8005d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d34:	1c83      	adds	r3, r0, #2
 8005d36:	b087      	sub	sp, #28
 8005d38:	9303      	str	r3, [sp, #12]
 8005d3a:	0005      	movs	r5, r0
 8005d3c:	000c      	movs	r4, r1
 8005d3e:	232b      	movs	r3, #43	; 0x2b
 8005d40:	7002      	strb	r2, [r0, #0]
 8005d42:	2900      	cmp	r1, #0
 8005d44:	da01      	bge.n	8005d4a <__exponent+0x18>
 8005d46:	424c      	negs	r4, r1
 8005d48:	3302      	adds	r3, #2
 8005d4a:	706b      	strb	r3, [r5, #1]
 8005d4c:	2c09      	cmp	r4, #9
 8005d4e:	dd31      	ble.n	8005db4 <__exponent+0x82>
 8005d50:	270a      	movs	r7, #10
 8005d52:	ab04      	add	r3, sp, #16
 8005d54:	1dde      	adds	r6, r3, #7
 8005d56:	0020      	movs	r0, r4
 8005d58:	0039      	movs	r1, r7
 8005d5a:	9601      	str	r6, [sp, #4]
 8005d5c:	f7fa fb60 	bl	8000420 <__aeabi_idivmod>
 8005d60:	3e01      	subs	r6, #1
 8005d62:	3130      	adds	r1, #48	; 0x30
 8005d64:	0020      	movs	r0, r4
 8005d66:	7031      	strb	r1, [r6, #0]
 8005d68:	0039      	movs	r1, r7
 8005d6a:	9402      	str	r4, [sp, #8]
 8005d6c:	f7fa fa72 	bl	8000254 <__divsi3>
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	0004      	movs	r4, r0
 8005d74:	2b63      	cmp	r3, #99	; 0x63
 8005d76:	dcee      	bgt.n	8005d56 <__exponent+0x24>
 8005d78:	9b01      	ldr	r3, [sp, #4]
 8005d7a:	3430      	adds	r4, #48	; 0x30
 8005d7c:	1e9a      	subs	r2, r3, #2
 8005d7e:	0013      	movs	r3, r2
 8005d80:	9903      	ldr	r1, [sp, #12]
 8005d82:	7014      	strb	r4, [r2, #0]
 8005d84:	a804      	add	r0, sp, #16
 8005d86:	3007      	adds	r0, #7
 8005d88:	4298      	cmp	r0, r3
 8005d8a:	d80e      	bhi.n	8005daa <__exponent+0x78>
 8005d8c:	ab04      	add	r3, sp, #16
 8005d8e:	3307      	adds	r3, #7
 8005d90:	2000      	movs	r0, #0
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d804      	bhi.n	8005da0 <__exponent+0x6e>
 8005d96:	ab04      	add	r3, sp, #16
 8005d98:	3009      	adds	r0, #9
 8005d9a:	18c0      	adds	r0, r0, r3
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	1ac0      	subs	r0, r0, r3
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	1818      	adds	r0, r3, r0
 8005da4:	1b40      	subs	r0, r0, r5
 8005da6:	b007      	add	sp, #28
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005daa:	7818      	ldrb	r0, [r3, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	7008      	strb	r0, [r1, #0]
 8005db0:	3101      	adds	r1, #1
 8005db2:	e7e7      	b.n	8005d84 <__exponent+0x52>
 8005db4:	2330      	movs	r3, #48	; 0x30
 8005db6:	18e4      	adds	r4, r4, r3
 8005db8:	70ab      	strb	r3, [r5, #2]
 8005dba:	1d28      	adds	r0, r5, #4
 8005dbc:	70ec      	strb	r4, [r5, #3]
 8005dbe:	e7f1      	b.n	8005da4 <__exponent+0x72>

08005dc0 <_printf_float>:
 8005dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc2:	b095      	sub	sp, #84	; 0x54
 8005dc4:	000c      	movs	r4, r1
 8005dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc8:	001e      	movs	r6, r3
 8005dca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005dcc:	0007      	movs	r7, r0
 8005dce:	f001 fa99 	bl	8007304 <_localeconv_r>
 8005dd2:	6803      	ldr	r3, [r0, #0]
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8005dd8:	f7fa f996 	bl	8000108 <strlen>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9312      	str	r3, [sp, #72]	; 0x48
 8005de0:	7e23      	ldrb	r3, [r4, #24]
 8005de2:	2207      	movs	r2, #7
 8005de4:	930a      	str	r3, [sp, #40]	; 0x28
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	900e      	str	r0, [sp, #56]	; 0x38
 8005dea:	930d      	str	r3, [sp, #52]	; 0x34
 8005dec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	05c9      	lsls	r1, r1, #23
 8005df2:	d547      	bpl.n	8005e84 <_printf_float+0xc4>
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	4393      	bics	r3, r2
 8005df8:	001a      	movs	r2, r3
 8005dfa:	3208      	adds	r2, #8
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	64a2      	str	r2, [r4, #72]	; 0x48
 8005e04:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005e06:	2201      	movs	r2, #1
 8005e08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e0a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e0e:	006b      	lsls	r3, r5, #1
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e16:	4ba7      	ldr	r3, [pc, #668]	; (80060b4 <_printf_float+0x2f4>)
 8005e18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e1a:	4252      	negs	r2, r2
 8005e1c:	f7fc ff6e 	bl	8002cfc <__aeabi_dcmpun>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d131      	bne.n	8005e88 <_printf_float+0xc8>
 8005e24:	2201      	movs	r2, #1
 8005e26:	4ba3      	ldr	r3, [pc, #652]	; (80060b4 <_printf_float+0x2f4>)
 8005e28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e2c:	4252      	negs	r2, r2
 8005e2e:	f7fa fb1d 	bl	800046c <__aeabi_dcmple>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d128      	bne.n	8005e88 <_printf_float+0xc8>
 8005e36:	2200      	movs	r2, #0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	0029      	movs	r1, r5
 8005e3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e3e:	f7fa fb0b 	bl	8000458 <__aeabi_dcmplt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d003      	beq.n	8005e4e <_printf_float+0x8e>
 8005e46:	0023      	movs	r3, r4
 8005e48:	222d      	movs	r2, #45	; 0x2d
 8005e4a:	3343      	adds	r3, #67	; 0x43
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	4d99      	ldr	r5, [pc, #612]	; (80060b8 <_printf_float+0x2f8>)
 8005e52:	2b47      	cmp	r3, #71	; 0x47
 8005e54:	d900      	bls.n	8005e58 <_printf_float+0x98>
 8005e56:	4d99      	ldr	r5, [pc, #612]	; (80060bc <_printf_float+0x2fc>)
 8005e58:	2303      	movs	r3, #3
 8005e5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	439a      	bics	r2, r3
 8005e62:	2300      	movs	r3, #0
 8005e64:	6022      	str	r2, [r4, #0]
 8005e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6a:	0021      	movs	r1, r4
 8005e6c:	0038      	movs	r0, r7
 8005e6e:	9600      	str	r6, [sp, #0]
 8005e70:	aa13      	add	r2, sp, #76	; 0x4c
 8005e72:	f000 f9e7 	bl	8006244 <_printf_common>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d000      	beq.n	8005e7c <_printf_float+0xbc>
 8005e7a:	e0a2      	b.n	8005fc2 <_printf_float+0x202>
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	4240      	negs	r0, r0
 8005e80:	b015      	add	sp, #84	; 0x54
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e84:	3307      	adds	r3, #7
 8005e86:	e7b6      	b.n	8005df6 <_printf_float+0x36>
 8005e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e8a:	002b      	movs	r3, r5
 8005e8c:	0010      	movs	r0, r2
 8005e8e:	0029      	movs	r1, r5
 8005e90:	f7fc ff34 	bl	8002cfc <__aeabi_dcmpun>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d00b      	beq.n	8005eb0 <_printf_float+0xf0>
 8005e98:	2d00      	cmp	r5, #0
 8005e9a:	da03      	bge.n	8005ea4 <_printf_float+0xe4>
 8005e9c:	0023      	movs	r3, r4
 8005e9e:	222d      	movs	r2, #45	; 0x2d
 8005ea0:	3343      	adds	r3, #67	; 0x43
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea6:	4d86      	ldr	r5, [pc, #536]	; (80060c0 <_printf_float+0x300>)
 8005ea8:	2b47      	cmp	r3, #71	; 0x47
 8005eaa:	d9d5      	bls.n	8005e58 <_printf_float+0x98>
 8005eac:	4d85      	ldr	r5, [pc, #532]	; (80060c4 <_printf_float+0x304>)
 8005eae:	e7d3      	b.n	8005e58 <_printf_float+0x98>
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	4391      	bics	r1, r2
 8005eb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	d149      	bne.n	8005f52 <_printf_float+0x192>
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	9206      	str	r2, [sp, #24]
 8005ece:	aa12      	add	r2, sp, #72	; 0x48
 8005ed0:	9205      	str	r2, [sp, #20]
 8005ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed4:	a908      	add	r1, sp, #32
 8005ed6:	9204      	str	r2, [sp, #16]
 8005ed8:	aa11      	add	r2, sp, #68	; 0x44
 8005eda:	9203      	str	r2, [sp, #12]
 8005edc:	2223      	movs	r2, #35	; 0x23
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	1852      	adds	r2, r2, r1
 8005ee6:	9202      	str	r2, [sp, #8]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	0038      	movs	r0, r7
 8005eec:	002b      	movs	r3, r5
 8005eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ef0:	f7ff febc 	bl	8005c6c <__cvt>
 8005ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ef6:	0005      	movs	r5, r0
 8005ef8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005efa:	2b47      	cmp	r3, #71	; 0x47
 8005efc:	d108      	bne.n	8005f10 <_printf_float+0x150>
 8005efe:	1ccb      	adds	r3, r1, #3
 8005f00:	db02      	blt.n	8005f08 <_printf_float+0x148>
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	4299      	cmp	r1, r3
 8005f06:	dd48      	ble.n	8005f9a <_printf_float+0x1da>
 8005f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f0a:	3b02      	subs	r3, #2
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f12:	2b65      	cmp	r3, #101	; 0x65
 8005f14:	d824      	bhi.n	8005f60 <_printf_float+0x1a0>
 8005f16:	0020      	movs	r0, r4
 8005f18:	001a      	movs	r2, r3
 8005f1a:	3901      	subs	r1, #1
 8005f1c:	3050      	adds	r0, #80	; 0x50
 8005f1e:	9111      	str	r1, [sp, #68]	; 0x44
 8005f20:	f7ff ff07 	bl	8005d32 <__exponent>
 8005f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f26:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f28:	1813      	adds	r3, r2, r0
 8005f2a:	6123      	str	r3, [r4, #16]
 8005f2c:	2a01      	cmp	r2, #1
 8005f2e:	dc02      	bgt.n	8005f36 <_printf_float+0x176>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	07d2      	lsls	r2, r2, #31
 8005f34:	d501      	bpl.n	8005f3a <_printf_float+0x17a>
 8005f36:	3301      	adds	r3, #1
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	2323      	movs	r3, #35	; 0x23
 8005f3c:	aa08      	add	r2, sp, #32
 8005f3e:	189b      	adds	r3, r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d100      	bne.n	8005f48 <_printf_float+0x188>
 8005f46:	e78f      	b.n	8005e68 <_printf_float+0xa8>
 8005f48:	0023      	movs	r3, r4
 8005f4a:	222d      	movs	r2, #45	; 0x2d
 8005f4c:	3343      	adds	r3, #67	; 0x43
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e78a      	b.n	8005e68 <_printf_float+0xa8>
 8005f52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f54:	2a47      	cmp	r2, #71	; 0x47
 8005f56:	d1b4      	bne.n	8005ec2 <_printf_float+0x102>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1b2      	bne.n	8005ec2 <_printf_float+0x102>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	e7af      	b.n	8005ec0 <_printf_float+0x100>
 8005f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f62:	2b66      	cmp	r3, #102	; 0x66
 8005f64:	d11b      	bne.n	8005f9e <_printf_float+0x1de>
 8005f66:	6863      	ldr	r3, [r4, #4]
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	dd0d      	ble.n	8005f88 <_printf_float+0x1c8>
 8005f6c:	6121      	str	r1, [r4, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <_printf_float+0x1b8>
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	07d2      	lsls	r2, r2, #31
 8005f76:	d502      	bpl.n	8005f7e <_printf_float+0x1be>
 8005f78:	3301      	adds	r3, #1
 8005f7a:	1859      	adds	r1, r3, r1
 8005f7c:	6121      	str	r1, [r4, #16]
 8005f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f80:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f82:	2300      	movs	r3, #0
 8005f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f86:	e7d8      	b.n	8005f3a <_printf_float+0x17a>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <_printf_float+0x1d4>
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	6821      	ldr	r1, [r4, #0]
 8005f90:	4211      	tst	r1, r2
 8005f92:	d000      	beq.n	8005f96 <_printf_float+0x1d6>
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	6122      	str	r2, [r4, #16]
 8005f98:	e7f1      	b.n	8005f7e <_printf_float+0x1be>
 8005f9a:	2367      	movs	r3, #103	; 0x67
 8005f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	db06      	blt.n	8005fb4 <_printf_float+0x1f4>
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	07d2      	lsls	r2, r2, #31
 8005fac:	d5e7      	bpl.n	8005f7e <_printf_float+0x1be>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	e7e4      	b.n	8005f7e <_printf_float+0x1be>
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dc01      	bgt.n	8005fbe <_printf_float+0x1fe>
 8005fba:	1849      	adds	r1, r1, r1
 8005fbc:	1ac9      	subs	r1, r1, r3
 8005fbe:	1852      	adds	r2, r2, r1
 8005fc0:	e7e9      	b.n	8005f96 <_printf_float+0x1d6>
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	0553      	lsls	r3, r2, #21
 8005fc6:	d407      	bmi.n	8005fd8 <_printf_float+0x218>
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	002a      	movs	r2, r5
 8005fcc:	0038      	movs	r0, r7
 8005fce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd0:	47b0      	blx	r6
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	d128      	bne.n	8006028 <_printf_float+0x268>
 8005fd6:	e751      	b.n	8005e7c <_printf_float+0xbc>
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fda:	2b65      	cmp	r3, #101	; 0x65
 8005fdc:	d800      	bhi.n	8005fe0 <_printf_float+0x220>
 8005fde:	e0e1      	b.n	80061a4 <_printf_float+0x3e4>
 8005fe0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005fe2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f7fa fa30 	bl	800044c <__aeabi_dcmpeq>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d031      	beq.n	8006054 <_printf_float+0x294>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	0038      	movs	r0, r7
 8005ff4:	4a34      	ldr	r2, [pc, #208]	; (80060c8 <_printf_float+0x308>)
 8005ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ff8:	47b0      	blx	r6
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d100      	bne.n	8006000 <_printf_float+0x240>
 8005ffe:	e73d      	b.n	8005e7c <_printf_float+0xbc>
 8006000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006002:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006004:	4293      	cmp	r3, r2
 8006006:	db02      	blt.n	800600e <_printf_float+0x24e>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d50c      	bpl.n	8006028 <_printf_float+0x268>
 800600e:	0038      	movs	r0, r7
 8006010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006016:	47b0      	blx	r6
 8006018:	2500      	movs	r5, #0
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	d100      	bne.n	8006020 <_printf_float+0x260>
 800601e:	e72d      	b.n	8005e7c <_printf_float+0xbc>
 8006020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006022:	3b01      	subs	r3, #1
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc0a      	bgt.n	800603e <_printf_float+0x27e>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	079b      	lsls	r3, r3, #30
 800602c:	d500      	bpl.n	8006030 <_printf_float+0x270>
 800602e:	e106      	b.n	800623e <_printf_float+0x47e>
 8006030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006032:	68e0      	ldr	r0, [r4, #12]
 8006034:	4298      	cmp	r0, r3
 8006036:	db00      	blt.n	800603a <_printf_float+0x27a>
 8006038:	e722      	b.n	8005e80 <_printf_float+0xc0>
 800603a:	0018      	movs	r0, r3
 800603c:	e720      	b.n	8005e80 <_printf_float+0xc0>
 800603e:	0022      	movs	r2, r4
 8006040:	2301      	movs	r3, #1
 8006042:	0038      	movs	r0, r7
 8006044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006046:	321a      	adds	r2, #26
 8006048:	47b0      	blx	r6
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d100      	bne.n	8006050 <_printf_float+0x290>
 800604e:	e715      	b.n	8005e7c <_printf_float+0xbc>
 8006050:	3501      	adds	r5, #1
 8006052:	e7e5      	b.n	8006020 <_printf_float+0x260>
 8006054:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006056:	2b00      	cmp	r3, #0
 8006058:	dc38      	bgt.n	80060cc <_printf_float+0x30c>
 800605a:	2301      	movs	r3, #1
 800605c:	0038      	movs	r0, r7
 800605e:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <_printf_float+0x308>)
 8006060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006062:	47b0      	blx	r6
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d100      	bne.n	800606a <_printf_float+0x2aa>
 8006068:	e708      	b.n	8005e7c <_printf_float+0xbc>
 800606a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800606c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800606e:	4313      	orrs	r3, r2
 8006070:	d102      	bne.n	8006078 <_printf_float+0x2b8>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	07db      	lsls	r3, r3, #31
 8006076:	d5d7      	bpl.n	8006028 <_printf_float+0x268>
 8006078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800607a:	0038      	movs	r0, r7
 800607c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800607e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006080:	47b0      	blx	r6
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d100      	bne.n	8006088 <_printf_float+0x2c8>
 8006086:	e6f9      	b.n	8005e7c <_printf_float+0xbc>
 8006088:	2300      	movs	r3, #0
 800608a:	930a      	str	r3, [sp, #40]	; 0x28
 800608c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800608e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006090:	425b      	negs	r3, r3
 8006092:	4293      	cmp	r3, r2
 8006094:	dc01      	bgt.n	800609a <_printf_float+0x2da>
 8006096:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006098:	e797      	b.n	8005fca <_printf_float+0x20a>
 800609a:	0022      	movs	r2, r4
 800609c:	2301      	movs	r3, #1
 800609e:	0038      	movs	r0, r7
 80060a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060a2:	321a      	adds	r2, #26
 80060a4:	47b0      	blx	r6
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d100      	bne.n	80060ac <_printf_float+0x2ec>
 80060aa:	e6e7      	b.n	8005e7c <_printf_float+0xbc>
 80060ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ae:	3301      	adds	r3, #1
 80060b0:	e7eb      	b.n	800608a <_printf_float+0x2ca>
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	7fefffff 	.word	0x7fefffff
 80060b8:	08009398 	.word	0x08009398
 80060bc:	0800939c 	.word	0x0800939c
 80060c0:	080093a0 	.word	0x080093a0
 80060c4:	080093a4 	.word	0x080093a4
 80060c8:	080093a8 	.word	0x080093a8
 80060cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060d0:	920a      	str	r2, [sp, #40]	; 0x28
 80060d2:	429a      	cmp	r2, r3
 80060d4:	dd00      	ble.n	80060d8 <_printf_float+0x318>
 80060d6:	930a      	str	r3, [sp, #40]	; 0x28
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dc3c      	bgt.n	8006158 <_printf_float+0x398>
 80060de:	2300      	movs	r3, #0
 80060e0:	930d      	str	r3, [sp, #52]	; 0x34
 80060e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e4:	43db      	mvns	r3, r3
 80060e6:	17db      	asrs	r3, r3, #31
 80060e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80060f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f2:	4013      	ands	r3, r2
 80060f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060fa:	4293      	cmp	r3, r2
 80060fc:	dc34      	bgt.n	8006168 <_printf_float+0x3a8>
 80060fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006100:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006102:	4293      	cmp	r3, r2
 8006104:	db3d      	blt.n	8006182 <_printf_float+0x3c2>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	07db      	lsls	r3, r3, #31
 800610a:	d43a      	bmi.n	8006182 <_printf_float+0x3c2>
 800610c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800610e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006110:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	1a52      	subs	r2, r2, r1
 8006116:	920a      	str	r2, [sp, #40]	; 0x28
 8006118:	429a      	cmp	r2, r3
 800611a:	dd00      	ble.n	800611e <_printf_float+0x35e>
 800611c:	930a      	str	r3, [sp, #40]	; 0x28
 800611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	dc36      	bgt.n	8006192 <_printf_float+0x3d2>
 8006124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006126:	2500      	movs	r5, #0
 8006128:	43db      	mvns	r3, r3
 800612a:	17db      	asrs	r3, r3, #31
 800612c:	930b      	str	r3, [sp, #44]	; 0x2c
 800612e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006138:	400a      	ands	r2, r1
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	42ab      	cmp	r3, r5
 800613e:	dc00      	bgt.n	8006142 <_printf_float+0x382>
 8006140:	e772      	b.n	8006028 <_printf_float+0x268>
 8006142:	0022      	movs	r2, r4
 8006144:	2301      	movs	r3, #1
 8006146:	0038      	movs	r0, r7
 8006148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614a:	321a      	adds	r2, #26
 800614c:	47b0      	blx	r6
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d100      	bne.n	8006154 <_printf_float+0x394>
 8006152:	e693      	b.n	8005e7c <_printf_float+0xbc>
 8006154:	3501      	adds	r5, #1
 8006156:	e7ea      	b.n	800612e <_printf_float+0x36e>
 8006158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615a:	002a      	movs	r2, r5
 800615c:	0038      	movs	r0, r7
 800615e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006160:	47b0      	blx	r6
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d1bb      	bne.n	80060de <_printf_float+0x31e>
 8006166:	e689      	b.n	8005e7c <_printf_float+0xbc>
 8006168:	0022      	movs	r2, r4
 800616a:	2301      	movs	r3, #1
 800616c:	0038      	movs	r0, r7
 800616e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006170:	321a      	adds	r2, #26
 8006172:	47b0      	blx	r6
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d100      	bne.n	800617a <_printf_float+0x3ba>
 8006178:	e680      	b.n	8005e7c <_printf_float+0xbc>
 800617a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800617c:	3301      	adds	r3, #1
 800617e:	930d      	str	r3, [sp, #52]	; 0x34
 8006180:	e7b3      	b.n	80060ea <_printf_float+0x32a>
 8006182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006184:	0038      	movs	r0, r7
 8006186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800618a:	47b0      	blx	r6
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d1bd      	bne.n	800610c <_printf_float+0x34c>
 8006190:	e674      	b.n	8005e7c <_printf_float+0xbc>
 8006192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006194:	0038      	movs	r0, r7
 8006196:	18ea      	adds	r2, r5, r3
 8006198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800619a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800619c:	47b0      	blx	r6
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	d1c0      	bne.n	8006124 <_printf_float+0x364>
 80061a2:	e66b      	b.n	8005e7c <_printf_float+0xbc>
 80061a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	dc02      	bgt.n	80061b0 <_printf_float+0x3f0>
 80061aa:	2301      	movs	r3, #1
 80061ac:	421a      	tst	r2, r3
 80061ae:	d034      	beq.n	800621a <_printf_float+0x45a>
 80061b0:	2301      	movs	r3, #1
 80061b2:	002a      	movs	r2, r5
 80061b4:	0038      	movs	r0, r7
 80061b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061b8:	47b0      	blx	r6
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d100      	bne.n	80061c0 <_printf_float+0x400>
 80061be:	e65d      	b.n	8005e7c <_printf_float+0xbc>
 80061c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c2:	0038      	movs	r0, r7
 80061c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061c8:	47b0      	blx	r6
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	d100      	bne.n	80061d0 <_printf_float+0x410>
 80061ce:	e655      	b.n	8005e7c <_printf_float+0xbc>
 80061d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80061d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80061d4:	2200      	movs	r2, #0
 80061d6:	2300      	movs	r3, #0
 80061d8:	f7fa f938 	bl	800044c <__aeabi_dcmpeq>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d11a      	bne.n	8006216 <_printf_float+0x456>
 80061e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061e2:	1c6a      	adds	r2, r5, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	0038      	movs	r0, r7
 80061e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ea:	47b0      	blx	r6
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d10e      	bne.n	800620e <_printf_float+0x44e>
 80061f0:	e644      	b.n	8005e7c <_printf_float+0xbc>
 80061f2:	0022      	movs	r2, r4
 80061f4:	2301      	movs	r3, #1
 80061f6:	0038      	movs	r0, r7
 80061f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061fa:	321a      	adds	r2, #26
 80061fc:	47b0      	blx	r6
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d100      	bne.n	8006204 <_printf_float+0x444>
 8006202:	e63b      	b.n	8005e7c <_printf_float+0xbc>
 8006204:	3501      	adds	r5, #1
 8006206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006208:	3b01      	subs	r3, #1
 800620a:	42ab      	cmp	r3, r5
 800620c:	dcf1      	bgt.n	80061f2 <_printf_float+0x432>
 800620e:	0022      	movs	r2, r4
 8006210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006212:	3250      	adds	r2, #80	; 0x50
 8006214:	e6da      	b.n	8005fcc <_printf_float+0x20c>
 8006216:	2500      	movs	r5, #0
 8006218:	e7f5      	b.n	8006206 <_printf_float+0x446>
 800621a:	002a      	movs	r2, r5
 800621c:	e7e3      	b.n	80061e6 <_printf_float+0x426>
 800621e:	0022      	movs	r2, r4
 8006220:	2301      	movs	r3, #1
 8006222:	0038      	movs	r0, r7
 8006224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006226:	3219      	adds	r2, #25
 8006228:	47b0      	blx	r6
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	d100      	bne.n	8006230 <_printf_float+0x470>
 800622e:	e625      	b.n	8005e7c <_printf_float+0xbc>
 8006230:	3501      	adds	r5, #1
 8006232:	68e3      	ldr	r3, [r4, #12]
 8006234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	42ab      	cmp	r3, r5
 800623a:	dcf0      	bgt.n	800621e <_printf_float+0x45e>
 800623c:	e6f8      	b.n	8006030 <_printf_float+0x270>
 800623e:	2500      	movs	r5, #0
 8006240:	e7f7      	b.n	8006232 <_printf_float+0x472>
 8006242:	46c0      	nop			; (mov r8, r8)

08006244 <_printf_common>:
 8006244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006246:	0015      	movs	r5, r2
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	688a      	ldr	r2, [r1, #8]
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	000c      	movs	r4, r1
 8006250:	9000      	str	r0, [sp, #0]
 8006252:	4293      	cmp	r3, r2
 8006254:	da00      	bge.n	8006258 <_printf_common+0x14>
 8006256:	0013      	movs	r3, r2
 8006258:	0022      	movs	r2, r4
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	3243      	adds	r2, #67	; 0x43
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	2a00      	cmp	r2, #0
 8006262:	d001      	beq.n	8006268 <_printf_common+0x24>
 8006264:	3301      	adds	r3, #1
 8006266:	602b      	str	r3, [r5, #0]
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	069b      	lsls	r3, r3, #26
 800626c:	d502      	bpl.n	8006274 <_printf_common+0x30>
 800626e:	682b      	ldr	r3, [r5, #0]
 8006270:	3302      	adds	r3, #2
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	2306      	movs	r3, #6
 8006278:	0017      	movs	r7, r2
 800627a:	401f      	ands	r7, r3
 800627c:	421a      	tst	r2, r3
 800627e:	d027      	beq.n	80062d0 <_printf_common+0x8c>
 8006280:	0023      	movs	r3, r4
 8006282:	3343      	adds	r3, #67	; 0x43
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	1e5a      	subs	r2, r3, #1
 8006288:	4193      	sbcs	r3, r2
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	0692      	lsls	r2, r2, #26
 800628e:	d430      	bmi.n	80062f2 <_printf_common+0xae>
 8006290:	0022      	movs	r2, r4
 8006292:	9901      	ldr	r1, [sp, #4]
 8006294:	9800      	ldr	r0, [sp, #0]
 8006296:	9e08      	ldr	r6, [sp, #32]
 8006298:	3243      	adds	r2, #67	; 0x43
 800629a:	47b0      	blx	r6
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d025      	beq.n	80062ec <_printf_common+0xa8>
 80062a0:	2306      	movs	r3, #6
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	682a      	ldr	r2, [r5, #0]
 80062a6:	68e1      	ldr	r1, [r4, #12]
 80062a8:	2500      	movs	r5, #0
 80062aa:	4003      	ands	r3, r0
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d103      	bne.n	80062b8 <_printf_common+0x74>
 80062b0:	1a8d      	subs	r5, r1, r2
 80062b2:	43eb      	mvns	r3, r5
 80062b4:	17db      	asrs	r3, r3, #31
 80062b6:	401d      	ands	r5, r3
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	6922      	ldr	r2, [r4, #16]
 80062bc:	4293      	cmp	r3, r2
 80062be:	dd01      	ble.n	80062c4 <_printf_common+0x80>
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	18ed      	adds	r5, r5, r3
 80062c4:	2700      	movs	r7, #0
 80062c6:	42bd      	cmp	r5, r7
 80062c8:	d120      	bne.n	800630c <_printf_common+0xc8>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e010      	b.n	80062f0 <_printf_common+0xac>
 80062ce:	3701      	adds	r7, #1
 80062d0:	68e3      	ldr	r3, [r4, #12]
 80062d2:	682a      	ldr	r2, [r5, #0]
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	42bb      	cmp	r3, r7
 80062d8:	ddd2      	ble.n	8006280 <_printf_common+0x3c>
 80062da:	0022      	movs	r2, r4
 80062dc:	2301      	movs	r3, #1
 80062de:	9901      	ldr	r1, [sp, #4]
 80062e0:	9800      	ldr	r0, [sp, #0]
 80062e2:	9e08      	ldr	r6, [sp, #32]
 80062e4:	3219      	adds	r2, #25
 80062e6:	47b0      	blx	r6
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d1f0      	bne.n	80062ce <_printf_common+0x8a>
 80062ec:	2001      	movs	r0, #1
 80062ee:	4240      	negs	r0, r0
 80062f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062f2:	2030      	movs	r0, #48	; 0x30
 80062f4:	18e1      	adds	r1, r4, r3
 80062f6:	3143      	adds	r1, #67	; 0x43
 80062f8:	7008      	strb	r0, [r1, #0]
 80062fa:	0021      	movs	r1, r4
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	3145      	adds	r1, #69	; 0x45
 8006300:	7809      	ldrb	r1, [r1, #0]
 8006302:	18a2      	adds	r2, r4, r2
 8006304:	3243      	adds	r2, #67	; 0x43
 8006306:	3302      	adds	r3, #2
 8006308:	7011      	strb	r1, [r2, #0]
 800630a:	e7c1      	b.n	8006290 <_printf_common+0x4c>
 800630c:	0022      	movs	r2, r4
 800630e:	2301      	movs	r3, #1
 8006310:	9901      	ldr	r1, [sp, #4]
 8006312:	9800      	ldr	r0, [sp, #0]
 8006314:	9e08      	ldr	r6, [sp, #32]
 8006316:	321a      	adds	r2, #26
 8006318:	47b0      	blx	r6
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d0e6      	beq.n	80062ec <_printf_common+0xa8>
 800631e:	3701      	adds	r7, #1
 8006320:	e7d1      	b.n	80062c6 <_printf_common+0x82>
	...

08006324 <_printf_i>:
 8006324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006326:	b08b      	sub	sp, #44	; 0x2c
 8006328:	9206      	str	r2, [sp, #24]
 800632a:	000a      	movs	r2, r1
 800632c:	3243      	adds	r2, #67	; 0x43
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	9005      	str	r0, [sp, #20]
 8006332:	9204      	str	r2, [sp, #16]
 8006334:	7e0a      	ldrb	r2, [r1, #24]
 8006336:	000c      	movs	r4, r1
 8006338:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800633a:	2a78      	cmp	r2, #120	; 0x78
 800633c:	d807      	bhi.n	800634e <_printf_i+0x2a>
 800633e:	2a62      	cmp	r2, #98	; 0x62
 8006340:	d809      	bhi.n	8006356 <_printf_i+0x32>
 8006342:	2a00      	cmp	r2, #0
 8006344:	d100      	bne.n	8006348 <_printf_i+0x24>
 8006346:	e0c1      	b.n	80064cc <_printf_i+0x1a8>
 8006348:	2a58      	cmp	r2, #88	; 0x58
 800634a:	d100      	bne.n	800634e <_printf_i+0x2a>
 800634c:	e08c      	b.n	8006468 <_printf_i+0x144>
 800634e:	0026      	movs	r6, r4
 8006350:	3642      	adds	r6, #66	; 0x42
 8006352:	7032      	strb	r2, [r6, #0]
 8006354:	e022      	b.n	800639c <_printf_i+0x78>
 8006356:	0010      	movs	r0, r2
 8006358:	3863      	subs	r0, #99	; 0x63
 800635a:	2815      	cmp	r0, #21
 800635c:	d8f7      	bhi.n	800634e <_printf_i+0x2a>
 800635e:	f7f9 fee5 	bl	800012c <__gnu_thumb1_case_shi>
 8006362:	0016      	.short	0x0016
 8006364:	fff6001f 	.word	0xfff6001f
 8006368:	fff6fff6 	.word	0xfff6fff6
 800636c:	001ffff6 	.word	0x001ffff6
 8006370:	fff6fff6 	.word	0xfff6fff6
 8006374:	fff6fff6 	.word	0xfff6fff6
 8006378:	003600a8 	.word	0x003600a8
 800637c:	fff6009a 	.word	0xfff6009a
 8006380:	00b9fff6 	.word	0x00b9fff6
 8006384:	0036fff6 	.word	0x0036fff6
 8006388:	fff6fff6 	.word	0xfff6fff6
 800638c:	009e      	.short	0x009e
 800638e:	0026      	movs	r6, r4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	3642      	adds	r6, #66	; 0x42
 8006394:	1d11      	adds	r1, r2, #4
 8006396:	6019      	str	r1, [r3, #0]
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	7033      	strb	r3, [r6, #0]
 800639c:	2301      	movs	r3, #1
 800639e:	e0a7      	b.n	80064f0 <_printf_i+0x1cc>
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	1d0a      	adds	r2, r1, #4
 80063a6:	0605      	lsls	r5, r0, #24
 80063a8:	d50b      	bpl.n	80063c2 <_printf_i+0x9e>
 80063aa:	680d      	ldr	r5, [r1, #0]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	da03      	bge.n	80063ba <_printf_i+0x96>
 80063b2:	232d      	movs	r3, #45	; 0x2d
 80063b4:	9a04      	ldr	r2, [sp, #16]
 80063b6:	426d      	negs	r5, r5
 80063b8:	7013      	strb	r3, [r2, #0]
 80063ba:	4b61      	ldr	r3, [pc, #388]	; (8006540 <_printf_i+0x21c>)
 80063bc:	270a      	movs	r7, #10
 80063be:	9303      	str	r3, [sp, #12]
 80063c0:	e01b      	b.n	80063fa <_printf_i+0xd6>
 80063c2:	680d      	ldr	r5, [r1, #0]
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	0641      	lsls	r1, r0, #25
 80063c8:	d5f1      	bpl.n	80063ae <_printf_i+0x8a>
 80063ca:	b22d      	sxth	r5, r5
 80063cc:	e7ef      	b.n	80063ae <_printf_i+0x8a>
 80063ce:	680d      	ldr	r5, [r1, #0]
 80063d0:	6819      	ldr	r1, [r3, #0]
 80063d2:	1d08      	adds	r0, r1, #4
 80063d4:	6018      	str	r0, [r3, #0]
 80063d6:	062e      	lsls	r6, r5, #24
 80063d8:	d501      	bpl.n	80063de <_printf_i+0xba>
 80063da:	680d      	ldr	r5, [r1, #0]
 80063dc:	e003      	b.n	80063e6 <_printf_i+0xc2>
 80063de:	066d      	lsls	r5, r5, #25
 80063e0:	d5fb      	bpl.n	80063da <_printf_i+0xb6>
 80063e2:	680d      	ldr	r5, [r1, #0]
 80063e4:	b2ad      	uxth	r5, r5
 80063e6:	4b56      	ldr	r3, [pc, #344]	; (8006540 <_printf_i+0x21c>)
 80063e8:	2708      	movs	r7, #8
 80063ea:	9303      	str	r3, [sp, #12]
 80063ec:	2a6f      	cmp	r2, #111	; 0x6f
 80063ee:	d000      	beq.n	80063f2 <_printf_i+0xce>
 80063f0:	3702      	adds	r7, #2
 80063f2:	0023      	movs	r3, r4
 80063f4:	2200      	movs	r2, #0
 80063f6:	3343      	adds	r3, #67	; 0x43
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	60a3      	str	r3, [r4, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	db03      	blt.n	800640a <_printf_i+0xe6>
 8006402:	2204      	movs	r2, #4
 8006404:	6821      	ldr	r1, [r4, #0]
 8006406:	4391      	bics	r1, r2
 8006408:	6021      	str	r1, [r4, #0]
 800640a:	2d00      	cmp	r5, #0
 800640c:	d102      	bne.n	8006414 <_printf_i+0xf0>
 800640e:	9e04      	ldr	r6, [sp, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <_printf_i+0x10a>
 8006414:	9e04      	ldr	r6, [sp, #16]
 8006416:	0028      	movs	r0, r5
 8006418:	0039      	movs	r1, r7
 800641a:	f7f9 ff17 	bl	800024c <__aeabi_uidivmod>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	3e01      	subs	r6, #1
 8006422:	5c5b      	ldrb	r3, [r3, r1]
 8006424:	7033      	strb	r3, [r6, #0]
 8006426:	002b      	movs	r3, r5
 8006428:	0005      	movs	r5, r0
 800642a:	429f      	cmp	r7, r3
 800642c:	d9f3      	bls.n	8006416 <_printf_i+0xf2>
 800642e:	2f08      	cmp	r7, #8
 8006430:	d109      	bne.n	8006446 <_printf_i+0x122>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	07db      	lsls	r3, r3, #31
 8006436:	d506      	bpl.n	8006446 <_printf_i+0x122>
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	6922      	ldr	r2, [r4, #16]
 800643c:	4293      	cmp	r3, r2
 800643e:	dc02      	bgt.n	8006446 <_printf_i+0x122>
 8006440:	2330      	movs	r3, #48	; 0x30
 8006442:	3e01      	subs	r6, #1
 8006444:	7033      	strb	r3, [r6, #0]
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	1b9b      	subs	r3, r3, r6
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	0021      	movs	r1, r4
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	9805      	ldr	r0, [sp, #20]
 8006454:	9b06      	ldr	r3, [sp, #24]
 8006456:	aa09      	add	r2, sp, #36	; 0x24
 8006458:	f7ff fef4 	bl	8006244 <_printf_common>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d14c      	bne.n	80064fa <_printf_i+0x1d6>
 8006460:	2001      	movs	r0, #1
 8006462:	4240      	negs	r0, r0
 8006464:	b00b      	add	sp, #44	; 0x2c
 8006466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006468:	3145      	adds	r1, #69	; 0x45
 800646a:	700a      	strb	r2, [r1, #0]
 800646c:	4a34      	ldr	r2, [pc, #208]	; (8006540 <_printf_i+0x21c>)
 800646e:	9203      	str	r2, [sp, #12]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	6821      	ldr	r1, [r4, #0]
 8006474:	ca20      	ldmia	r2!, {r5}
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	0608      	lsls	r0, r1, #24
 800647a:	d516      	bpl.n	80064aa <_printf_i+0x186>
 800647c:	07cb      	lsls	r3, r1, #31
 800647e:	d502      	bpl.n	8006486 <_printf_i+0x162>
 8006480:	2320      	movs	r3, #32
 8006482:	4319      	orrs	r1, r3
 8006484:	6021      	str	r1, [r4, #0]
 8006486:	2710      	movs	r7, #16
 8006488:	2d00      	cmp	r5, #0
 800648a:	d1b2      	bne.n	80063f2 <_printf_i+0xce>
 800648c:	2320      	movs	r3, #32
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	439a      	bics	r2, r3
 8006492:	6022      	str	r2, [r4, #0]
 8006494:	e7ad      	b.n	80063f2 <_printf_i+0xce>
 8006496:	2220      	movs	r2, #32
 8006498:	6809      	ldr	r1, [r1, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	6022      	str	r2, [r4, #0]
 800649e:	0022      	movs	r2, r4
 80064a0:	2178      	movs	r1, #120	; 0x78
 80064a2:	3245      	adds	r2, #69	; 0x45
 80064a4:	7011      	strb	r1, [r2, #0]
 80064a6:	4a27      	ldr	r2, [pc, #156]	; (8006544 <_printf_i+0x220>)
 80064a8:	e7e1      	b.n	800646e <_printf_i+0x14a>
 80064aa:	0648      	lsls	r0, r1, #25
 80064ac:	d5e6      	bpl.n	800647c <_printf_i+0x158>
 80064ae:	b2ad      	uxth	r5, r5
 80064b0:	e7e4      	b.n	800647c <_printf_i+0x158>
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	680d      	ldr	r5, [r1, #0]
 80064b6:	1d10      	adds	r0, r2, #4
 80064b8:	6949      	ldr	r1, [r1, #20]
 80064ba:	6018      	str	r0, [r3, #0]
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	062e      	lsls	r6, r5, #24
 80064c0:	d501      	bpl.n	80064c6 <_printf_i+0x1a2>
 80064c2:	6019      	str	r1, [r3, #0]
 80064c4:	e002      	b.n	80064cc <_printf_i+0x1a8>
 80064c6:	066d      	lsls	r5, r5, #25
 80064c8:	d5fb      	bpl.n	80064c2 <_printf_i+0x19e>
 80064ca:	8019      	strh	r1, [r3, #0]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9e04      	ldr	r6, [sp, #16]
 80064d0:	6123      	str	r3, [r4, #16]
 80064d2:	e7bb      	b.n	800644c <_printf_i+0x128>
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	1d11      	adds	r1, r2, #4
 80064d8:	6019      	str	r1, [r3, #0]
 80064da:	6816      	ldr	r6, [r2, #0]
 80064dc:	2100      	movs	r1, #0
 80064de:	0030      	movs	r0, r6
 80064e0:	6862      	ldr	r2, [r4, #4]
 80064e2:	f000 ff1d 	bl	8007320 <memchr>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d001      	beq.n	80064ee <_printf_i+0x1ca>
 80064ea:	1b80      	subs	r0, r0, r6
 80064ec:	6060      	str	r0, [r4, #4]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	2300      	movs	r3, #0
 80064f4:	9a04      	ldr	r2, [sp, #16]
 80064f6:	7013      	strb	r3, [r2, #0]
 80064f8:	e7a8      	b.n	800644c <_printf_i+0x128>
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	0032      	movs	r2, r6
 80064fe:	9906      	ldr	r1, [sp, #24]
 8006500:	9805      	ldr	r0, [sp, #20]
 8006502:	9d07      	ldr	r5, [sp, #28]
 8006504:	47a8      	blx	r5
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	d0aa      	beq.n	8006460 <_printf_i+0x13c>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	079b      	lsls	r3, r3, #30
 800650e:	d415      	bmi.n	800653c <_printf_i+0x218>
 8006510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006512:	68e0      	ldr	r0, [r4, #12]
 8006514:	4298      	cmp	r0, r3
 8006516:	daa5      	bge.n	8006464 <_printf_i+0x140>
 8006518:	0018      	movs	r0, r3
 800651a:	e7a3      	b.n	8006464 <_printf_i+0x140>
 800651c:	0022      	movs	r2, r4
 800651e:	2301      	movs	r3, #1
 8006520:	9906      	ldr	r1, [sp, #24]
 8006522:	9805      	ldr	r0, [sp, #20]
 8006524:	9e07      	ldr	r6, [sp, #28]
 8006526:	3219      	adds	r2, #25
 8006528:	47b0      	blx	r6
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d098      	beq.n	8006460 <_printf_i+0x13c>
 800652e:	3501      	adds	r5, #1
 8006530:	68e3      	ldr	r3, [r4, #12]
 8006532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	42ab      	cmp	r3, r5
 8006538:	dcf0      	bgt.n	800651c <_printf_i+0x1f8>
 800653a:	e7e9      	b.n	8006510 <_printf_i+0x1ec>
 800653c:	2500      	movs	r5, #0
 800653e:	e7f7      	b.n	8006530 <_printf_i+0x20c>
 8006540:	080093aa 	.word	0x080093aa
 8006544:	080093bb 	.word	0x080093bb

08006548 <_vsniprintf_r>:
 8006548:	b530      	push	{r4, r5, lr}
 800654a:	0014      	movs	r4, r2
 800654c:	0005      	movs	r5, r0
 800654e:	001a      	movs	r2, r3
 8006550:	b09b      	sub	sp, #108	; 0x6c
 8006552:	2c00      	cmp	r4, #0
 8006554:	da05      	bge.n	8006562 <_vsniprintf_r+0x1a>
 8006556:	238b      	movs	r3, #139	; 0x8b
 8006558:	6003      	str	r3, [r0, #0]
 800655a:	2001      	movs	r0, #1
 800655c:	4240      	negs	r0, r0
 800655e:	b01b      	add	sp, #108	; 0x6c
 8006560:	bd30      	pop	{r4, r5, pc}
 8006562:	2382      	movs	r3, #130	; 0x82
 8006564:	4668      	mov	r0, sp
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	8183      	strh	r3, [r0, #12]
 800656a:	2300      	movs	r3, #0
 800656c:	9100      	str	r1, [sp, #0]
 800656e:	9104      	str	r1, [sp, #16]
 8006570:	429c      	cmp	r4, r3
 8006572:	d000      	beq.n	8006576 <_vsniprintf_r+0x2e>
 8006574:	1e63      	subs	r3, r4, #1
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	9305      	str	r3, [sp, #20]
 800657a:	2301      	movs	r3, #1
 800657c:	4669      	mov	r1, sp
 800657e:	425b      	negs	r3, r3
 8006580:	81cb      	strh	r3, [r1, #14]
 8006582:	0028      	movs	r0, r5
 8006584:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006586:	f001 fbeb 	bl	8007d60 <_svfiprintf_r>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	da01      	bge.n	8006592 <_vsniprintf_r+0x4a>
 800658e:	238b      	movs	r3, #139	; 0x8b
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	2c00      	cmp	r4, #0
 8006594:	d0e3      	beq.n	800655e <_vsniprintf_r+0x16>
 8006596:	2300      	movs	r3, #0
 8006598:	9a00      	ldr	r2, [sp, #0]
 800659a:	7013      	strb	r3, [r2, #0]
 800659c:	e7df      	b.n	800655e <_vsniprintf_r+0x16>
	...

080065a0 <vsniprintf>:
 80065a0:	b507      	push	{r0, r1, r2, lr}
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	0013      	movs	r3, r2
 80065a6:	000a      	movs	r2, r1
 80065a8:	0001      	movs	r1, r0
 80065aa:	4802      	ldr	r0, [pc, #8]	; (80065b4 <vsniprintf+0x14>)
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f7ff ffcb 	bl	8006548 <_vsniprintf_r>
 80065b2:	bd0e      	pop	{r1, r2, r3, pc}
 80065b4:	20000054 	.word	0x20000054

080065b8 <quorem>:
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	0006      	movs	r6, r0
 80065bc:	690b      	ldr	r3, [r1, #16]
 80065be:	6932      	ldr	r2, [r6, #16]
 80065c0:	b087      	sub	sp, #28
 80065c2:	2000      	movs	r0, #0
 80065c4:	9103      	str	r1, [sp, #12]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	db65      	blt.n	8006696 <quorem+0xde>
 80065ca:	3b01      	subs	r3, #1
 80065cc:	009c      	lsls	r4, r3, #2
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	000b      	movs	r3, r1
 80065d2:	3314      	adds	r3, #20
 80065d4:	9305      	str	r3, [sp, #20]
 80065d6:	191b      	adds	r3, r3, r4
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	0033      	movs	r3, r6
 80065dc:	3314      	adds	r3, #20
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	191c      	adds	r4, r3, r4
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	6827      	ldr	r7, [r4, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0038      	movs	r0, r7
 80065ea:	1c5d      	adds	r5, r3, #1
 80065ec:	0029      	movs	r1, r5
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	f7f9 fda6 	bl	8000140 <__udivsi3>
 80065f4:	9001      	str	r0, [sp, #4]
 80065f6:	42af      	cmp	r7, r5
 80065f8:	d324      	bcc.n	8006644 <quorem+0x8c>
 80065fa:	2500      	movs	r5, #0
 80065fc:	46ac      	mov	ip, r5
 80065fe:	9802      	ldr	r0, [sp, #8]
 8006600:	9f05      	ldr	r7, [sp, #20]
 8006602:	cf08      	ldmia	r7!, {r3}
 8006604:	9a01      	ldr	r2, [sp, #4]
 8006606:	b299      	uxth	r1, r3
 8006608:	4351      	muls	r1, r2
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	4353      	muls	r3, r2
 800660e:	1949      	adds	r1, r1, r5
 8006610:	0c0a      	lsrs	r2, r1, #16
 8006612:	189b      	adds	r3, r3, r2
 8006614:	6802      	ldr	r2, [r0, #0]
 8006616:	b289      	uxth	r1, r1
 8006618:	b292      	uxth	r2, r2
 800661a:	4462      	add	r2, ip
 800661c:	1a52      	subs	r2, r2, r1
 800661e:	6801      	ldr	r1, [r0, #0]
 8006620:	0c1d      	lsrs	r5, r3, #16
 8006622:	0c09      	lsrs	r1, r1, #16
 8006624:	b29b      	uxth	r3, r3
 8006626:	1acb      	subs	r3, r1, r3
 8006628:	1411      	asrs	r1, r2, #16
 800662a:	185b      	adds	r3, r3, r1
 800662c:	1419      	asrs	r1, r3, #16
 800662e:	b292      	uxth	r2, r2
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	431a      	orrs	r2, r3
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	468c      	mov	ip, r1
 8006638:	c004      	stmia	r0!, {r2}
 800663a:	42bb      	cmp	r3, r7
 800663c:	d2e1      	bcs.n	8006602 <quorem+0x4a>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d030      	beq.n	80066a6 <quorem+0xee>
 8006644:	0030      	movs	r0, r6
 8006646:	9903      	ldr	r1, [sp, #12]
 8006648:	f001 f902 	bl	8007850 <__mcmp>
 800664c:	2800      	cmp	r0, #0
 800664e:	db21      	blt.n	8006694 <quorem+0xdc>
 8006650:	0030      	movs	r0, r6
 8006652:	2400      	movs	r4, #0
 8006654:	9b01      	ldr	r3, [sp, #4]
 8006656:	9903      	ldr	r1, [sp, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	3014      	adds	r0, #20
 800665e:	3114      	adds	r1, #20
 8006660:	6803      	ldr	r3, [r0, #0]
 8006662:	c920      	ldmia	r1!, {r5}
 8006664:	b29a      	uxth	r2, r3
 8006666:	1914      	adds	r4, r2, r4
 8006668:	b2aa      	uxth	r2, r5
 800666a:	1aa2      	subs	r2, r4, r2
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	0c2d      	lsrs	r5, r5, #16
 8006670:	1414      	asrs	r4, r2, #16
 8006672:	1b5b      	subs	r3, r3, r5
 8006674:	191b      	adds	r3, r3, r4
 8006676:	141c      	asrs	r4, r3, #16
 8006678:	b292      	uxth	r2, r2
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	4313      	orrs	r3, r2
 800667e:	c008      	stmia	r0!, {r3}
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	428b      	cmp	r3, r1
 8006684:	d2ec      	bcs.n	8006660 <quorem+0xa8>
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	9a02      	ldr	r2, [sp, #8]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	18d3      	adds	r3, r2, r3
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	2a00      	cmp	r2, #0
 8006692:	d015      	beq.n	80066c0 <quorem+0x108>
 8006694:	9801      	ldr	r0, [sp, #4]
 8006696:	b007      	add	sp, #28
 8006698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <quorem+0xf6>
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	9b02      	ldr	r3, [sp, #8]
 80066a8:	3c04      	subs	r4, #4
 80066aa:	42a3      	cmp	r3, r4
 80066ac:	d3f5      	bcc.n	800669a <quorem+0xe2>
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	6133      	str	r3, [r6, #16]
 80066b2:	e7c7      	b.n	8006644 <quorem+0x8c>
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	d106      	bne.n	80066c8 <quorem+0x110>
 80066ba:	9a00      	ldr	r2, [sp, #0]
 80066bc:	3a01      	subs	r2, #1
 80066be:	9200      	str	r2, [sp, #0]
 80066c0:	9a02      	ldr	r2, [sp, #8]
 80066c2:	3b04      	subs	r3, #4
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3f5      	bcc.n	80066b4 <quorem+0xfc>
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	6133      	str	r3, [r6, #16]
 80066cc:	e7e2      	b.n	8006694 <quorem+0xdc>
	...

080066d0 <_dtoa_r>:
 80066d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d2:	b09d      	sub	sp, #116	; 0x74
 80066d4:	9202      	str	r2, [sp, #8]
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	9b02      	ldr	r3, [sp, #8]
 80066da:	9c03      	ldr	r4, [sp, #12]
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	9409      	str	r4, [sp, #36]	; 0x24
 80066e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80066e2:	0007      	movs	r7, r0
 80066e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80066e6:	2c00      	cmp	r4, #0
 80066e8:	d10e      	bne.n	8006708 <_dtoa_r+0x38>
 80066ea:	2010      	movs	r0, #16
 80066ec:	f000 fe0e 	bl	800730c <malloc>
 80066f0:	1e02      	subs	r2, r0, #0
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24
 80066f4:	d104      	bne.n	8006700 <_dtoa_r+0x30>
 80066f6:	21ea      	movs	r1, #234	; 0xea
 80066f8:	4bc7      	ldr	r3, [pc, #796]	; (8006a18 <_dtoa_r+0x348>)
 80066fa:	48c8      	ldr	r0, [pc, #800]	; (8006a1c <_dtoa_r+0x34c>)
 80066fc:	f001 fc42 	bl	8007f84 <__assert_func>
 8006700:	6044      	str	r4, [r0, #4]
 8006702:	6084      	str	r4, [r0, #8]
 8006704:	6004      	str	r4, [r0, #0]
 8006706:	60c4      	str	r4, [r0, #12]
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	6819      	ldr	r1, [r3, #0]
 800670c:	2900      	cmp	r1, #0
 800670e:	d00a      	beq.n	8006726 <_dtoa_r+0x56>
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	2301      	movs	r3, #1
 8006714:	4093      	lsls	r3, r2
 8006716:	604a      	str	r2, [r1, #4]
 8006718:	608b      	str	r3, [r1, #8]
 800671a:	0038      	movs	r0, r7
 800671c:	f000 fe58 	bl	80073d0 <_Bfree>
 8006720:	2200      	movs	r2, #0
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da20      	bge.n	800676e <_dtoa_r+0x9e>
 800672c:	2301      	movs	r3, #1
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800673a:	4bb9      	ldr	r3, [pc, #740]	; (8006a20 <_dtoa_r+0x350>)
 800673c:	4ab8      	ldr	r2, [pc, #736]	; (8006a20 <_dtoa_r+0x350>)
 800673e:	402b      	ands	r3, r5
 8006740:	4293      	cmp	r3, r2
 8006742:	d117      	bne.n	8006774 <_dtoa_r+0xa4>
 8006744:	4bb7      	ldr	r3, [pc, #732]	; (8006a24 <_dtoa_r+0x354>)
 8006746:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006748:	0328      	lsls	r0, r5, #12
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	9b02      	ldr	r3, [sp, #8]
 800674e:	0b00      	lsrs	r0, r0, #12
 8006750:	4318      	orrs	r0, r3
 8006752:	d101      	bne.n	8006758 <_dtoa_r+0x88>
 8006754:	f000 fdbf 	bl	80072d6 <_dtoa_r+0xc06>
 8006758:	48b3      	ldr	r0, [pc, #716]	; (8006a28 <_dtoa_r+0x358>)
 800675a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800675c:	9006      	str	r0, [sp, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <_dtoa_r+0x98>
 8006762:	4bb2      	ldr	r3, [pc, #712]	; (8006a2c <_dtoa_r+0x35c>)
 8006764:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	9806      	ldr	r0, [sp, #24]
 800676a:	b01d      	add	sp, #116	; 0x74
 800676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676e:	2300      	movs	r3, #0
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	e7e1      	b.n	8006738 <_dtoa_r+0x68>
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006778:	9312      	str	r3, [sp, #72]	; 0x48
 800677a:	9413      	str	r4, [sp, #76]	; 0x4c
 800677c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800677e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	f7f9 fe62 	bl	800044c <__aeabi_dcmpeq>
 8006788:	1e04      	subs	r4, r0, #0
 800678a:	d009      	beq.n	80067a0 <_dtoa_r+0xd0>
 800678c:	2301      	movs	r3, #1
 800678e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4ba7      	ldr	r3, [pc, #668]	; (8006a30 <_dtoa_r+0x360>)
 8006794:	9306      	str	r3, [sp, #24]
 8006796:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0e5      	beq.n	8006768 <_dtoa_r+0x98>
 800679c:	4ba5      	ldr	r3, [pc, #660]	; (8006a34 <_dtoa_r+0x364>)
 800679e:	e7e1      	b.n	8006764 <_dtoa_r+0x94>
 80067a0:	ab1a      	add	r3, sp, #104	; 0x68
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	0038      	movs	r0, r7
 80067aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067ae:	f001 f903 	bl	80079b8 <__d2b>
 80067b2:	006e      	lsls	r6, r5, #1
 80067b4:	9005      	str	r0, [sp, #20]
 80067b6:	0d76      	lsrs	r6, r6, #21
 80067b8:	d100      	bne.n	80067bc <_dtoa_r+0xec>
 80067ba:	e07c      	b.n	80068b6 <_dtoa_r+0x1e6>
 80067bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80067be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80067c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067c2:	4a9d      	ldr	r2, [pc, #628]	; (8006a38 <_dtoa_r+0x368>)
 80067c4:	031b      	lsls	r3, r3, #12
 80067c6:	0b1b      	lsrs	r3, r3, #12
 80067c8:	431a      	orrs	r2, r3
 80067ca:	0011      	movs	r1, r2
 80067cc:	4b9b      	ldr	r3, [pc, #620]	; (8006a3c <_dtoa_r+0x36c>)
 80067ce:	9418      	str	r4, [sp, #96]	; 0x60
 80067d0:	18f6      	adds	r6, r6, r3
 80067d2:	2200      	movs	r2, #0
 80067d4:	4b9a      	ldr	r3, [pc, #616]	; (8006a40 <_dtoa_r+0x370>)
 80067d6:	f7fb feff 	bl	80025d8 <__aeabi_dsub>
 80067da:	4a9a      	ldr	r2, [pc, #616]	; (8006a44 <_dtoa_r+0x374>)
 80067dc:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <_dtoa_r+0x378>)
 80067de:	f7fb fc8f 	bl	8002100 <__aeabi_dmul>
 80067e2:	4a9a      	ldr	r2, [pc, #616]	; (8006a4c <_dtoa_r+0x37c>)
 80067e4:	4b9a      	ldr	r3, [pc, #616]	; (8006a50 <_dtoa_r+0x380>)
 80067e6:	f7fa fd4d 	bl	8001284 <__aeabi_dadd>
 80067ea:	0004      	movs	r4, r0
 80067ec:	0030      	movs	r0, r6
 80067ee:	000d      	movs	r5, r1
 80067f0:	f7fc fad8 	bl	8002da4 <__aeabi_i2d>
 80067f4:	4a97      	ldr	r2, [pc, #604]	; (8006a54 <_dtoa_r+0x384>)
 80067f6:	4b98      	ldr	r3, [pc, #608]	; (8006a58 <_dtoa_r+0x388>)
 80067f8:	f7fb fc82 	bl	8002100 <__aeabi_dmul>
 80067fc:	0002      	movs	r2, r0
 80067fe:	000b      	movs	r3, r1
 8006800:	0020      	movs	r0, r4
 8006802:	0029      	movs	r1, r5
 8006804:	f7fa fd3e 	bl	8001284 <__aeabi_dadd>
 8006808:	0004      	movs	r4, r0
 800680a:	000d      	movs	r5, r1
 800680c:	f7fc fa94 	bl	8002d38 <__aeabi_d2iz>
 8006810:	2200      	movs	r2, #0
 8006812:	9002      	str	r0, [sp, #8]
 8006814:	2300      	movs	r3, #0
 8006816:	0020      	movs	r0, r4
 8006818:	0029      	movs	r1, r5
 800681a:	f7f9 fe1d 	bl	8000458 <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	d00b      	beq.n	800683a <_dtoa_r+0x16a>
 8006822:	9802      	ldr	r0, [sp, #8]
 8006824:	f7fc fabe 	bl	8002da4 <__aeabi_i2d>
 8006828:	002b      	movs	r3, r5
 800682a:	0022      	movs	r2, r4
 800682c:	f7f9 fe0e 	bl	800044c <__aeabi_dcmpeq>
 8006830:	4243      	negs	r3, r0
 8006832:	4158      	adcs	r0, r3
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	1a1b      	subs	r3, r3, r0
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	2301      	movs	r3, #1
 800683c:	9316      	str	r3, [sp, #88]	; 0x58
 800683e:	9b02      	ldr	r3, [sp, #8]
 8006840:	2b16      	cmp	r3, #22
 8006842:	d80f      	bhi.n	8006864 <_dtoa_r+0x194>
 8006844:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006846:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006848:	00da      	lsls	r2, r3, #3
 800684a:	4b84      	ldr	r3, [pc, #528]	; (8006a5c <_dtoa_r+0x38c>)
 800684c:	189b      	adds	r3, r3, r2
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f7f9 fe01 	bl	8000458 <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	d049      	beq.n	80068ee <_dtoa_r+0x21e>
 800685a:	9b02      	ldr	r3, [sp, #8]
 800685c:	3b01      	subs	r3, #1
 800685e:	9302      	str	r3, [sp, #8]
 8006860:	2300      	movs	r3, #0
 8006862:	9316      	str	r3, [sp, #88]	; 0x58
 8006864:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006866:	1b9e      	subs	r6, r3, r6
 8006868:	2300      	movs	r3, #0
 800686a:	930a      	str	r3, [sp, #40]	; 0x28
 800686c:	0033      	movs	r3, r6
 800686e:	3b01      	subs	r3, #1
 8006870:	930d      	str	r3, [sp, #52]	; 0x34
 8006872:	d504      	bpl.n	800687e <_dtoa_r+0x1ae>
 8006874:	2301      	movs	r3, #1
 8006876:	1b9b      	subs	r3, r3, r6
 8006878:	930a      	str	r3, [sp, #40]	; 0x28
 800687a:	2300      	movs	r3, #0
 800687c:	930d      	str	r3, [sp, #52]	; 0x34
 800687e:	9b02      	ldr	r3, [sp, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	db36      	blt.n	80068f2 <_dtoa_r+0x222>
 8006884:	9a02      	ldr	r2, [sp, #8]
 8006886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006888:	4694      	mov	ip, r2
 800688a:	4463      	add	r3, ip
 800688c:	930d      	str	r3, [sp, #52]	; 0x34
 800688e:	2300      	movs	r3, #0
 8006890:	9215      	str	r2, [sp, #84]	; 0x54
 8006892:	930e      	str	r3, [sp, #56]	; 0x38
 8006894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006896:	2401      	movs	r4, #1
 8006898:	2b09      	cmp	r3, #9
 800689a:	d864      	bhi.n	8006966 <_dtoa_r+0x296>
 800689c:	2b05      	cmp	r3, #5
 800689e:	dd02      	ble.n	80068a6 <_dtoa_r+0x1d6>
 80068a0:	2400      	movs	r4, #0
 80068a2:	3b04      	subs	r3, #4
 80068a4:	9322      	str	r3, [sp, #136]	; 0x88
 80068a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068a8:	1e98      	subs	r0, r3, #2
 80068aa:	2803      	cmp	r0, #3
 80068ac:	d864      	bhi.n	8006978 <_dtoa_r+0x2a8>
 80068ae:	f7f9 fc33 	bl	8000118 <__gnu_thumb1_case_uqi>
 80068b2:	3829      	.short	0x3829
 80068b4:	5836      	.short	0x5836
 80068b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80068b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80068ba:	189e      	adds	r6, r3, r2
 80068bc:	4b68      	ldr	r3, [pc, #416]	; (8006a60 <_dtoa_r+0x390>)
 80068be:	18f2      	adds	r2, r6, r3
 80068c0:	2a20      	cmp	r2, #32
 80068c2:	dd0f      	ble.n	80068e4 <_dtoa_r+0x214>
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	409d      	lsls	r5, r3
 80068ca:	4b66      	ldr	r3, [pc, #408]	; (8006a64 <_dtoa_r+0x394>)
 80068cc:	9802      	ldr	r0, [sp, #8]
 80068ce:	18f3      	adds	r3, r6, r3
 80068d0:	40d8      	lsrs	r0, r3
 80068d2:	4328      	orrs	r0, r5
 80068d4:	f7fc fa96 	bl	8002e04 <__aeabi_ui2d>
 80068d8:	2301      	movs	r3, #1
 80068da:	4c63      	ldr	r4, [pc, #396]	; (8006a68 <_dtoa_r+0x398>)
 80068dc:	3e01      	subs	r6, #1
 80068de:	1909      	adds	r1, r1, r4
 80068e0:	9318      	str	r3, [sp, #96]	; 0x60
 80068e2:	e776      	b.n	80067d2 <_dtoa_r+0x102>
 80068e4:	2320      	movs	r3, #32
 80068e6:	9802      	ldr	r0, [sp, #8]
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	4098      	lsls	r0, r3
 80068ec:	e7f2      	b.n	80068d4 <_dtoa_r+0x204>
 80068ee:	9016      	str	r0, [sp, #88]	; 0x58
 80068f0:	e7b8      	b.n	8006864 <_dtoa_r+0x194>
 80068f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f4:	9a02      	ldr	r2, [sp, #8]
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	930a      	str	r3, [sp, #40]	; 0x28
 80068fa:	4253      	negs	r3, r2
 80068fc:	930e      	str	r3, [sp, #56]	; 0x38
 80068fe:	2300      	movs	r3, #0
 8006900:	9315      	str	r3, [sp, #84]	; 0x54
 8006902:	e7c7      	b.n	8006894 <_dtoa_r+0x1c4>
 8006904:	2300      	movs	r3, #0
 8006906:	930f      	str	r3, [sp, #60]	; 0x3c
 8006908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800690a:	930c      	str	r3, [sp, #48]	; 0x30
 800690c:	9307      	str	r3, [sp, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	dc13      	bgt.n	800693a <_dtoa_r+0x26a>
 8006912:	2301      	movs	r3, #1
 8006914:	001a      	movs	r2, r3
 8006916:	930c      	str	r3, [sp, #48]	; 0x30
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	9223      	str	r2, [sp, #140]	; 0x8c
 800691c:	e00d      	b.n	800693a <_dtoa_r+0x26a>
 800691e:	2301      	movs	r3, #1
 8006920:	e7f1      	b.n	8006906 <_dtoa_r+0x236>
 8006922:	2300      	movs	r3, #0
 8006924:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006926:	930f      	str	r3, [sp, #60]	; 0x3c
 8006928:	4694      	mov	ip, r2
 800692a:	9b02      	ldr	r3, [sp, #8]
 800692c:	4463      	add	r3, ip
 800692e:	930c      	str	r3, [sp, #48]	; 0x30
 8006930:	3301      	adds	r3, #1
 8006932:	9307      	str	r3, [sp, #28]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc00      	bgt.n	800693a <_dtoa_r+0x26a>
 8006938:	2301      	movs	r3, #1
 800693a:	2200      	movs	r2, #0
 800693c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800693e:	6042      	str	r2, [r0, #4]
 8006940:	3204      	adds	r2, #4
 8006942:	0015      	movs	r5, r2
 8006944:	3514      	adds	r5, #20
 8006946:	6841      	ldr	r1, [r0, #4]
 8006948:	429d      	cmp	r5, r3
 800694a:	d919      	bls.n	8006980 <_dtoa_r+0x2b0>
 800694c:	0038      	movs	r0, r7
 800694e:	f000 fcfb 	bl	8007348 <_Balloc>
 8006952:	9006      	str	r0, [sp, #24]
 8006954:	2800      	cmp	r0, #0
 8006956:	d117      	bne.n	8006988 <_dtoa_r+0x2b8>
 8006958:	21d5      	movs	r1, #213	; 0xd5
 800695a:	0002      	movs	r2, r0
 800695c:	4b43      	ldr	r3, [pc, #268]	; (8006a6c <_dtoa_r+0x39c>)
 800695e:	0049      	lsls	r1, r1, #1
 8006960:	e6cb      	b.n	80066fa <_dtoa_r+0x2a>
 8006962:	2301      	movs	r3, #1
 8006964:	e7de      	b.n	8006924 <_dtoa_r+0x254>
 8006966:	2300      	movs	r3, #0
 8006968:	940f      	str	r4, [sp, #60]	; 0x3c
 800696a:	9322      	str	r3, [sp, #136]	; 0x88
 800696c:	3b01      	subs	r3, #1
 800696e:	930c      	str	r3, [sp, #48]	; 0x30
 8006970:	9307      	str	r3, [sp, #28]
 8006972:	2200      	movs	r2, #0
 8006974:	3313      	adds	r3, #19
 8006976:	e7d0      	b.n	800691a <_dtoa_r+0x24a>
 8006978:	2301      	movs	r3, #1
 800697a:	930f      	str	r3, [sp, #60]	; 0x3c
 800697c:	3b02      	subs	r3, #2
 800697e:	e7f6      	b.n	800696e <_dtoa_r+0x29e>
 8006980:	3101      	adds	r1, #1
 8006982:	6041      	str	r1, [r0, #4]
 8006984:	0052      	lsls	r2, r2, #1
 8006986:	e7dc      	b.n	8006942 <_dtoa_r+0x272>
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	9a06      	ldr	r2, [sp, #24]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	9b07      	ldr	r3, [sp, #28]
 8006990:	2b0e      	cmp	r3, #14
 8006992:	d900      	bls.n	8006996 <_dtoa_r+0x2c6>
 8006994:	e0eb      	b.n	8006b6e <_dtoa_r+0x49e>
 8006996:	2c00      	cmp	r4, #0
 8006998:	d100      	bne.n	800699c <_dtoa_r+0x2cc>
 800699a:	e0e8      	b.n	8006b6e <_dtoa_r+0x49e>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dd68      	ble.n	8006a74 <_dtoa_r+0x3a4>
 80069a2:	001a      	movs	r2, r3
 80069a4:	210f      	movs	r1, #15
 80069a6:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <_dtoa_r+0x38c>)
 80069a8:	400a      	ands	r2, r1
 80069aa:	00d2      	lsls	r2, r2, #3
 80069ac:	189b      	adds	r3, r3, r2
 80069ae:	681d      	ldr	r5, [r3, #0]
 80069b0:	685e      	ldr	r6, [r3, #4]
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	111c      	asrs	r4, r3, #4
 80069b6:	2302      	movs	r3, #2
 80069b8:	9310      	str	r3, [sp, #64]	; 0x40
 80069ba:	9b02      	ldr	r3, [sp, #8]
 80069bc:	05db      	lsls	r3, r3, #23
 80069be:	d50b      	bpl.n	80069d8 <_dtoa_r+0x308>
 80069c0:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <_dtoa_r+0x3a0>)
 80069c2:	400c      	ands	r4, r1
 80069c4:	6a1a      	ldr	r2, [r3, #32]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80069ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069cc:	f7fa ff96 	bl	80018fc <__aeabi_ddiv>
 80069d0:	2303      	movs	r3, #3
 80069d2:	9008      	str	r0, [sp, #32]
 80069d4:	9109      	str	r1, [sp, #36]	; 0x24
 80069d6:	9310      	str	r3, [sp, #64]	; 0x40
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <_dtoa_r+0x3a0>)
 80069da:	9314      	str	r3, [sp, #80]	; 0x50
 80069dc:	2c00      	cmp	r4, #0
 80069de:	d108      	bne.n	80069f2 <_dtoa_r+0x322>
 80069e0:	9808      	ldr	r0, [sp, #32]
 80069e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069e4:	002a      	movs	r2, r5
 80069e6:	0033      	movs	r3, r6
 80069e8:	f7fa ff88 	bl	80018fc <__aeabi_ddiv>
 80069ec:	9008      	str	r0, [sp, #32]
 80069ee:	9109      	str	r1, [sp, #36]	; 0x24
 80069f0:	e05c      	b.n	8006aac <_dtoa_r+0x3dc>
 80069f2:	2301      	movs	r3, #1
 80069f4:	421c      	tst	r4, r3
 80069f6:	d00b      	beq.n	8006a10 <_dtoa_r+0x340>
 80069f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069fa:	0028      	movs	r0, r5
 80069fc:	3301      	adds	r3, #1
 80069fe:	9310      	str	r3, [sp, #64]	; 0x40
 8006a00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a02:	0031      	movs	r1, r6
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f7fb fb7a 	bl	8002100 <__aeabi_dmul>
 8006a0c:	0005      	movs	r5, r0
 8006a0e:	000e      	movs	r6, r1
 8006a10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a12:	1064      	asrs	r4, r4, #1
 8006a14:	3308      	adds	r3, #8
 8006a16:	e7e0      	b.n	80069da <_dtoa_r+0x30a>
 8006a18:	080093d9 	.word	0x080093d9
 8006a1c:	080093f0 	.word	0x080093f0
 8006a20:	7ff00000 	.word	0x7ff00000
 8006a24:	0000270f 	.word	0x0000270f
 8006a28:	080093d5 	.word	0x080093d5
 8006a2c:	080093d8 	.word	0x080093d8
 8006a30:	080093a8 	.word	0x080093a8
 8006a34:	080093a9 	.word	0x080093a9
 8006a38:	3ff00000 	.word	0x3ff00000
 8006a3c:	fffffc01 	.word	0xfffffc01
 8006a40:	3ff80000 	.word	0x3ff80000
 8006a44:	636f4361 	.word	0x636f4361
 8006a48:	3fd287a7 	.word	0x3fd287a7
 8006a4c:	8b60c8b3 	.word	0x8b60c8b3
 8006a50:	3fc68a28 	.word	0x3fc68a28
 8006a54:	509f79fb 	.word	0x509f79fb
 8006a58:	3fd34413 	.word	0x3fd34413
 8006a5c:	080094e0 	.word	0x080094e0
 8006a60:	00000432 	.word	0x00000432
 8006a64:	00000412 	.word	0x00000412
 8006a68:	fe100000 	.word	0xfe100000
 8006a6c:	0800944b 	.word	0x0800944b
 8006a70:	080094b8 	.word	0x080094b8
 8006a74:	2302      	movs	r3, #2
 8006a76:	9310      	str	r3, [sp, #64]	; 0x40
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <_dtoa_r+0x3dc>
 8006a7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a80:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a82:	425c      	negs	r4, r3
 8006a84:	230f      	movs	r3, #15
 8006a86:	4ab6      	ldr	r2, [pc, #728]	; (8006d60 <_dtoa_r+0x690>)
 8006a88:	4023      	ands	r3, r4
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	18d3      	adds	r3, r2, r3
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f7fb fb35 	bl	8002100 <__aeabi_dmul>
 8006a96:	2601      	movs	r6, #1
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9008      	str	r0, [sp, #32]
 8006a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a9e:	4db1      	ldr	r5, [pc, #708]	; (8006d64 <_dtoa_r+0x694>)
 8006aa0:	1124      	asrs	r4, r4, #4
 8006aa2:	2c00      	cmp	r4, #0
 8006aa4:	d000      	beq.n	8006aa8 <_dtoa_r+0x3d8>
 8006aa6:	e094      	b.n	8006bd2 <_dtoa_r+0x502>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d19f      	bne.n	80069ec <_dtoa_r+0x31c>
 8006aac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d100      	bne.n	8006ab4 <_dtoa_r+0x3e4>
 8006ab2:	e09b      	b.n	8006bec <_dtoa_r+0x51c>
 8006ab4:	9c08      	ldr	r4, [sp, #32]
 8006ab6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ab8:	2200      	movs	r2, #0
 8006aba:	0020      	movs	r0, r4
 8006abc:	0029      	movs	r1, r5
 8006abe:	4baa      	ldr	r3, [pc, #680]	; (8006d68 <_dtoa_r+0x698>)
 8006ac0:	f7f9 fcca 	bl	8000458 <__aeabi_dcmplt>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d100      	bne.n	8006aca <_dtoa_r+0x3fa>
 8006ac8:	e090      	b.n	8006bec <_dtoa_r+0x51c>
 8006aca:	9b07      	ldr	r3, [sp, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d100      	bne.n	8006ad2 <_dtoa_r+0x402>
 8006ad0:	e08c      	b.n	8006bec <_dtoa_r+0x51c>
 8006ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dd46      	ble.n	8006b66 <_dtoa_r+0x496>
 8006ad8:	9b02      	ldr	r3, [sp, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	0020      	movs	r0, r4
 8006ade:	0029      	movs	r1, r5
 8006ae0:	1e5e      	subs	r6, r3, #1
 8006ae2:	4ba2      	ldr	r3, [pc, #648]	; (8006d6c <_dtoa_r+0x69c>)
 8006ae4:	f7fb fb0c 	bl	8002100 <__aeabi_dmul>
 8006ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006aea:	9008      	str	r0, [sp, #32]
 8006aec:	9109      	str	r1, [sp, #36]	; 0x24
 8006aee:	3301      	adds	r3, #1
 8006af0:	9310      	str	r3, [sp, #64]	; 0x40
 8006af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006af4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006af6:	9c08      	ldr	r4, [sp, #32]
 8006af8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006afa:	9314      	str	r3, [sp, #80]	; 0x50
 8006afc:	f7fc f952 	bl	8002da4 <__aeabi_i2d>
 8006b00:	0022      	movs	r2, r4
 8006b02:	002b      	movs	r3, r5
 8006b04:	f7fb fafc 	bl	8002100 <__aeabi_dmul>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4b99      	ldr	r3, [pc, #612]	; (8006d70 <_dtoa_r+0x6a0>)
 8006b0c:	f7fa fbba 	bl	8001284 <__aeabi_dadd>
 8006b10:	9010      	str	r0, [sp, #64]	; 0x40
 8006b12:	9111      	str	r1, [sp, #68]	; 0x44
 8006b14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b18:	9208      	str	r2, [sp, #32]
 8006b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1c:	4a95      	ldr	r2, [pc, #596]	; (8006d74 <_dtoa_r+0x6a4>)
 8006b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b20:	4694      	mov	ip, r2
 8006b22:	4463      	add	r3, ip
 8006b24:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b26:	9309      	str	r3, [sp, #36]	; 0x24
 8006b28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d161      	bne.n	8006bf2 <_dtoa_r+0x522>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	0020      	movs	r0, r4
 8006b32:	0029      	movs	r1, r5
 8006b34:	4b90      	ldr	r3, [pc, #576]	; (8006d78 <_dtoa_r+0x6a8>)
 8006b36:	f7fb fd4f 	bl	80025d8 <__aeabi_dsub>
 8006b3a:	9a08      	ldr	r2, [sp, #32]
 8006b3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b3e:	0004      	movs	r4, r0
 8006b40:	000d      	movs	r5, r1
 8006b42:	f7f9 fc9d 	bl	8000480 <__aeabi_dcmpgt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d000      	beq.n	8006b4c <_dtoa_r+0x47c>
 8006b4a:	e2af      	b.n	80070ac <_dtoa_r+0x9dc>
 8006b4c:	488b      	ldr	r0, [pc, #556]	; (8006d7c <_dtoa_r+0x6ac>)
 8006b4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b50:	4684      	mov	ip, r0
 8006b52:	4461      	add	r1, ip
 8006b54:	000b      	movs	r3, r1
 8006b56:	0020      	movs	r0, r4
 8006b58:	0029      	movs	r1, r5
 8006b5a:	9a08      	ldr	r2, [sp, #32]
 8006b5c:	f7f9 fc7c 	bl	8000458 <__aeabi_dcmplt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d000      	beq.n	8006b66 <_dtoa_r+0x496>
 8006b64:	e29f      	b.n	80070a6 <_dtoa_r+0x9d6>
 8006b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006b6a:	9308      	str	r3, [sp, #32]
 8006b6c:	9409      	str	r4, [sp, #36]	; 0x24
 8006b6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da00      	bge.n	8006b76 <_dtoa_r+0x4a6>
 8006b74:	e172      	b.n	8006e5c <_dtoa_r+0x78c>
 8006b76:	9a02      	ldr	r2, [sp, #8]
 8006b78:	2a0e      	cmp	r2, #14
 8006b7a:	dd00      	ble.n	8006b7e <_dtoa_r+0x4ae>
 8006b7c:	e16e      	b.n	8006e5c <_dtoa_r+0x78c>
 8006b7e:	4b78      	ldr	r3, [pc, #480]	; (8006d60 <_dtoa_r+0x690>)
 8006b80:	00d2      	lsls	r2, r2, #3
 8006b82:	189b      	adds	r3, r3, r2
 8006b84:	685c      	ldr	r4, [r3, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	930a      	str	r3, [sp, #40]	; 0x28
 8006b8a:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	db00      	blt.n	8006b94 <_dtoa_r+0x4c4>
 8006b92:	e0f7      	b.n	8006d84 <_dtoa_r+0x6b4>
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd00      	ble.n	8006b9c <_dtoa_r+0x4cc>
 8006b9a:	e0f3      	b.n	8006d84 <_dtoa_r+0x6b4>
 8006b9c:	d000      	beq.n	8006ba0 <_dtoa_r+0x4d0>
 8006b9e:	e282      	b.n	80070a6 <_dtoa_r+0x9d6>
 8006ba0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4b74      	ldr	r3, [pc, #464]	; (8006d78 <_dtoa_r+0x6a8>)
 8006ba8:	f7fb faaa 	bl	8002100 <__aeabi_dmul>
 8006bac:	9a08      	ldr	r2, [sp, #32]
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	f7f9 fc70 	bl	8000494 <__aeabi_dcmpge>
 8006bb4:	9e07      	ldr	r6, [sp, #28]
 8006bb6:	0035      	movs	r5, r6
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d000      	beq.n	8006bbe <_dtoa_r+0x4ee>
 8006bbc:	e259      	b.n	8007072 <_dtoa_r+0x9a2>
 8006bbe:	9b06      	ldr	r3, [sp, #24]
 8006bc0:	9a06      	ldr	r2, [sp, #24]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	9308      	str	r3, [sp, #32]
 8006bc6:	2331      	movs	r3, #49	; 0x31
 8006bc8:	7013      	strb	r3, [r2, #0]
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	9302      	str	r3, [sp, #8]
 8006bd0:	e254      	b.n	800707c <_dtoa_r+0x9ac>
 8006bd2:	4234      	tst	r4, r6
 8006bd4:	d007      	beq.n	8006be6 <_dtoa_r+0x516>
 8006bd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bd8:	3301      	adds	r3, #1
 8006bda:	9310      	str	r3, [sp, #64]	; 0x40
 8006bdc:	682a      	ldr	r2, [r5, #0]
 8006bde:	686b      	ldr	r3, [r5, #4]
 8006be0:	f7fb fa8e 	bl	8002100 <__aeabi_dmul>
 8006be4:	0033      	movs	r3, r6
 8006be6:	1064      	asrs	r4, r4, #1
 8006be8:	3508      	adds	r5, #8
 8006bea:	e75a      	b.n	8006aa2 <_dtoa_r+0x3d2>
 8006bec:	9e02      	ldr	r6, [sp, #8]
 8006bee:	9b07      	ldr	r3, [sp, #28]
 8006bf0:	e780      	b.n	8006af4 <_dtoa_r+0x424>
 8006bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006bf6:	1e5a      	subs	r2, r3, #1
 8006bf8:	4b59      	ldr	r3, [pc, #356]	; (8006d60 <_dtoa_r+0x690>)
 8006bfa:	00d2      	lsls	r2, r2, #3
 8006bfc:	189b      	adds	r3, r3, r2
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d051      	beq.n	8006caa <_dtoa_r+0x5da>
 8006c06:	2000      	movs	r0, #0
 8006c08:	495d      	ldr	r1, [pc, #372]	; (8006d80 <_dtoa_r+0x6b0>)
 8006c0a:	f7fa fe77 	bl	80018fc <__aeabi_ddiv>
 8006c0e:	9a08      	ldr	r2, [sp, #32]
 8006c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c12:	f7fb fce1 	bl	80025d8 <__aeabi_dsub>
 8006c16:	9a06      	ldr	r2, [sp, #24]
 8006c18:	9b06      	ldr	r3, [sp, #24]
 8006c1a:	4694      	mov	ip, r2
 8006c1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c20:	9010      	str	r0, [sp, #64]	; 0x40
 8006c22:	9111      	str	r1, [sp, #68]	; 0x44
 8006c24:	4463      	add	r3, ip
 8006c26:	9319      	str	r3, [sp, #100]	; 0x64
 8006c28:	0029      	movs	r1, r5
 8006c2a:	0020      	movs	r0, r4
 8006c2c:	f7fc f884 	bl	8002d38 <__aeabi_d2iz>
 8006c30:	9014      	str	r0, [sp, #80]	; 0x50
 8006c32:	f7fc f8b7 	bl	8002da4 <__aeabi_i2d>
 8006c36:	0002      	movs	r2, r0
 8006c38:	000b      	movs	r3, r1
 8006c3a:	0020      	movs	r0, r4
 8006c3c:	0029      	movs	r1, r5
 8006c3e:	f7fb fccb 	bl	80025d8 <__aeabi_dsub>
 8006c42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c46:	3301      	adds	r3, #1
 8006c48:	9308      	str	r3, [sp, #32]
 8006c4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c4c:	0004      	movs	r4, r0
 8006c4e:	3330      	adds	r3, #48	; 0x30
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c56:	000d      	movs	r5, r1
 8006c58:	f7f9 fbfe 	bl	8000458 <__aeabi_dcmplt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d175      	bne.n	8006d4c <_dtoa_r+0x67c>
 8006c60:	0022      	movs	r2, r4
 8006c62:	002b      	movs	r3, r5
 8006c64:	2000      	movs	r0, #0
 8006c66:	4940      	ldr	r1, [pc, #256]	; (8006d68 <_dtoa_r+0x698>)
 8006c68:	f7fb fcb6 	bl	80025d8 <__aeabi_dsub>
 8006c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c70:	f7f9 fbf2 	bl	8000458 <__aeabi_dcmplt>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d000      	beq.n	8006c7a <_dtoa_r+0x5aa>
 8006c78:	e0d2      	b.n	8006e20 <_dtoa_r+0x750>
 8006c7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c7c:	9a08      	ldr	r2, [sp, #32]
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d100      	bne.n	8006c84 <_dtoa_r+0x5b4>
 8006c82:	e770      	b.n	8006b66 <_dtoa_r+0x496>
 8006c84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006c86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4b38      	ldr	r3, [pc, #224]	; (8006d6c <_dtoa_r+0x69c>)
 8006c8c:	f7fb fa38 	bl	8002100 <__aeabi_dmul>
 8006c90:	4b36      	ldr	r3, [pc, #216]	; (8006d6c <_dtoa_r+0x69c>)
 8006c92:	9010      	str	r0, [sp, #64]	; 0x40
 8006c94:	9111      	str	r1, [sp, #68]	; 0x44
 8006c96:	2200      	movs	r2, #0
 8006c98:	0020      	movs	r0, r4
 8006c9a:	0029      	movs	r1, r5
 8006c9c:	f7fb fa30 	bl	8002100 <__aeabi_dmul>
 8006ca0:	9b08      	ldr	r3, [sp, #32]
 8006ca2:	0004      	movs	r4, r0
 8006ca4:	000d      	movs	r5, r1
 8006ca6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ca8:	e7be      	b.n	8006c28 <_dtoa_r+0x558>
 8006caa:	9808      	ldr	r0, [sp, #32]
 8006cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cae:	f7fb fa27 	bl	8002100 <__aeabi_dmul>
 8006cb2:	9a06      	ldr	r2, [sp, #24]
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	4694      	mov	ip, r2
 8006cb8:	9308      	str	r3, [sp, #32]
 8006cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cbc:	9010      	str	r0, [sp, #64]	; 0x40
 8006cbe:	9111      	str	r1, [sp, #68]	; 0x44
 8006cc0:	4463      	add	r3, ip
 8006cc2:	9319      	str	r3, [sp, #100]	; 0x64
 8006cc4:	0029      	movs	r1, r5
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f7fc f836 	bl	8002d38 <__aeabi_d2iz>
 8006ccc:	9017      	str	r0, [sp, #92]	; 0x5c
 8006cce:	f7fc f869 	bl	8002da4 <__aeabi_i2d>
 8006cd2:	0002      	movs	r2, r0
 8006cd4:	000b      	movs	r3, r1
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	0029      	movs	r1, r5
 8006cda:	f7fb fc7d 	bl	80025d8 <__aeabi_dsub>
 8006cde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ce0:	9a08      	ldr	r2, [sp, #32]
 8006ce2:	3330      	adds	r3, #48	; 0x30
 8006ce4:	7013      	strb	r3, [r2, #0]
 8006ce6:	0013      	movs	r3, r2
 8006ce8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006cea:	3301      	adds	r3, #1
 8006cec:	0004      	movs	r4, r0
 8006cee:	000d      	movs	r5, r1
 8006cf0:	9308      	str	r3, [sp, #32]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d12c      	bne.n	8006d50 <_dtoa_r+0x680>
 8006cf6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006cf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cfa:	9a06      	ldr	r2, [sp, #24]
 8006cfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cfe:	4694      	mov	ip, r2
 8006d00:	4463      	add	r3, ip
 8006d02:	2200      	movs	r2, #0
 8006d04:	9308      	str	r3, [sp, #32]
 8006d06:	4b1e      	ldr	r3, [pc, #120]	; (8006d80 <_dtoa_r+0x6b0>)
 8006d08:	f7fa fabc 	bl	8001284 <__aeabi_dadd>
 8006d0c:	0002      	movs	r2, r0
 8006d0e:	000b      	movs	r3, r1
 8006d10:	0020      	movs	r0, r4
 8006d12:	0029      	movs	r1, r5
 8006d14:	f7f9 fbb4 	bl	8000480 <__aeabi_dcmpgt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d000      	beq.n	8006d1e <_dtoa_r+0x64e>
 8006d1c:	e080      	b.n	8006e20 <_dtoa_r+0x750>
 8006d1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d22:	2000      	movs	r0, #0
 8006d24:	4916      	ldr	r1, [pc, #88]	; (8006d80 <_dtoa_r+0x6b0>)
 8006d26:	f7fb fc57 	bl	80025d8 <__aeabi_dsub>
 8006d2a:	0002      	movs	r2, r0
 8006d2c:	000b      	movs	r3, r1
 8006d2e:	0020      	movs	r0, r4
 8006d30:	0029      	movs	r1, r5
 8006d32:	f7f9 fb91 	bl	8000458 <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d100      	bne.n	8006d3c <_dtoa_r+0x66c>
 8006d3a:	e714      	b.n	8006b66 <_dtoa_r+0x496>
 8006d3c:	9b08      	ldr	r3, [sp, #32]
 8006d3e:	001a      	movs	r2, r3
 8006d40:	3a01      	subs	r2, #1
 8006d42:	9208      	str	r2, [sp, #32]
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	2a30      	cmp	r2, #48	; 0x30
 8006d48:	d0f8      	beq.n	8006d3c <_dtoa_r+0x66c>
 8006d4a:	9308      	str	r3, [sp, #32]
 8006d4c:	9602      	str	r6, [sp, #8]
 8006d4e:	e055      	b.n	8006dfc <_dtoa_r+0x72c>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <_dtoa_r+0x69c>)
 8006d54:	f7fb f9d4 	bl	8002100 <__aeabi_dmul>
 8006d58:	0004      	movs	r4, r0
 8006d5a:	000d      	movs	r5, r1
 8006d5c:	e7b2      	b.n	8006cc4 <_dtoa_r+0x5f4>
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	080094e0 	.word	0x080094e0
 8006d64:	080094b8 	.word	0x080094b8
 8006d68:	3ff00000 	.word	0x3ff00000
 8006d6c:	40240000 	.word	0x40240000
 8006d70:	401c0000 	.word	0x401c0000
 8006d74:	fcc00000 	.word	0xfcc00000
 8006d78:	40140000 	.word	0x40140000
 8006d7c:	7cc00000 	.word	0x7cc00000
 8006d80:	3fe00000 	.word	0x3fe00000
 8006d84:	9b07      	ldr	r3, [sp, #28]
 8006d86:	9e06      	ldr	r6, [sp, #24]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	199b      	adds	r3, r3, r6
 8006d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d8e:	9c08      	ldr	r4, [sp, #32]
 8006d90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d96:	0020      	movs	r0, r4
 8006d98:	0029      	movs	r1, r5
 8006d9a:	f7fa fdaf 	bl	80018fc <__aeabi_ddiv>
 8006d9e:	f7fb ffcb 	bl	8002d38 <__aeabi_d2iz>
 8006da2:	9007      	str	r0, [sp, #28]
 8006da4:	f7fb fffe 	bl	8002da4 <__aeabi_i2d>
 8006da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dac:	f7fb f9a8 	bl	8002100 <__aeabi_dmul>
 8006db0:	0002      	movs	r2, r0
 8006db2:	000b      	movs	r3, r1
 8006db4:	0020      	movs	r0, r4
 8006db6:	0029      	movs	r1, r5
 8006db8:	f7fb fc0e 	bl	80025d8 <__aeabi_dsub>
 8006dbc:	0033      	movs	r3, r6
 8006dbe:	9a07      	ldr	r2, [sp, #28]
 8006dc0:	3601      	adds	r6, #1
 8006dc2:	3230      	adds	r2, #48	; 0x30
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dc8:	9608      	str	r6, [sp, #32]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d139      	bne.n	8006e42 <_dtoa_r+0x772>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	000b      	movs	r3, r1
 8006dd2:	f7fa fa57 	bl	8001284 <__aeabi_dadd>
 8006dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dda:	0004      	movs	r4, r0
 8006ddc:	000d      	movs	r5, r1
 8006dde:	f7f9 fb4f 	bl	8000480 <__aeabi_dcmpgt>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d11b      	bne.n	8006e1e <_dtoa_r+0x74e>
 8006de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dea:	0020      	movs	r0, r4
 8006dec:	0029      	movs	r1, r5
 8006dee:	f7f9 fb2d 	bl	800044c <__aeabi_dcmpeq>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d002      	beq.n	8006dfc <_dtoa_r+0x72c>
 8006df6:	9b07      	ldr	r3, [sp, #28]
 8006df8:	07db      	lsls	r3, r3, #31
 8006dfa:	d410      	bmi.n	8006e1e <_dtoa_r+0x74e>
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	9905      	ldr	r1, [sp, #20]
 8006e00:	f000 fae6 	bl	80073d0 <_Bfree>
 8006e04:	2300      	movs	r3, #0
 8006e06:	9a08      	ldr	r2, [sp, #32]
 8006e08:	9802      	ldr	r0, [sp, #8]
 8006e0a:	7013      	strb	r3, [r2, #0]
 8006e0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e0e:	3001      	adds	r0, #1
 8006e10:	6018      	str	r0, [r3, #0]
 8006e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d100      	bne.n	8006e1a <_dtoa_r+0x74a>
 8006e18:	e4a6      	b.n	8006768 <_dtoa_r+0x98>
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e4a4      	b.n	8006768 <_dtoa_r+0x98>
 8006e1e:	9e02      	ldr	r6, [sp, #8]
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	9308      	str	r3, [sp, #32]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	781a      	ldrb	r2, [r3, #0]
 8006e28:	2a39      	cmp	r2, #57	; 0x39
 8006e2a:	d106      	bne.n	8006e3a <_dtoa_r+0x76a>
 8006e2c:	9a06      	ldr	r2, [sp, #24]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d1f7      	bne.n	8006e22 <_dtoa_r+0x752>
 8006e32:	2230      	movs	r2, #48	; 0x30
 8006e34:	9906      	ldr	r1, [sp, #24]
 8006e36:	3601      	adds	r6, #1
 8006e38:	700a      	strb	r2, [r1, #0]
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	3201      	adds	r2, #1
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e784      	b.n	8006d4c <_dtoa_r+0x67c>
 8006e42:	2200      	movs	r2, #0
 8006e44:	4baa      	ldr	r3, [pc, #680]	; (80070f0 <_dtoa_r+0xa20>)
 8006e46:	f7fb f95b 	bl	8002100 <__aeabi_dmul>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	0004      	movs	r4, r0
 8006e50:	000d      	movs	r5, r1
 8006e52:	f7f9 fafb 	bl	800044c <__aeabi_dcmpeq>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d09b      	beq.n	8006d92 <_dtoa_r+0x6c2>
 8006e5a:	e7cf      	b.n	8006dfc <_dtoa_r+0x72c>
 8006e5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006e60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e62:	2d00      	cmp	r5, #0
 8006e64:	d012      	beq.n	8006e8c <_dtoa_r+0x7bc>
 8006e66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e68:	2a01      	cmp	r2, #1
 8006e6a:	dc66      	bgt.n	8006f3a <_dtoa_r+0x86a>
 8006e6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d05d      	beq.n	8006f2e <_dtoa_r+0x85e>
 8006e72:	4aa0      	ldr	r2, [pc, #640]	; (80070f4 <_dtoa_r+0xa24>)
 8006e74:	189b      	adds	r3, r3, r2
 8006e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e78:	2101      	movs	r1, #1
 8006e7a:	18d2      	adds	r2, r2, r3
 8006e7c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e80:	0038      	movs	r0, r7
 8006e82:	18d3      	adds	r3, r2, r3
 8006e84:	930d      	str	r3, [sp, #52]	; 0x34
 8006e86:	f000 fb53 	bl	8007530 <__i2b>
 8006e8a:	0005      	movs	r5, r0
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	dd0e      	ble.n	8006eae <_dtoa_r+0x7de>
 8006e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd0b      	ble.n	8006eae <_dtoa_r+0x7de>
 8006e96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e98:	0023      	movs	r3, r4
 8006e9a:	4294      	cmp	r4, r2
 8006e9c:	dd00      	ble.n	8006ea0 <_dtoa_r+0x7d0>
 8006e9e:	0013      	movs	r3, r2
 8006ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea2:	1ae4      	subs	r4, r4, r3
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	930d      	str	r3, [sp, #52]	; 0x34
 8006eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01f      	beq.n	8006ef4 <_dtoa_r+0x824>
 8006eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d054      	beq.n	8006f64 <_dtoa_r+0x894>
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	dd11      	ble.n	8006ee2 <_dtoa_r+0x812>
 8006ebe:	0029      	movs	r1, r5
 8006ec0:	0032      	movs	r2, r6
 8006ec2:	0038      	movs	r0, r7
 8006ec4:	f000 fbfa 	bl	80076bc <__pow5mult>
 8006ec8:	9a05      	ldr	r2, [sp, #20]
 8006eca:	0001      	movs	r1, r0
 8006ecc:	0005      	movs	r5, r0
 8006ece:	0038      	movs	r0, r7
 8006ed0:	f000 fb44 	bl	800755c <__multiply>
 8006ed4:	9905      	ldr	r1, [sp, #20]
 8006ed6:	9014      	str	r0, [sp, #80]	; 0x50
 8006ed8:	0038      	movs	r0, r7
 8006eda:	f000 fa79 	bl	80073d0 <_Bfree>
 8006ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ee0:	9305      	str	r3, [sp, #20]
 8006ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee4:	1b9a      	subs	r2, r3, r6
 8006ee6:	42b3      	cmp	r3, r6
 8006ee8:	d004      	beq.n	8006ef4 <_dtoa_r+0x824>
 8006eea:	0038      	movs	r0, r7
 8006eec:	9905      	ldr	r1, [sp, #20]
 8006eee:	f000 fbe5 	bl	80076bc <__pow5mult>
 8006ef2:	9005      	str	r0, [sp, #20]
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	0038      	movs	r0, r7
 8006ef8:	f000 fb1a 	bl	8007530 <__i2b>
 8006efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006efe:	0006      	movs	r6, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dd31      	ble.n	8006f68 <_dtoa_r+0x898>
 8006f04:	001a      	movs	r2, r3
 8006f06:	0001      	movs	r1, r0
 8006f08:	0038      	movs	r0, r7
 8006f0a:	f000 fbd7 	bl	80076bc <__pow5mult>
 8006f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f10:	0006      	movs	r6, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	dd2d      	ble.n	8006f72 <_dtoa_r+0x8a2>
 8006f16:	2300      	movs	r3, #0
 8006f18:	930e      	str	r3, [sp, #56]	; 0x38
 8006f1a:	6933      	ldr	r3, [r6, #16]
 8006f1c:	3303      	adds	r3, #3
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	18f3      	adds	r3, r6, r3
 8006f22:	6858      	ldr	r0, [r3, #4]
 8006f24:	f000 fabc 	bl	80074a0 <__hi0bits>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	1a18      	subs	r0, r3, r0
 8006f2c:	e039      	b.n	8006fa2 <_dtoa_r+0x8d2>
 8006f2e:	2336      	movs	r3, #54	; 0x36
 8006f30:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006f32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006f34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	e79d      	b.n	8006e76 <_dtoa_r+0x7a6>
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	1e5e      	subs	r6, r3, #1
 8006f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	db07      	blt.n	8006f54 <_dtoa_r+0x884>
 8006f44:	1b9e      	subs	r6, r3, r6
 8006f46:	9b07      	ldr	r3, [sp, #28]
 8006f48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da93      	bge.n	8006e76 <_dtoa_r+0x7a6>
 8006f4e:	1ae4      	subs	r4, r4, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	e790      	b.n	8006e76 <_dtoa_r+0x7a6>
 8006f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f58:	1af3      	subs	r3, r6, r3
 8006f5a:	18d3      	adds	r3, r2, r3
 8006f5c:	960e      	str	r6, [sp, #56]	; 0x38
 8006f5e:	9315      	str	r3, [sp, #84]	; 0x54
 8006f60:	2600      	movs	r6, #0
 8006f62:	e7f0      	b.n	8006f46 <_dtoa_r+0x876>
 8006f64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f66:	e7c0      	b.n	8006eea <_dtoa_r+0x81a>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	dc13      	bgt.n	8006f9a <_dtoa_r+0x8ca>
 8006f72:	2300      	movs	r3, #0
 8006f74:	930e      	str	r3, [sp, #56]	; 0x38
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10e      	bne.n	8006f9a <_dtoa_r+0x8ca>
 8006f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7e:	031b      	lsls	r3, r3, #12
 8006f80:	d10b      	bne.n	8006f9a <_dtoa_r+0x8ca>
 8006f82:	4b5d      	ldr	r3, [pc, #372]	; (80070f8 <_dtoa_r+0xa28>)
 8006f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f86:	4213      	tst	r3, r2
 8006f88:	d007      	beq.n	8006f9a <_dtoa_r+0x8ca>
 8006f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f92:	3301      	adds	r3, #1
 8006f94:	930d      	str	r3, [sp, #52]	; 0x34
 8006f96:	2301      	movs	r3, #1
 8006f98:	930e      	str	r3, [sp, #56]	; 0x38
 8006f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1bb      	bne.n	8006f1a <_dtoa_r+0x84a>
 8006fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fa4:	221f      	movs	r2, #31
 8006fa6:	1818      	adds	r0, r3, r0
 8006fa8:	0003      	movs	r3, r0
 8006faa:	4013      	ands	r3, r2
 8006fac:	4210      	tst	r0, r2
 8006fae:	d046      	beq.n	800703e <_dtoa_r+0x96e>
 8006fb0:	3201      	adds	r2, #1
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	2a04      	cmp	r2, #4
 8006fb6:	dd3f      	ble.n	8007038 <_dtoa_r+0x968>
 8006fb8:	221c      	movs	r2, #28
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fbe:	18e4      	adds	r4, r4, r3
 8006fc0:	18d2      	adds	r2, r2, r3
 8006fc2:	920a      	str	r2, [sp, #40]	; 0x28
 8006fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fc6:	18d3      	adds	r3, r2, r3
 8006fc8:	930d      	str	r3, [sp, #52]	; 0x34
 8006fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dd05      	ble.n	8006fdc <_dtoa_r+0x90c>
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	0038      	movs	r0, r7
 8006fd4:	9905      	ldr	r1, [sp, #20]
 8006fd6:	f000 fbcd 	bl	8007774 <__lshift>
 8006fda:	9005      	str	r0, [sp, #20]
 8006fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dd05      	ble.n	8006fee <_dtoa_r+0x91e>
 8006fe2:	0031      	movs	r1, r6
 8006fe4:	001a      	movs	r2, r3
 8006fe6:	0038      	movs	r0, r7
 8006fe8:	f000 fbc4 	bl	8007774 <__lshift>
 8006fec:	0006      	movs	r6, r0
 8006fee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d026      	beq.n	8007042 <_dtoa_r+0x972>
 8006ff4:	0031      	movs	r1, r6
 8006ff6:	9805      	ldr	r0, [sp, #20]
 8006ff8:	f000 fc2a 	bl	8007850 <__mcmp>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	da20      	bge.n	8007042 <_dtoa_r+0x972>
 8007000:	9b02      	ldr	r3, [sp, #8]
 8007002:	220a      	movs	r2, #10
 8007004:	3b01      	subs	r3, #1
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	0038      	movs	r0, r7
 800700a:	2300      	movs	r3, #0
 800700c:	9905      	ldr	r1, [sp, #20]
 800700e:	f000 fa03 	bl	8007418 <__multadd>
 8007012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007014:	9005      	str	r0, [sp, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d100      	bne.n	800701c <_dtoa_r+0x94c>
 800701a:	e166      	b.n	80072ea <_dtoa_r+0xc1a>
 800701c:	2300      	movs	r3, #0
 800701e:	0029      	movs	r1, r5
 8007020:	220a      	movs	r2, #10
 8007022:	0038      	movs	r0, r7
 8007024:	f000 f9f8 	bl	8007418 <__multadd>
 8007028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800702a:	0005      	movs	r5, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	dc47      	bgt.n	80070c0 <_dtoa_r+0x9f0>
 8007030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007032:	2b02      	cmp	r3, #2
 8007034:	dc0d      	bgt.n	8007052 <_dtoa_r+0x982>
 8007036:	e043      	b.n	80070c0 <_dtoa_r+0x9f0>
 8007038:	2a04      	cmp	r2, #4
 800703a:	d0c6      	beq.n	8006fca <_dtoa_r+0x8fa>
 800703c:	0013      	movs	r3, r2
 800703e:	331c      	adds	r3, #28
 8007040:	e7bc      	b.n	8006fbc <_dtoa_r+0x8ec>
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc35      	bgt.n	80070b4 <_dtoa_r+0x9e4>
 8007048:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800704a:	2b02      	cmp	r3, #2
 800704c:	dd32      	ble.n	80070b4 <_dtoa_r+0x9e4>
 800704e:	9b07      	ldr	r3, [sp, #28]
 8007050:	930c      	str	r3, [sp, #48]	; 0x30
 8007052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10c      	bne.n	8007072 <_dtoa_r+0x9a2>
 8007058:	0031      	movs	r1, r6
 800705a:	2205      	movs	r2, #5
 800705c:	0038      	movs	r0, r7
 800705e:	f000 f9db 	bl	8007418 <__multadd>
 8007062:	0006      	movs	r6, r0
 8007064:	0001      	movs	r1, r0
 8007066:	9805      	ldr	r0, [sp, #20]
 8007068:	f000 fbf2 	bl	8007850 <__mcmp>
 800706c:	2800      	cmp	r0, #0
 800706e:	dd00      	ble.n	8007072 <_dtoa_r+0x9a2>
 8007070:	e5a5      	b.n	8006bbe <_dtoa_r+0x4ee>
 8007072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007074:	43db      	mvns	r3, r3
 8007076:	9302      	str	r3, [sp, #8]
 8007078:	9b06      	ldr	r3, [sp, #24]
 800707a:	9308      	str	r3, [sp, #32]
 800707c:	2400      	movs	r4, #0
 800707e:	0031      	movs	r1, r6
 8007080:	0038      	movs	r0, r7
 8007082:	f000 f9a5 	bl	80073d0 <_Bfree>
 8007086:	2d00      	cmp	r5, #0
 8007088:	d100      	bne.n	800708c <_dtoa_r+0x9bc>
 800708a:	e6b7      	b.n	8006dfc <_dtoa_r+0x72c>
 800708c:	2c00      	cmp	r4, #0
 800708e:	d005      	beq.n	800709c <_dtoa_r+0x9cc>
 8007090:	42ac      	cmp	r4, r5
 8007092:	d003      	beq.n	800709c <_dtoa_r+0x9cc>
 8007094:	0021      	movs	r1, r4
 8007096:	0038      	movs	r0, r7
 8007098:	f000 f99a 	bl	80073d0 <_Bfree>
 800709c:	0029      	movs	r1, r5
 800709e:	0038      	movs	r0, r7
 80070a0:	f000 f996 	bl	80073d0 <_Bfree>
 80070a4:	e6aa      	b.n	8006dfc <_dtoa_r+0x72c>
 80070a6:	2600      	movs	r6, #0
 80070a8:	0035      	movs	r5, r6
 80070aa:	e7e2      	b.n	8007072 <_dtoa_r+0x9a2>
 80070ac:	9602      	str	r6, [sp, #8]
 80070ae:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80070b0:	0035      	movs	r5, r6
 80070b2:	e584      	b.n	8006bbe <_dtoa_r+0x4ee>
 80070b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d100      	bne.n	80070bc <_dtoa_r+0x9ec>
 80070ba:	e0ce      	b.n	800725a <_dtoa_r+0xb8a>
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	930c      	str	r3, [sp, #48]	; 0x30
 80070c0:	2c00      	cmp	r4, #0
 80070c2:	dd05      	ble.n	80070d0 <_dtoa_r+0xa00>
 80070c4:	0029      	movs	r1, r5
 80070c6:	0022      	movs	r2, r4
 80070c8:	0038      	movs	r0, r7
 80070ca:	f000 fb53 	bl	8007774 <__lshift>
 80070ce:	0005      	movs	r5, r0
 80070d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070d2:	0028      	movs	r0, r5
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d022      	beq.n	800711e <_dtoa_r+0xa4e>
 80070d8:	0038      	movs	r0, r7
 80070da:	6869      	ldr	r1, [r5, #4]
 80070dc:	f000 f934 	bl	8007348 <_Balloc>
 80070e0:	1e04      	subs	r4, r0, #0
 80070e2:	d10f      	bne.n	8007104 <_dtoa_r+0xa34>
 80070e4:	0002      	movs	r2, r0
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <_dtoa_r+0xa2c>)
 80070e8:	4905      	ldr	r1, [pc, #20]	; (8007100 <_dtoa_r+0xa30>)
 80070ea:	f7ff fb06 	bl	80066fa <_dtoa_r+0x2a>
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	40240000 	.word	0x40240000
 80070f4:	00000433 	.word	0x00000433
 80070f8:	7ff00000 	.word	0x7ff00000
 80070fc:	0800944b 	.word	0x0800944b
 8007100:	000002ea 	.word	0x000002ea
 8007104:	0029      	movs	r1, r5
 8007106:	692b      	ldr	r3, [r5, #16]
 8007108:	310c      	adds	r1, #12
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	0092      	lsls	r2, r2, #2
 800710e:	300c      	adds	r0, #12
 8007110:	f000 f911 	bl	8007336 <memcpy>
 8007114:	2201      	movs	r2, #1
 8007116:	0021      	movs	r1, r4
 8007118:	0038      	movs	r0, r7
 800711a:	f000 fb2b 	bl	8007774 <__lshift>
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007122:	930a      	str	r3, [sp, #40]	; 0x28
 8007124:	3b01      	subs	r3, #1
 8007126:	189b      	adds	r3, r3, r2
 8007128:	2201      	movs	r2, #1
 800712a:	002c      	movs	r4, r5
 800712c:	0005      	movs	r5, r0
 800712e:	9314      	str	r3, [sp, #80]	; 0x50
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	4013      	ands	r3, r2
 8007134:	930f      	str	r3, [sp, #60]	; 0x3c
 8007136:	0031      	movs	r1, r6
 8007138:	9805      	ldr	r0, [sp, #20]
 800713a:	f7ff fa3d 	bl	80065b8 <quorem>
 800713e:	0003      	movs	r3, r0
 8007140:	0021      	movs	r1, r4
 8007142:	3330      	adds	r3, #48	; 0x30
 8007144:	900d      	str	r0, [sp, #52]	; 0x34
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	9307      	str	r3, [sp, #28]
 800714a:	f000 fb81 	bl	8007850 <__mcmp>
 800714e:	002a      	movs	r2, r5
 8007150:	900e      	str	r0, [sp, #56]	; 0x38
 8007152:	0031      	movs	r1, r6
 8007154:	0038      	movs	r0, r7
 8007156:	f000 fb97 	bl	8007888 <__mdiff>
 800715a:	68c3      	ldr	r3, [r0, #12]
 800715c:	9008      	str	r0, [sp, #32]
 800715e:	9310      	str	r3, [sp, #64]	; 0x40
 8007160:	2301      	movs	r3, #1
 8007162:	930c      	str	r3, [sp, #48]	; 0x30
 8007164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <_dtoa_r+0xaa4>
 800716a:	0001      	movs	r1, r0
 800716c:	9805      	ldr	r0, [sp, #20]
 800716e:	f000 fb6f 	bl	8007850 <__mcmp>
 8007172:	900c      	str	r0, [sp, #48]	; 0x30
 8007174:	0038      	movs	r0, r7
 8007176:	9908      	ldr	r1, [sp, #32]
 8007178:	f000 f92a 	bl	80073d0 <_Bfree>
 800717c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800717e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007180:	3301      	adds	r3, #1
 8007182:	9308      	str	r3, [sp, #32]
 8007184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007186:	4313      	orrs	r3, r2
 8007188:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800718a:	4313      	orrs	r3, r2
 800718c:	d10c      	bne.n	80071a8 <_dtoa_r+0xad8>
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	2b39      	cmp	r3, #57	; 0x39
 8007192:	d026      	beq.n	80071e2 <_dtoa_r+0xb12>
 8007194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	dd02      	ble.n	80071a0 <_dtoa_r+0xad0>
 800719a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800719c:	3331      	adds	r3, #49	; 0x31
 800719e:	9307      	str	r3, [sp, #28]
 80071a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	e76a      	b.n	800707e <_dtoa_r+0x9ae>
 80071a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	db04      	blt.n	80071b8 <_dtoa_r+0xae8>
 80071ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80071b0:	4313      	orrs	r3, r2
 80071b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071b4:	4313      	orrs	r3, r2
 80071b6:	d11f      	bne.n	80071f8 <_dtoa_r+0xb28>
 80071b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	ddf0      	ble.n	80071a0 <_dtoa_r+0xad0>
 80071be:	9905      	ldr	r1, [sp, #20]
 80071c0:	2201      	movs	r2, #1
 80071c2:	0038      	movs	r0, r7
 80071c4:	f000 fad6 	bl	8007774 <__lshift>
 80071c8:	0031      	movs	r1, r6
 80071ca:	9005      	str	r0, [sp, #20]
 80071cc:	f000 fb40 	bl	8007850 <__mcmp>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	dc03      	bgt.n	80071dc <_dtoa_r+0xb0c>
 80071d4:	d1e4      	bne.n	80071a0 <_dtoa_r+0xad0>
 80071d6:	9b07      	ldr	r3, [sp, #28]
 80071d8:	07db      	lsls	r3, r3, #31
 80071da:	d5e1      	bpl.n	80071a0 <_dtoa_r+0xad0>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	2b39      	cmp	r3, #57	; 0x39
 80071e0:	d1db      	bne.n	800719a <_dtoa_r+0xaca>
 80071e2:	2339      	movs	r3, #57	; 0x39
 80071e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e6:	7013      	strb	r3, [r2, #0]
 80071e8:	9b08      	ldr	r3, [sp, #32]
 80071ea:	9308      	str	r3, [sp, #32]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	2a39      	cmp	r2, #57	; 0x39
 80071f2:	d068      	beq.n	80072c6 <_dtoa_r+0xbf6>
 80071f4:	3201      	adds	r2, #1
 80071f6:	e7d5      	b.n	80071a4 <_dtoa_r+0xad4>
 80071f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dd07      	ble.n	800720e <_dtoa_r+0xb3e>
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	2b39      	cmp	r3, #57	; 0x39
 8007202:	d0ee      	beq.n	80071e2 <_dtoa_r+0xb12>
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007208:	3301      	adds	r3, #1
 800720a:	7013      	strb	r3, [r2, #0]
 800720c:	e737      	b.n	800707e <_dtoa_r+0x9ae>
 800720e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007210:	9a07      	ldr	r2, [sp, #28]
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007218:	4293      	cmp	r3, r2
 800721a:	d03e      	beq.n	800729a <_dtoa_r+0xbca>
 800721c:	2300      	movs	r3, #0
 800721e:	220a      	movs	r2, #10
 8007220:	9905      	ldr	r1, [sp, #20]
 8007222:	0038      	movs	r0, r7
 8007224:	f000 f8f8 	bl	8007418 <__multadd>
 8007228:	2300      	movs	r3, #0
 800722a:	9005      	str	r0, [sp, #20]
 800722c:	220a      	movs	r2, #10
 800722e:	0021      	movs	r1, r4
 8007230:	0038      	movs	r0, r7
 8007232:	42ac      	cmp	r4, r5
 8007234:	d106      	bne.n	8007244 <_dtoa_r+0xb74>
 8007236:	f000 f8ef 	bl	8007418 <__multadd>
 800723a:	0004      	movs	r4, r0
 800723c:	0005      	movs	r5, r0
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	930a      	str	r3, [sp, #40]	; 0x28
 8007242:	e778      	b.n	8007136 <_dtoa_r+0xa66>
 8007244:	f000 f8e8 	bl	8007418 <__multadd>
 8007248:	0029      	movs	r1, r5
 800724a:	0004      	movs	r4, r0
 800724c:	2300      	movs	r3, #0
 800724e:	220a      	movs	r2, #10
 8007250:	0038      	movs	r0, r7
 8007252:	f000 f8e1 	bl	8007418 <__multadd>
 8007256:	0005      	movs	r5, r0
 8007258:	e7f1      	b.n	800723e <_dtoa_r+0xb6e>
 800725a:	9b07      	ldr	r3, [sp, #28]
 800725c:	930c      	str	r3, [sp, #48]	; 0x30
 800725e:	2400      	movs	r4, #0
 8007260:	0031      	movs	r1, r6
 8007262:	9805      	ldr	r0, [sp, #20]
 8007264:	f7ff f9a8 	bl	80065b8 <quorem>
 8007268:	9b06      	ldr	r3, [sp, #24]
 800726a:	3030      	adds	r0, #48	; 0x30
 800726c:	5518      	strb	r0, [r3, r4]
 800726e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007270:	3401      	adds	r4, #1
 8007272:	9007      	str	r0, [sp, #28]
 8007274:	42a3      	cmp	r3, r4
 8007276:	dd07      	ble.n	8007288 <_dtoa_r+0xbb8>
 8007278:	2300      	movs	r3, #0
 800727a:	220a      	movs	r2, #10
 800727c:	0038      	movs	r0, r7
 800727e:	9905      	ldr	r1, [sp, #20]
 8007280:	f000 f8ca 	bl	8007418 <__multadd>
 8007284:	9005      	str	r0, [sp, #20]
 8007286:	e7eb      	b.n	8007260 <_dtoa_r+0xb90>
 8007288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800728a:	2001      	movs	r0, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	dd00      	ble.n	8007292 <_dtoa_r+0xbc2>
 8007290:	0018      	movs	r0, r3
 8007292:	2400      	movs	r4, #0
 8007294:	9b06      	ldr	r3, [sp, #24]
 8007296:	181b      	adds	r3, r3, r0
 8007298:	9308      	str	r3, [sp, #32]
 800729a:	9905      	ldr	r1, [sp, #20]
 800729c:	2201      	movs	r2, #1
 800729e:	0038      	movs	r0, r7
 80072a0:	f000 fa68 	bl	8007774 <__lshift>
 80072a4:	0031      	movs	r1, r6
 80072a6:	9005      	str	r0, [sp, #20]
 80072a8:	f000 fad2 	bl	8007850 <__mcmp>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	dc9b      	bgt.n	80071e8 <_dtoa_r+0xb18>
 80072b0:	d102      	bne.n	80072b8 <_dtoa_r+0xbe8>
 80072b2:	9b07      	ldr	r3, [sp, #28]
 80072b4:	07db      	lsls	r3, r3, #31
 80072b6:	d497      	bmi.n	80071e8 <_dtoa_r+0xb18>
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	9308      	str	r3, [sp, #32]
 80072bc:	3b01      	subs	r3, #1
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	2a30      	cmp	r2, #48	; 0x30
 80072c2:	d0fa      	beq.n	80072ba <_dtoa_r+0xbea>
 80072c4:	e6db      	b.n	800707e <_dtoa_r+0x9ae>
 80072c6:	9a06      	ldr	r2, [sp, #24]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d18e      	bne.n	80071ea <_dtoa_r+0xb1a>
 80072cc:	9b02      	ldr	r3, [sp, #8]
 80072ce:	3301      	adds	r3, #1
 80072d0:	9302      	str	r3, [sp, #8]
 80072d2:	2331      	movs	r3, #49	; 0x31
 80072d4:	e799      	b.n	800720a <_dtoa_r+0xb3a>
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <_dtoa_r+0xc2c>)
 80072d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072da:	9306      	str	r3, [sp, #24]
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <_dtoa_r+0xc30>)
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d001      	beq.n	80072e6 <_dtoa_r+0xc16>
 80072e2:	f7ff fa3f 	bl	8006764 <_dtoa_r+0x94>
 80072e6:	f7ff fa3f 	bl	8006768 <_dtoa_r+0x98>
 80072ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dcb6      	bgt.n	800725e <_dtoa_r+0xb8e>
 80072f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	dd00      	ble.n	80072f8 <_dtoa_r+0xc28>
 80072f6:	e6ac      	b.n	8007052 <_dtoa_r+0x982>
 80072f8:	e7b1      	b.n	800725e <_dtoa_r+0xb8e>
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	080093cc 	.word	0x080093cc
 8007300:	080093d4 	.word	0x080093d4

08007304 <_localeconv_r>:
 8007304:	4800      	ldr	r0, [pc, #0]	; (8007308 <_localeconv_r+0x4>)
 8007306:	4770      	bx	lr
 8007308:	200001a8 	.word	0x200001a8

0800730c <malloc>:
 800730c:	b510      	push	{r4, lr}
 800730e:	4b03      	ldr	r3, [pc, #12]	; (800731c <malloc+0x10>)
 8007310:	0001      	movs	r1, r0
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	f000 fc4c 	bl	8007bb0 <_malloc_r>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	20000054 	.word	0x20000054

08007320 <memchr>:
 8007320:	b2c9      	uxtb	r1, r1
 8007322:	1882      	adds	r2, r0, r2
 8007324:	4290      	cmp	r0, r2
 8007326:	d101      	bne.n	800732c <memchr+0xc>
 8007328:	2000      	movs	r0, #0
 800732a:	4770      	bx	lr
 800732c:	7803      	ldrb	r3, [r0, #0]
 800732e:	428b      	cmp	r3, r1
 8007330:	d0fb      	beq.n	800732a <memchr+0xa>
 8007332:	3001      	adds	r0, #1
 8007334:	e7f6      	b.n	8007324 <memchr+0x4>

08007336 <memcpy>:
 8007336:	2300      	movs	r3, #0
 8007338:	b510      	push	{r4, lr}
 800733a:	429a      	cmp	r2, r3
 800733c:	d100      	bne.n	8007340 <memcpy+0xa>
 800733e:	bd10      	pop	{r4, pc}
 8007340:	5ccc      	ldrb	r4, [r1, r3]
 8007342:	54c4      	strb	r4, [r0, r3]
 8007344:	3301      	adds	r3, #1
 8007346:	e7f8      	b.n	800733a <memcpy+0x4>

08007348 <_Balloc>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800734c:	0006      	movs	r6, r0
 800734e:	000c      	movs	r4, r1
 8007350:	2d00      	cmp	r5, #0
 8007352:	d10e      	bne.n	8007372 <_Balloc+0x2a>
 8007354:	2010      	movs	r0, #16
 8007356:	f7ff ffd9 	bl	800730c <malloc>
 800735a:	1e02      	subs	r2, r0, #0
 800735c:	6270      	str	r0, [r6, #36]	; 0x24
 800735e:	d104      	bne.n	800736a <_Balloc+0x22>
 8007360:	2166      	movs	r1, #102	; 0x66
 8007362:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <_Balloc+0x80>)
 8007364:	4819      	ldr	r0, [pc, #100]	; (80073cc <_Balloc+0x84>)
 8007366:	f000 fe0d 	bl	8007f84 <__assert_func>
 800736a:	6045      	str	r5, [r0, #4]
 800736c:	6085      	str	r5, [r0, #8]
 800736e:	6005      	str	r5, [r0, #0]
 8007370:	60c5      	str	r5, [r0, #12]
 8007372:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007374:	68eb      	ldr	r3, [r5, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d013      	beq.n	80073a2 <_Balloc+0x5a>
 800737a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800737c:	00a2      	lsls	r2, r4, #2
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	189b      	adds	r3, r3, r2
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	2800      	cmp	r0, #0
 8007386:	d118      	bne.n	80073ba <_Balloc+0x72>
 8007388:	2101      	movs	r1, #1
 800738a:	000d      	movs	r5, r1
 800738c:	40a5      	lsls	r5, r4
 800738e:	1d6a      	adds	r2, r5, #5
 8007390:	0030      	movs	r0, r6
 8007392:	0092      	lsls	r2, r2, #2
 8007394:	f000 fb74 	bl	8007a80 <_calloc_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	d00c      	beq.n	80073b6 <_Balloc+0x6e>
 800739c:	6044      	str	r4, [r0, #4]
 800739e:	6085      	str	r5, [r0, #8]
 80073a0:	e00d      	b.n	80073be <_Balloc+0x76>
 80073a2:	2221      	movs	r2, #33	; 0x21
 80073a4:	2104      	movs	r1, #4
 80073a6:	0030      	movs	r0, r6
 80073a8:	f000 fb6a 	bl	8007a80 <_calloc_r>
 80073ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80073ae:	60e8      	str	r0, [r5, #12]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e1      	bne.n	800737a <_Balloc+0x32>
 80073b6:	2000      	movs	r0, #0
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	6802      	ldr	r2, [r0, #0]
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	2300      	movs	r3, #0
 80073c0:	6103      	str	r3, [r0, #16]
 80073c2:	60c3      	str	r3, [r0, #12]
 80073c4:	e7f8      	b.n	80073b8 <_Balloc+0x70>
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	080093d9 	.word	0x080093d9
 80073cc:	0800945c 	.word	0x0800945c

080073d0 <_Bfree>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073d4:	0005      	movs	r5, r0
 80073d6:	000c      	movs	r4, r1
 80073d8:	2e00      	cmp	r6, #0
 80073da:	d10e      	bne.n	80073fa <_Bfree+0x2a>
 80073dc:	2010      	movs	r0, #16
 80073de:	f7ff ff95 	bl	800730c <malloc>
 80073e2:	1e02      	subs	r2, r0, #0
 80073e4:	6268      	str	r0, [r5, #36]	; 0x24
 80073e6:	d104      	bne.n	80073f2 <_Bfree+0x22>
 80073e8:	218a      	movs	r1, #138	; 0x8a
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <_Bfree+0x40>)
 80073ec:	4809      	ldr	r0, [pc, #36]	; (8007414 <_Bfree+0x44>)
 80073ee:	f000 fdc9 	bl	8007f84 <__assert_func>
 80073f2:	6046      	str	r6, [r0, #4]
 80073f4:	6086      	str	r6, [r0, #8]
 80073f6:	6006      	str	r6, [r0, #0]
 80073f8:	60c6      	str	r6, [r0, #12]
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	d007      	beq.n	800740e <_Bfree+0x3e>
 80073fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007400:	6862      	ldr	r2, [r4, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	0092      	lsls	r2, r2, #2
 8007406:	189b      	adds	r3, r3, r2
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	6022      	str	r2, [r4, #0]
 800740c:	601c      	str	r4, [r3, #0]
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	080093d9 	.word	0x080093d9
 8007414:	0800945c 	.word	0x0800945c

08007418 <__multadd>:
 8007418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800741a:	000e      	movs	r6, r1
 800741c:	9001      	str	r0, [sp, #4]
 800741e:	000c      	movs	r4, r1
 8007420:	001d      	movs	r5, r3
 8007422:	2000      	movs	r0, #0
 8007424:	690f      	ldr	r7, [r1, #16]
 8007426:	3614      	adds	r6, #20
 8007428:	6833      	ldr	r3, [r6, #0]
 800742a:	3001      	adds	r0, #1
 800742c:	b299      	uxth	r1, r3
 800742e:	4351      	muls	r1, r2
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	4353      	muls	r3, r2
 8007434:	1949      	adds	r1, r1, r5
 8007436:	0c0d      	lsrs	r5, r1, #16
 8007438:	195b      	adds	r3, r3, r5
 800743a:	0c1d      	lsrs	r5, r3, #16
 800743c:	b289      	uxth	r1, r1
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	185b      	adds	r3, r3, r1
 8007442:	c608      	stmia	r6!, {r3}
 8007444:	4287      	cmp	r7, r0
 8007446:	dcef      	bgt.n	8007428 <__multadd+0x10>
 8007448:	2d00      	cmp	r5, #0
 800744a:	d022      	beq.n	8007492 <__multadd+0x7a>
 800744c:	68a3      	ldr	r3, [r4, #8]
 800744e:	42bb      	cmp	r3, r7
 8007450:	dc19      	bgt.n	8007486 <__multadd+0x6e>
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	9801      	ldr	r0, [sp, #4]
 8007456:	1c59      	adds	r1, r3, #1
 8007458:	f7ff ff76 	bl	8007348 <_Balloc>
 800745c:	1e06      	subs	r6, r0, #0
 800745e:	d105      	bne.n	800746c <__multadd+0x54>
 8007460:	0002      	movs	r2, r0
 8007462:	21b5      	movs	r1, #181	; 0xb5
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <__multadd+0x80>)
 8007466:	480d      	ldr	r0, [pc, #52]	; (800749c <__multadd+0x84>)
 8007468:	f000 fd8c 	bl	8007f84 <__assert_func>
 800746c:	0021      	movs	r1, r4
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	310c      	adds	r1, #12
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	0092      	lsls	r2, r2, #2
 8007476:	300c      	adds	r0, #12
 8007478:	f7ff ff5d 	bl	8007336 <memcpy>
 800747c:	0021      	movs	r1, r4
 800747e:	9801      	ldr	r0, [sp, #4]
 8007480:	f7ff ffa6 	bl	80073d0 <_Bfree>
 8007484:	0034      	movs	r4, r6
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	18e3      	adds	r3, r4, r3
 800748c:	605d      	str	r5, [r3, #4]
 800748e:	1c7b      	adds	r3, r7, #1
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	0020      	movs	r0, r4
 8007494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	0800944b 	.word	0x0800944b
 800749c:	0800945c 	.word	0x0800945c

080074a0 <__hi0bits>:
 80074a0:	0003      	movs	r3, r0
 80074a2:	0c02      	lsrs	r2, r0, #16
 80074a4:	2000      	movs	r0, #0
 80074a6:	4282      	cmp	r2, r0
 80074a8:	d101      	bne.n	80074ae <__hi0bits+0xe>
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	3010      	adds	r0, #16
 80074ae:	0e1a      	lsrs	r2, r3, #24
 80074b0:	d101      	bne.n	80074b6 <__hi0bits+0x16>
 80074b2:	3008      	adds	r0, #8
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	0f1a      	lsrs	r2, r3, #28
 80074b8:	d101      	bne.n	80074be <__hi0bits+0x1e>
 80074ba:	3004      	adds	r0, #4
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	0f9a      	lsrs	r2, r3, #30
 80074c0:	d101      	bne.n	80074c6 <__hi0bits+0x26>
 80074c2:	3002      	adds	r0, #2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	db03      	blt.n	80074d2 <__hi0bits+0x32>
 80074ca:	3001      	adds	r0, #1
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	d400      	bmi.n	80074d2 <__hi0bits+0x32>
 80074d0:	2020      	movs	r0, #32
 80074d2:	4770      	bx	lr

080074d4 <__lo0bits>:
 80074d4:	6803      	ldr	r3, [r0, #0]
 80074d6:	0002      	movs	r2, r0
 80074d8:	2107      	movs	r1, #7
 80074da:	0018      	movs	r0, r3
 80074dc:	4008      	ands	r0, r1
 80074de:	420b      	tst	r3, r1
 80074e0:	d00d      	beq.n	80074fe <__lo0bits+0x2a>
 80074e2:	3906      	subs	r1, #6
 80074e4:	2000      	movs	r0, #0
 80074e6:	420b      	tst	r3, r1
 80074e8:	d105      	bne.n	80074f6 <__lo0bits+0x22>
 80074ea:	3002      	adds	r0, #2
 80074ec:	4203      	tst	r3, r0
 80074ee:	d003      	beq.n	80074f8 <__lo0bits+0x24>
 80074f0:	40cb      	lsrs	r3, r1
 80074f2:	0008      	movs	r0, r1
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	4770      	bx	lr
 80074f8:	089b      	lsrs	r3, r3, #2
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	e7fb      	b.n	80074f6 <__lo0bits+0x22>
 80074fe:	b299      	uxth	r1, r3
 8007500:	2900      	cmp	r1, #0
 8007502:	d101      	bne.n	8007508 <__lo0bits+0x34>
 8007504:	2010      	movs	r0, #16
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	b2d9      	uxtb	r1, r3
 800750a:	2900      	cmp	r1, #0
 800750c:	d101      	bne.n	8007512 <__lo0bits+0x3e>
 800750e:	3008      	adds	r0, #8
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	0719      	lsls	r1, r3, #28
 8007514:	d101      	bne.n	800751a <__lo0bits+0x46>
 8007516:	3004      	adds	r0, #4
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	0799      	lsls	r1, r3, #30
 800751c:	d101      	bne.n	8007522 <__lo0bits+0x4e>
 800751e:	3002      	adds	r0, #2
 8007520:	089b      	lsrs	r3, r3, #2
 8007522:	07d9      	lsls	r1, r3, #31
 8007524:	d4e9      	bmi.n	80074fa <__lo0bits+0x26>
 8007526:	3001      	adds	r0, #1
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	d1e6      	bne.n	80074fa <__lo0bits+0x26>
 800752c:	2020      	movs	r0, #32
 800752e:	e7e2      	b.n	80074f6 <__lo0bits+0x22>

08007530 <__i2b>:
 8007530:	b510      	push	{r4, lr}
 8007532:	000c      	movs	r4, r1
 8007534:	2101      	movs	r1, #1
 8007536:	f7ff ff07 	bl	8007348 <_Balloc>
 800753a:	2800      	cmp	r0, #0
 800753c:	d106      	bne.n	800754c <__i2b+0x1c>
 800753e:	21a0      	movs	r1, #160	; 0xa0
 8007540:	0002      	movs	r2, r0
 8007542:	4b04      	ldr	r3, [pc, #16]	; (8007554 <__i2b+0x24>)
 8007544:	4804      	ldr	r0, [pc, #16]	; (8007558 <__i2b+0x28>)
 8007546:	0049      	lsls	r1, r1, #1
 8007548:	f000 fd1c 	bl	8007f84 <__assert_func>
 800754c:	2301      	movs	r3, #1
 800754e:	6144      	str	r4, [r0, #20]
 8007550:	6103      	str	r3, [r0, #16]
 8007552:	bd10      	pop	{r4, pc}
 8007554:	0800944b 	.word	0x0800944b
 8007558:	0800945c 	.word	0x0800945c

0800755c <__multiply>:
 800755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755e:	690b      	ldr	r3, [r1, #16]
 8007560:	0014      	movs	r4, r2
 8007562:	6912      	ldr	r2, [r2, #16]
 8007564:	000d      	movs	r5, r1
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	4293      	cmp	r3, r2
 800756a:	da01      	bge.n	8007570 <__multiply+0x14>
 800756c:	0025      	movs	r5, r4
 800756e:	000c      	movs	r4, r1
 8007570:	692f      	ldr	r7, [r5, #16]
 8007572:	6926      	ldr	r6, [r4, #16]
 8007574:	6869      	ldr	r1, [r5, #4]
 8007576:	19bb      	adds	r3, r7, r6
 8007578:	9302      	str	r3, [sp, #8]
 800757a:	68ab      	ldr	r3, [r5, #8]
 800757c:	19ba      	adds	r2, r7, r6
 800757e:	4293      	cmp	r3, r2
 8007580:	da00      	bge.n	8007584 <__multiply+0x28>
 8007582:	3101      	adds	r1, #1
 8007584:	f7ff fee0 	bl	8007348 <_Balloc>
 8007588:	9001      	str	r0, [sp, #4]
 800758a:	2800      	cmp	r0, #0
 800758c:	d106      	bne.n	800759c <__multiply+0x40>
 800758e:	215e      	movs	r1, #94	; 0x5e
 8007590:	0002      	movs	r2, r0
 8007592:	4b48      	ldr	r3, [pc, #288]	; (80076b4 <__multiply+0x158>)
 8007594:	4848      	ldr	r0, [pc, #288]	; (80076b8 <__multiply+0x15c>)
 8007596:	31ff      	adds	r1, #255	; 0xff
 8007598:	f000 fcf4 	bl	8007f84 <__assert_func>
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	3314      	adds	r3, #20
 80075a2:	469c      	mov	ip, r3
 80075a4:	19bb      	adds	r3, r7, r6
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4463      	add	r3, ip
 80075aa:	9303      	str	r3, [sp, #12]
 80075ac:	4663      	mov	r3, ip
 80075ae:	9903      	ldr	r1, [sp, #12]
 80075b0:	428b      	cmp	r3, r1
 80075b2:	d32c      	bcc.n	800760e <__multiply+0xb2>
 80075b4:	002b      	movs	r3, r5
 80075b6:	0022      	movs	r2, r4
 80075b8:	3314      	adds	r3, #20
 80075ba:	00bf      	lsls	r7, r7, #2
 80075bc:	3214      	adds	r2, #20
 80075be:	9306      	str	r3, [sp, #24]
 80075c0:	00b6      	lsls	r6, r6, #2
 80075c2:	19db      	adds	r3, r3, r7
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	1993      	adds	r3, r2, r6
 80075c8:	9307      	str	r3, [sp, #28]
 80075ca:	2304      	movs	r3, #4
 80075cc:	9305      	str	r3, [sp, #20]
 80075ce:	002b      	movs	r3, r5
 80075d0:	9904      	ldr	r1, [sp, #16]
 80075d2:	3315      	adds	r3, #21
 80075d4:	9200      	str	r2, [sp, #0]
 80075d6:	4299      	cmp	r1, r3
 80075d8:	d305      	bcc.n	80075e6 <__multiply+0x8a>
 80075da:	1b4b      	subs	r3, r1, r5
 80075dc:	3b15      	subs	r3, #21
 80075de:	089b      	lsrs	r3, r3, #2
 80075e0:	3301      	adds	r3, #1
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	9b07      	ldr	r3, [sp, #28]
 80075e8:	9a00      	ldr	r2, [sp, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d311      	bcc.n	8007612 <__multiply+0xb6>
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dd06      	ble.n	8007602 <__multiply+0xa6>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	9303      	str	r3, [sp, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d053      	beq.n	80076aa <__multiply+0x14e>
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	9a02      	ldr	r2, [sp, #8]
 8007606:	0018      	movs	r0, r3
 8007608:	611a      	str	r2, [r3, #16]
 800760a:	b009      	add	sp, #36	; 0x24
 800760c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760e:	c304      	stmia	r3!, {r2}
 8007610:	e7cd      	b.n	80075ae <__multiply+0x52>
 8007612:	9b00      	ldr	r3, [sp, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	b298      	uxth	r0, r3
 8007618:	2800      	cmp	r0, #0
 800761a:	d01b      	beq.n	8007654 <__multiply+0xf8>
 800761c:	4667      	mov	r7, ip
 800761e:	2400      	movs	r4, #0
 8007620:	9e06      	ldr	r6, [sp, #24]
 8007622:	ce02      	ldmia	r6!, {r1}
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	b28b      	uxth	r3, r1
 8007628:	4343      	muls	r3, r0
 800762a:	b292      	uxth	r2, r2
 800762c:	189b      	adds	r3, r3, r2
 800762e:	191b      	adds	r3, r3, r4
 8007630:	0c0c      	lsrs	r4, r1, #16
 8007632:	4344      	muls	r4, r0
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	0c11      	lsrs	r1, r2, #16
 8007638:	1861      	adds	r1, r4, r1
 800763a:	0c1c      	lsrs	r4, r3, #16
 800763c:	1909      	adds	r1, r1, r4
 800763e:	0c0c      	lsrs	r4, r1, #16
 8007640:	b29b      	uxth	r3, r3
 8007642:	0409      	lsls	r1, r1, #16
 8007644:	430b      	orrs	r3, r1
 8007646:	c708      	stmia	r7!, {r3}
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	42b3      	cmp	r3, r6
 800764c:	d8e9      	bhi.n	8007622 <__multiply+0xc6>
 800764e:	4663      	mov	r3, ip
 8007650:	9a05      	ldr	r2, [sp, #20]
 8007652:	509c      	str	r4, [r3, r2]
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	0c1e      	lsrs	r6, r3, #16
 800765a:	d020      	beq.n	800769e <__multiply+0x142>
 800765c:	4663      	mov	r3, ip
 800765e:	002c      	movs	r4, r5
 8007660:	4660      	mov	r0, ip
 8007662:	2700      	movs	r7, #0
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3414      	adds	r4, #20
 8007668:	6822      	ldr	r2, [r4, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	b291      	uxth	r1, r2
 800766e:	4371      	muls	r1, r6
 8007670:	6802      	ldr	r2, [r0, #0]
 8007672:	0c12      	lsrs	r2, r2, #16
 8007674:	1889      	adds	r1, r1, r2
 8007676:	19cf      	adds	r7, r1, r7
 8007678:	0439      	lsls	r1, r7, #16
 800767a:	430b      	orrs	r3, r1
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	cc02      	ldmia	r4!, {r1}
 8007680:	6843      	ldr	r3, [r0, #4]
 8007682:	0c09      	lsrs	r1, r1, #16
 8007684:	4371      	muls	r1, r6
 8007686:	b29b      	uxth	r3, r3
 8007688:	0c3f      	lsrs	r7, r7, #16
 800768a:	18cb      	adds	r3, r1, r3
 800768c:	9a04      	ldr	r2, [sp, #16]
 800768e:	19db      	adds	r3, r3, r7
 8007690:	0c1f      	lsrs	r7, r3, #16
 8007692:	3004      	adds	r0, #4
 8007694:	42a2      	cmp	r2, r4
 8007696:	d8e7      	bhi.n	8007668 <__multiply+0x10c>
 8007698:	4662      	mov	r2, ip
 800769a:	9905      	ldr	r1, [sp, #20]
 800769c:	5053      	str	r3, [r2, r1]
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	3304      	adds	r3, #4
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2304      	movs	r3, #4
 80076a6:	449c      	add	ip, r3
 80076a8:	e79d      	b.n	80075e6 <__multiply+0x8a>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	9302      	str	r3, [sp, #8]
 80076b0:	e79d      	b.n	80075ee <__multiply+0x92>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	0800944b 	.word	0x0800944b
 80076b8:	0800945c 	.word	0x0800945c

080076bc <__pow5mult>:
 80076bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076be:	2303      	movs	r3, #3
 80076c0:	0015      	movs	r5, r2
 80076c2:	0007      	movs	r7, r0
 80076c4:	000e      	movs	r6, r1
 80076c6:	401a      	ands	r2, r3
 80076c8:	421d      	tst	r5, r3
 80076ca:	d008      	beq.n	80076de <__pow5mult+0x22>
 80076cc:	4925      	ldr	r1, [pc, #148]	; (8007764 <__pow5mult+0xa8>)
 80076ce:	3a01      	subs	r2, #1
 80076d0:	0092      	lsls	r2, r2, #2
 80076d2:	5852      	ldr	r2, [r2, r1]
 80076d4:	2300      	movs	r3, #0
 80076d6:	0031      	movs	r1, r6
 80076d8:	f7ff fe9e 	bl	8007418 <__multadd>
 80076dc:	0006      	movs	r6, r0
 80076de:	10ad      	asrs	r5, r5, #2
 80076e0:	d03d      	beq.n	800775e <__pow5mult+0xa2>
 80076e2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	d10f      	bne.n	8007708 <__pow5mult+0x4c>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f7ff fe0f 	bl	800730c <malloc>
 80076ee:	1e02      	subs	r2, r0, #0
 80076f0:	6278      	str	r0, [r7, #36]	; 0x24
 80076f2:	d105      	bne.n	8007700 <__pow5mult+0x44>
 80076f4:	21d7      	movs	r1, #215	; 0xd7
 80076f6:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <__pow5mult+0xac>)
 80076f8:	481c      	ldr	r0, [pc, #112]	; (800776c <__pow5mult+0xb0>)
 80076fa:	0049      	lsls	r1, r1, #1
 80076fc:	f000 fc42 	bl	8007f84 <__assert_func>
 8007700:	6044      	str	r4, [r0, #4]
 8007702:	6084      	str	r4, [r0, #8]
 8007704:	6004      	str	r4, [r0, #0]
 8007706:	60c4      	str	r4, [r0, #12]
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	689c      	ldr	r4, [r3, #8]
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	2c00      	cmp	r4, #0
 8007710:	d108      	bne.n	8007724 <__pow5mult+0x68>
 8007712:	0038      	movs	r0, r7
 8007714:	4916      	ldr	r1, [pc, #88]	; (8007770 <__pow5mult+0xb4>)
 8007716:	f7ff ff0b 	bl	8007530 <__i2b>
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	0004      	movs	r4, r0
 800771e:	6098      	str	r0, [r3, #8]
 8007720:	2300      	movs	r3, #0
 8007722:	6003      	str	r3, [r0, #0]
 8007724:	2301      	movs	r3, #1
 8007726:	421d      	tst	r5, r3
 8007728:	d00a      	beq.n	8007740 <__pow5mult+0x84>
 800772a:	0031      	movs	r1, r6
 800772c:	0022      	movs	r2, r4
 800772e:	0038      	movs	r0, r7
 8007730:	f7ff ff14 	bl	800755c <__multiply>
 8007734:	0031      	movs	r1, r6
 8007736:	9001      	str	r0, [sp, #4]
 8007738:	0038      	movs	r0, r7
 800773a:	f7ff fe49 	bl	80073d0 <_Bfree>
 800773e:	9e01      	ldr	r6, [sp, #4]
 8007740:	106d      	asrs	r5, r5, #1
 8007742:	d00c      	beq.n	800775e <__pow5mult+0xa2>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	2800      	cmp	r0, #0
 8007748:	d107      	bne.n	800775a <__pow5mult+0x9e>
 800774a:	0022      	movs	r2, r4
 800774c:	0021      	movs	r1, r4
 800774e:	0038      	movs	r0, r7
 8007750:	f7ff ff04 	bl	800755c <__multiply>
 8007754:	2300      	movs	r3, #0
 8007756:	6020      	str	r0, [r4, #0]
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	0004      	movs	r4, r0
 800775c:	e7e2      	b.n	8007724 <__pow5mult+0x68>
 800775e:	0030      	movs	r0, r6
 8007760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	080095a8 	.word	0x080095a8
 8007768:	080093d9 	.word	0x080093d9
 800776c:	0800945c 	.word	0x0800945c
 8007770:	00000271 	.word	0x00000271

08007774 <__lshift>:
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007776:	000c      	movs	r4, r1
 8007778:	0017      	movs	r7, r2
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	1155      	asrs	r5, r2, #5
 800777e:	b087      	sub	sp, #28
 8007780:	18eb      	adds	r3, r5, r3
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	3301      	adds	r3, #1
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	6849      	ldr	r1, [r1, #4]
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	9004      	str	r0, [sp, #16]
 800778e:	9a01      	ldr	r2, [sp, #4]
 8007790:	4293      	cmp	r3, r2
 8007792:	db10      	blt.n	80077b6 <__lshift+0x42>
 8007794:	9804      	ldr	r0, [sp, #16]
 8007796:	f7ff fdd7 	bl	8007348 <_Balloc>
 800779a:	2300      	movs	r3, #0
 800779c:	0002      	movs	r2, r0
 800779e:	0006      	movs	r6, r0
 80077a0:	0019      	movs	r1, r3
 80077a2:	3214      	adds	r2, #20
 80077a4:	4298      	cmp	r0, r3
 80077a6:	d10c      	bne.n	80077c2 <__lshift+0x4e>
 80077a8:	21da      	movs	r1, #218	; 0xda
 80077aa:	0002      	movs	r2, r0
 80077ac:	4b26      	ldr	r3, [pc, #152]	; (8007848 <__lshift+0xd4>)
 80077ae:	4827      	ldr	r0, [pc, #156]	; (800784c <__lshift+0xd8>)
 80077b0:	31ff      	adds	r1, #255	; 0xff
 80077b2:	f000 fbe7 	bl	8007f84 <__assert_func>
 80077b6:	3101      	adds	r1, #1
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	e7e8      	b.n	800778e <__lshift+0x1a>
 80077bc:	0098      	lsls	r0, r3, #2
 80077be:	5011      	str	r1, [r2, r0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	42ab      	cmp	r3, r5
 80077c4:	dbfa      	blt.n	80077bc <__lshift+0x48>
 80077c6:	43eb      	mvns	r3, r5
 80077c8:	17db      	asrs	r3, r3, #31
 80077ca:	401d      	ands	r5, r3
 80077cc:	211f      	movs	r1, #31
 80077ce:	0023      	movs	r3, r4
 80077d0:	0038      	movs	r0, r7
 80077d2:	00ad      	lsls	r5, r5, #2
 80077d4:	1955      	adds	r5, r2, r5
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	3314      	adds	r3, #20
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	4008      	ands	r0, r1
 80077de:	4684      	mov	ip, r0
 80077e0:	189a      	adds	r2, r3, r2
 80077e2:	420f      	tst	r7, r1
 80077e4:	d02a      	beq.n	800783c <__lshift+0xc8>
 80077e6:	3101      	adds	r1, #1
 80077e8:	1a09      	subs	r1, r1, r0
 80077ea:	9105      	str	r1, [sp, #20]
 80077ec:	2100      	movs	r1, #0
 80077ee:	9503      	str	r5, [sp, #12]
 80077f0:	4667      	mov	r7, ip
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	40b8      	lsls	r0, r7
 80077f6:	4301      	orrs	r1, r0
 80077f8:	9803      	ldr	r0, [sp, #12]
 80077fa:	c002      	stmia	r0!, {r1}
 80077fc:	cb02      	ldmia	r3!, {r1}
 80077fe:	9003      	str	r0, [sp, #12]
 8007800:	9805      	ldr	r0, [sp, #20]
 8007802:	40c1      	lsrs	r1, r0
 8007804:	429a      	cmp	r2, r3
 8007806:	d8f3      	bhi.n	80077f0 <__lshift+0x7c>
 8007808:	0020      	movs	r0, r4
 800780a:	3015      	adds	r0, #21
 800780c:	2304      	movs	r3, #4
 800780e:	4282      	cmp	r2, r0
 8007810:	d304      	bcc.n	800781c <__lshift+0xa8>
 8007812:	1b13      	subs	r3, r2, r4
 8007814:	3b15      	subs	r3, #21
 8007816:	089b      	lsrs	r3, r3, #2
 8007818:	3301      	adds	r3, #1
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	50e9      	str	r1, [r5, r3]
 800781e:	2900      	cmp	r1, #0
 8007820:	d002      	beq.n	8007828 <__lshift+0xb4>
 8007822:	9b02      	ldr	r3, [sp, #8]
 8007824:	3302      	adds	r3, #2
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	9804      	ldr	r0, [sp, #16]
 800782c:	3b01      	subs	r3, #1
 800782e:	0021      	movs	r1, r4
 8007830:	6133      	str	r3, [r6, #16]
 8007832:	f7ff fdcd 	bl	80073d0 <_Bfree>
 8007836:	0030      	movs	r0, r6
 8007838:	b007      	add	sp, #28
 800783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783c:	cb02      	ldmia	r3!, {r1}
 800783e:	c502      	stmia	r5!, {r1}
 8007840:	429a      	cmp	r2, r3
 8007842:	d8fb      	bhi.n	800783c <__lshift+0xc8>
 8007844:	e7f0      	b.n	8007828 <__lshift+0xb4>
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	0800944b 	.word	0x0800944b
 800784c:	0800945c 	.word	0x0800945c

08007850 <__mcmp>:
 8007850:	6902      	ldr	r2, [r0, #16]
 8007852:	690b      	ldr	r3, [r1, #16]
 8007854:	b530      	push	{r4, r5, lr}
 8007856:	0004      	movs	r4, r0
 8007858:	1ad0      	subs	r0, r2, r3
 800785a:	429a      	cmp	r2, r3
 800785c:	d10d      	bne.n	800787a <__mcmp+0x2a>
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	3414      	adds	r4, #20
 8007862:	3114      	adds	r1, #20
 8007864:	18e2      	adds	r2, r4, r3
 8007866:	18c9      	adds	r1, r1, r3
 8007868:	3a04      	subs	r2, #4
 800786a:	3904      	subs	r1, #4
 800786c:	6815      	ldr	r5, [r2, #0]
 800786e:	680b      	ldr	r3, [r1, #0]
 8007870:	429d      	cmp	r5, r3
 8007872:	d003      	beq.n	800787c <__mcmp+0x2c>
 8007874:	2001      	movs	r0, #1
 8007876:	429d      	cmp	r5, r3
 8007878:	d303      	bcc.n	8007882 <__mcmp+0x32>
 800787a:	bd30      	pop	{r4, r5, pc}
 800787c:	4294      	cmp	r4, r2
 800787e:	d3f3      	bcc.n	8007868 <__mcmp+0x18>
 8007880:	e7fb      	b.n	800787a <__mcmp+0x2a>
 8007882:	4240      	negs	r0, r0
 8007884:	e7f9      	b.n	800787a <__mcmp+0x2a>
	...

08007888 <__mdiff>:
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788a:	000e      	movs	r6, r1
 800788c:	0007      	movs	r7, r0
 800788e:	0011      	movs	r1, r2
 8007890:	0030      	movs	r0, r6
 8007892:	b087      	sub	sp, #28
 8007894:	0014      	movs	r4, r2
 8007896:	f7ff ffdb 	bl	8007850 <__mcmp>
 800789a:	1e05      	subs	r5, r0, #0
 800789c:	d110      	bne.n	80078c0 <__mdiff+0x38>
 800789e:	0001      	movs	r1, r0
 80078a0:	0038      	movs	r0, r7
 80078a2:	f7ff fd51 	bl	8007348 <_Balloc>
 80078a6:	1e02      	subs	r2, r0, #0
 80078a8:	d104      	bne.n	80078b4 <__mdiff+0x2c>
 80078aa:	4b40      	ldr	r3, [pc, #256]	; (80079ac <__mdiff+0x124>)
 80078ac:	4940      	ldr	r1, [pc, #256]	; (80079b0 <__mdiff+0x128>)
 80078ae:	4841      	ldr	r0, [pc, #260]	; (80079b4 <__mdiff+0x12c>)
 80078b0:	f000 fb68 	bl	8007f84 <__assert_func>
 80078b4:	2301      	movs	r3, #1
 80078b6:	6145      	str	r5, [r0, #20]
 80078b8:	6103      	str	r3, [r0, #16]
 80078ba:	0010      	movs	r0, r2
 80078bc:	b007      	add	sp, #28
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c0:	2301      	movs	r3, #1
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	2800      	cmp	r0, #0
 80078c6:	db04      	blt.n	80078d2 <__mdiff+0x4a>
 80078c8:	0023      	movs	r3, r4
 80078ca:	0034      	movs	r4, r6
 80078cc:	001e      	movs	r6, r3
 80078ce:	2300      	movs	r3, #0
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	0038      	movs	r0, r7
 80078d4:	6861      	ldr	r1, [r4, #4]
 80078d6:	f7ff fd37 	bl	8007348 <_Balloc>
 80078da:	1e02      	subs	r2, r0, #0
 80078dc:	d103      	bne.n	80078e6 <__mdiff+0x5e>
 80078de:	2190      	movs	r1, #144	; 0x90
 80078e0:	4b32      	ldr	r3, [pc, #200]	; (80079ac <__mdiff+0x124>)
 80078e2:	0089      	lsls	r1, r1, #2
 80078e4:	e7e3      	b.n	80078ae <__mdiff+0x26>
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	2700      	movs	r7, #0
 80078ea:	60c3      	str	r3, [r0, #12]
 80078ec:	6920      	ldr	r0, [r4, #16]
 80078ee:	3414      	adds	r4, #20
 80078f0:	9401      	str	r4, [sp, #4]
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	0084      	lsls	r4, r0, #2
 80078f6:	191b      	adds	r3, r3, r4
 80078f8:	0034      	movs	r4, r6
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	6933      	ldr	r3, [r6, #16]
 80078fe:	3414      	adds	r4, #20
 8007900:	0099      	lsls	r1, r3, #2
 8007902:	1863      	adds	r3, r4, r1
 8007904:	9303      	str	r3, [sp, #12]
 8007906:	0013      	movs	r3, r2
 8007908:	3314      	adds	r3, #20
 800790a:	469c      	mov	ip, r3
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	cc02      	ldmia	r4!, {r1}
 8007916:	cb20      	ldmia	r3!, {r5}
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	b2ab      	uxth	r3, r5
 800791c:	19df      	adds	r7, r3, r7
 800791e:	b28b      	uxth	r3, r1
 8007920:	1afb      	subs	r3, r7, r3
 8007922:	0c09      	lsrs	r1, r1, #16
 8007924:	0c2d      	lsrs	r5, r5, #16
 8007926:	1a6d      	subs	r5, r5, r1
 8007928:	1419      	asrs	r1, r3, #16
 800792a:	186d      	adds	r5, r5, r1
 800792c:	4661      	mov	r1, ip
 800792e:	142f      	asrs	r7, r5, #16
 8007930:	b29b      	uxth	r3, r3
 8007932:	042d      	lsls	r5, r5, #16
 8007934:	432b      	orrs	r3, r5
 8007936:	c108      	stmia	r1!, {r3}
 8007938:	9b03      	ldr	r3, [sp, #12]
 800793a:	468c      	mov	ip, r1
 800793c:	42a3      	cmp	r3, r4
 800793e:	d8e8      	bhi.n	8007912 <__mdiff+0x8a>
 8007940:	0031      	movs	r1, r6
 8007942:	9c03      	ldr	r4, [sp, #12]
 8007944:	3115      	adds	r1, #21
 8007946:	2304      	movs	r3, #4
 8007948:	428c      	cmp	r4, r1
 800794a:	d304      	bcc.n	8007956 <__mdiff+0xce>
 800794c:	1ba3      	subs	r3, r4, r6
 800794e:	3b15      	subs	r3, #21
 8007950:	089b      	lsrs	r3, r3, #2
 8007952:	3301      	adds	r3, #1
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	9901      	ldr	r1, [sp, #4]
 8007958:	18cc      	adds	r4, r1, r3
 800795a:	9905      	ldr	r1, [sp, #20]
 800795c:	0026      	movs	r6, r4
 800795e:	18cb      	adds	r3, r1, r3
 8007960:	469c      	mov	ip, r3
 8007962:	9902      	ldr	r1, [sp, #8]
 8007964:	428e      	cmp	r6, r1
 8007966:	d310      	bcc.n	800798a <__mdiff+0x102>
 8007968:	9e02      	ldr	r6, [sp, #8]
 800796a:	1ee1      	subs	r1, r4, #3
 800796c:	2500      	movs	r5, #0
 800796e:	428e      	cmp	r6, r1
 8007970:	d304      	bcc.n	800797c <__mdiff+0xf4>
 8007972:	0031      	movs	r1, r6
 8007974:	3103      	adds	r1, #3
 8007976:	1b0c      	subs	r4, r1, r4
 8007978:	08a4      	lsrs	r4, r4, #2
 800797a:	00a5      	lsls	r5, r4, #2
 800797c:	195b      	adds	r3, r3, r5
 800797e:	3b04      	subs	r3, #4
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	2900      	cmp	r1, #0
 8007984:	d00f      	beq.n	80079a6 <__mdiff+0x11e>
 8007986:	6110      	str	r0, [r2, #16]
 8007988:	e797      	b.n	80078ba <__mdiff+0x32>
 800798a:	ce02      	ldmia	r6!, {r1}
 800798c:	b28d      	uxth	r5, r1
 800798e:	19ed      	adds	r5, r5, r7
 8007990:	0c0f      	lsrs	r7, r1, #16
 8007992:	1429      	asrs	r1, r5, #16
 8007994:	1879      	adds	r1, r7, r1
 8007996:	140f      	asrs	r7, r1, #16
 8007998:	b2ad      	uxth	r5, r5
 800799a:	0409      	lsls	r1, r1, #16
 800799c:	430d      	orrs	r5, r1
 800799e:	4661      	mov	r1, ip
 80079a0:	c120      	stmia	r1!, {r5}
 80079a2:	468c      	mov	ip, r1
 80079a4:	e7dd      	b.n	8007962 <__mdiff+0xda>
 80079a6:	3801      	subs	r0, #1
 80079a8:	e7e9      	b.n	800797e <__mdiff+0xf6>
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	0800944b 	.word	0x0800944b
 80079b0:	00000232 	.word	0x00000232
 80079b4:	0800945c 	.word	0x0800945c

080079b8 <__d2b>:
 80079b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ba:	2101      	movs	r1, #1
 80079bc:	0014      	movs	r4, r2
 80079be:	001e      	movs	r6, r3
 80079c0:	9f08      	ldr	r7, [sp, #32]
 80079c2:	f7ff fcc1 	bl	8007348 <_Balloc>
 80079c6:	1e05      	subs	r5, r0, #0
 80079c8:	d105      	bne.n	80079d6 <__d2b+0x1e>
 80079ca:	0002      	movs	r2, r0
 80079cc:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <__d2b+0xb0>)
 80079ce:	4927      	ldr	r1, [pc, #156]	; (8007a6c <__d2b+0xb4>)
 80079d0:	4827      	ldr	r0, [pc, #156]	; (8007a70 <__d2b+0xb8>)
 80079d2:	f000 fad7 	bl	8007f84 <__assert_func>
 80079d6:	0333      	lsls	r3, r6, #12
 80079d8:	0076      	lsls	r6, r6, #1
 80079da:	0b1b      	lsrs	r3, r3, #12
 80079dc:	0d76      	lsrs	r6, r6, #21
 80079de:	d124      	bne.n	8007a2a <__d2b+0x72>
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d027      	beq.n	8007a36 <__d2b+0x7e>
 80079e6:	4668      	mov	r0, sp
 80079e8:	9400      	str	r4, [sp, #0]
 80079ea:	f7ff fd73 	bl	80074d4 <__lo0bits>
 80079ee:	9c00      	ldr	r4, [sp, #0]
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d01e      	beq.n	8007a32 <__d2b+0x7a>
 80079f4:	9b01      	ldr	r3, [sp, #4]
 80079f6:	2120      	movs	r1, #32
 80079f8:	001a      	movs	r2, r3
 80079fa:	1a09      	subs	r1, r1, r0
 80079fc:	408a      	lsls	r2, r1
 80079fe:	40c3      	lsrs	r3, r0
 8007a00:	4322      	orrs	r2, r4
 8007a02:	616a      	str	r2, [r5, #20]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	9c01      	ldr	r4, [sp, #4]
 8007a08:	61ac      	str	r4, [r5, #24]
 8007a0a:	1e63      	subs	r3, r4, #1
 8007a0c:	419c      	sbcs	r4, r3
 8007a0e:	3401      	adds	r4, #1
 8007a10:	612c      	str	r4, [r5, #16]
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	d018      	beq.n	8007a48 <__d2b+0x90>
 8007a16:	4b17      	ldr	r3, [pc, #92]	; (8007a74 <__d2b+0xbc>)
 8007a18:	18f6      	adds	r6, r6, r3
 8007a1a:	2335      	movs	r3, #53	; 0x35
 8007a1c:	1836      	adds	r6, r6, r0
 8007a1e:	1a18      	subs	r0, r3, r0
 8007a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a22:	603e      	str	r6, [r7, #0]
 8007a24:	6018      	str	r0, [r3, #0]
 8007a26:	0028      	movs	r0, r5
 8007a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a2a:	2280      	movs	r2, #128	; 0x80
 8007a2c:	0352      	lsls	r2, r2, #13
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	e7d6      	b.n	80079e0 <__d2b+0x28>
 8007a32:	616c      	str	r4, [r5, #20]
 8007a34:	e7e7      	b.n	8007a06 <__d2b+0x4e>
 8007a36:	a801      	add	r0, sp, #4
 8007a38:	f7ff fd4c 	bl	80074d4 <__lo0bits>
 8007a3c:	2401      	movs	r4, #1
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	612c      	str	r4, [r5, #16]
 8007a42:	616b      	str	r3, [r5, #20]
 8007a44:	3020      	adds	r0, #32
 8007a46:	e7e4      	b.n	8007a12 <__d2b+0x5a>
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <__d2b+0xc0>)
 8007a4a:	18c0      	adds	r0, r0, r3
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <__d2b+0xc4>)
 8007a4e:	6038      	str	r0, [r7, #0]
 8007a50:	18e3      	adds	r3, r4, r3
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	18eb      	adds	r3, r5, r3
 8007a56:	6958      	ldr	r0, [r3, #20]
 8007a58:	f7ff fd22 	bl	80074a0 <__hi0bits>
 8007a5c:	0164      	lsls	r4, r4, #5
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	1a24      	subs	r4, r4, r0
 8007a62:	601c      	str	r4, [r3, #0]
 8007a64:	e7df      	b.n	8007a26 <__d2b+0x6e>
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	0800944b 	.word	0x0800944b
 8007a6c:	0000030a 	.word	0x0000030a
 8007a70:	0800945c 	.word	0x0800945c
 8007a74:	fffffbcd 	.word	0xfffffbcd
 8007a78:	fffffbce 	.word	0xfffffbce
 8007a7c:	3fffffff 	.word	0x3fffffff

08007a80 <_calloc_r>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	0c13      	lsrs	r3, r2, #16
 8007a84:	0c0d      	lsrs	r5, r1, #16
 8007a86:	d11e      	bne.n	8007ac6 <_calloc_r+0x46>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10c      	bne.n	8007aa6 <_calloc_r+0x26>
 8007a8c:	b289      	uxth	r1, r1
 8007a8e:	b294      	uxth	r4, r2
 8007a90:	434c      	muls	r4, r1
 8007a92:	0021      	movs	r1, r4
 8007a94:	f000 f88c 	bl	8007bb0 <_malloc_r>
 8007a98:	1e05      	subs	r5, r0, #0
 8007a9a:	d01b      	beq.n	8007ad4 <_calloc_r+0x54>
 8007a9c:	0022      	movs	r2, r4
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	f7fe f8dc 	bl	8005c5c <memset>
 8007aa4:	e016      	b.n	8007ad4 <_calloc_r+0x54>
 8007aa6:	1c1d      	adds	r5, r3, #0
 8007aa8:	1c0b      	adds	r3, r1, #0
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	b289      	uxth	r1, r1
 8007aae:	b29c      	uxth	r4, r3
 8007ab0:	4351      	muls	r1, r2
 8007ab2:	b2ab      	uxth	r3, r5
 8007ab4:	4363      	muls	r3, r4
 8007ab6:	0c0c      	lsrs	r4, r1, #16
 8007ab8:	191c      	adds	r4, r3, r4
 8007aba:	0c22      	lsrs	r2, r4, #16
 8007abc:	d107      	bne.n	8007ace <_calloc_r+0x4e>
 8007abe:	0424      	lsls	r4, r4, #16
 8007ac0:	b289      	uxth	r1, r1
 8007ac2:	430c      	orrs	r4, r1
 8007ac4:	e7e5      	b.n	8007a92 <_calloc_r+0x12>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <_calloc_r+0x4e>
 8007aca:	1c13      	adds	r3, r2, #0
 8007acc:	e7ed      	b.n	8007aaa <_calloc_r+0x2a>
 8007ace:	230c      	movs	r3, #12
 8007ad0:	2500      	movs	r5, #0
 8007ad2:	6003      	str	r3, [r0, #0]
 8007ad4:	0028      	movs	r0, r5
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}

08007ad8 <_free_r>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	0005      	movs	r5, r0
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d010      	beq.n	8007b02 <_free_r+0x2a>
 8007ae0:	1f0c      	subs	r4, r1, #4
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da00      	bge.n	8007aea <_free_r+0x12>
 8007ae8:	18e4      	adds	r4, r4, r3
 8007aea:	0028      	movs	r0, r5
 8007aec:	f000 fa9e 	bl	800802c <__malloc_lock>
 8007af0:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <_free_r+0x90>)
 8007af2:	6813      	ldr	r3, [r2, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <_free_r+0x2c>
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	6014      	str	r4, [r2, #0]
 8007afc:	0028      	movs	r0, r5
 8007afe:	f000 fa9d 	bl	800803c <__malloc_unlock>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d908      	bls.n	8007b1a <_free_r+0x42>
 8007b08:	6821      	ldr	r1, [r4, #0]
 8007b0a:	1860      	adds	r0, r4, r1
 8007b0c:	4283      	cmp	r3, r0
 8007b0e:	d1f3      	bne.n	8007af8 <_free_r+0x20>
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	1841      	adds	r1, r0, r1
 8007b16:	6021      	str	r1, [r4, #0]
 8007b18:	e7ee      	b.n	8007af8 <_free_r+0x20>
 8007b1a:	001a      	movs	r2, r3
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <_free_r+0x4e>
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	d9f9      	bls.n	8007b1a <_free_r+0x42>
 8007b26:	6811      	ldr	r1, [r2, #0]
 8007b28:	1850      	adds	r0, r2, r1
 8007b2a:	42a0      	cmp	r0, r4
 8007b2c:	d10b      	bne.n	8007b46 <_free_r+0x6e>
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	1809      	adds	r1, r1, r0
 8007b32:	1850      	adds	r0, r2, r1
 8007b34:	6011      	str	r1, [r2, #0]
 8007b36:	4283      	cmp	r3, r0
 8007b38:	d1e0      	bne.n	8007afc <_free_r+0x24>
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	1841      	adds	r1, r0, r1
 8007b40:	6011      	str	r1, [r2, #0]
 8007b42:	6053      	str	r3, [r2, #4]
 8007b44:	e7da      	b.n	8007afc <_free_r+0x24>
 8007b46:	42a0      	cmp	r0, r4
 8007b48:	d902      	bls.n	8007b50 <_free_r+0x78>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	e7d5      	b.n	8007afc <_free_r+0x24>
 8007b50:	6821      	ldr	r1, [r4, #0]
 8007b52:	1860      	adds	r0, r4, r1
 8007b54:	4283      	cmp	r3, r0
 8007b56:	d103      	bne.n	8007b60 <_free_r+0x88>
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	1841      	adds	r1, r0, r1
 8007b5e:	6021      	str	r1, [r4, #0]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	6054      	str	r4, [r2, #4]
 8007b64:	e7ca      	b.n	8007afc <_free_r+0x24>
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	200004e0 	.word	0x200004e0

08007b6c <sbrk_aligned>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	4e0f      	ldr	r6, [pc, #60]	; (8007bac <sbrk_aligned+0x40>)
 8007b70:	000d      	movs	r5, r1
 8007b72:	6831      	ldr	r1, [r6, #0]
 8007b74:	0004      	movs	r4, r0
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d102      	bne.n	8007b80 <sbrk_aligned+0x14>
 8007b7a:	f000 f9f1 	bl	8007f60 <_sbrk_r>
 8007b7e:	6030      	str	r0, [r6, #0]
 8007b80:	0029      	movs	r1, r5
 8007b82:	0020      	movs	r0, r4
 8007b84:	f000 f9ec 	bl	8007f60 <_sbrk_r>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d00a      	beq.n	8007ba2 <sbrk_aligned+0x36>
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	1cc5      	adds	r5, r0, #3
 8007b90:	439d      	bics	r5, r3
 8007b92:	42a8      	cmp	r0, r5
 8007b94:	d007      	beq.n	8007ba6 <sbrk_aligned+0x3a>
 8007b96:	1a29      	subs	r1, r5, r0
 8007b98:	0020      	movs	r0, r4
 8007b9a:	f000 f9e1 	bl	8007f60 <_sbrk_r>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d101      	bne.n	8007ba6 <sbrk_aligned+0x3a>
 8007ba2:	2501      	movs	r5, #1
 8007ba4:	426d      	negs	r5, r5
 8007ba6:	0028      	movs	r0, r5
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	200004e4 	.word	0x200004e4

08007bb0 <_malloc_r>:
 8007bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	1ccb      	adds	r3, r1, #3
 8007bb6:	4393      	bics	r3, r2
 8007bb8:	3308      	adds	r3, #8
 8007bba:	0006      	movs	r6, r0
 8007bbc:	001f      	movs	r7, r3
 8007bbe:	2b0c      	cmp	r3, #12
 8007bc0:	d232      	bcs.n	8007c28 <_malloc_r+0x78>
 8007bc2:	270c      	movs	r7, #12
 8007bc4:	42b9      	cmp	r1, r7
 8007bc6:	d831      	bhi.n	8007c2c <_malloc_r+0x7c>
 8007bc8:	0030      	movs	r0, r6
 8007bca:	f000 fa2f 	bl	800802c <__malloc_lock>
 8007bce:	4d32      	ldr	r5, [pc, #200]	; (8007c98 <_malloc_r+0xe8>)
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	001c      	movs	r4, r3
 8007bd4:	2c00      	cmp	r4, #0
 8007bd6:	d12e      	bne.n	8007c36 <_malloc_r+0x86>
 8007bd8:	0039      	movs	r1, r7
 8007bda:	0030      	movs	r0, r6
 8007bdc:	f7ff ffc6 	bl	8007b6c <sbrk_aligned>
 8007be0:	0004      	movs	r4, r0
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d11e      	bne.n	8007c24 <_malloc_r+0x74>
 8007be6:	682c      	ldr	r4, [r5, #0]
 8007be8:	0025      	movs	r5, r4
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	d14a      	bne.n	8007c84 <_malloc_r+0xd4>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	0029      	movs	r1, r5
 8007bf2:	18e3      	adds	r3, r4, r3
 8007bf4:	0030      	movs	r0, r6
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	f000 f9b2 	bl	8007f60 <_sbrk_r>
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	4283      	cmp	r3, r0
 8007c00:	d143      	bne.n	8007c8a <_malloc_r+0xda>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	3703      	adds	r7, #3
 8007c06:	1aff      	subs	r7, r7, r3
 8007c08:	2303      	movs	r3, #3
 8007c0a:	439f      	bics	r7, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	2f0c      	cmp	r7, #12
 8007c10:	d200      	bcs.n	8007c14 <_malloc_r+0x64>
 8007c12:	270c      	movs	r7, #12
 8007c14:	0039      	movs	r1, r7
 8007c16:	0030      	movs	r0, r6
 8007c18:	f7ff ffa8 	bl	8007b6c <sbrk_aligned>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d034      	beq.n	8007c8a <_malloc_r+0xda>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	19df      	adds	r7, r3, r7
 8007c24:	6027      	str	r7, [r4, #0]
 8007c26:	e013      	b.n	8007c50 <_malloc_r+0xa0>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dacb      	bge.n	8007bc4 <_malloc_r+0x14>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	2500      	movs	r5, #0
 8007c30:	6033      	str	r3, [r6, #0]
 8007c32:	0028      	movs	r0, r5
 8007c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	1bd1      	subs	r1, r2, r7
 8007c3a:	d420      	bmi.n	8007c7e <_malloc_r+0xce>
 8007c3c:	290b      	cmp	r1, #11
 8007c3e:	d917      	bls.n	8007c70 <_malloc_r+0xc0>
 8007c40:	19e2      	adds	r2, r4, r7
 8007c42:	6027      	str	r7, [r4, #0]
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	d111      	bne.n	8007c6c <_malloc_r+0xbc>
 8007c48:	602a      	str	r2, [r5, #0]
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	6011      	str	r1, [r2, #0]
 8007c4e:	6053      	str	r3, [r2, #4]
 8007c50:	0030      	movs	r0, r6
 8007c52:	0025      	movs	r5, r4
 8007c54:	f000 f9f2 	bl	800803c <__malloc_unlock>
 8007c58:	2207      	movs	r2, #7
 8007c5a:	350b      	adds	r5, #11
 8007c5c:	1d23      	adds	r3, r4, #4
 8007c5e:	4395      	bics	r5, r2
 8007c60:	1aea      	subs	r2, r5, r3
 8007c62:	429d      	cmp	r5, r3
 8007c64:	d0e5      	beq.n	8007c32 <_malloc_r+0x82>
 8007c66:	1b5b      	subs	r3, r3, r5
 8007c68:	50a3      	str	r3, [r4, r2]
 8007c6a:	e7e2      	b.n	8007c32 <_malloc_r+0x82>
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e7ec      	b.n	8007c4a <_malloc_r+0x9a>
 8007c70:	6862      	ldr	r2, [r4, #4]
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	d101      	bne.n	8007c7a <_malloc_r+0xca>
 8007c76:	602a      	str	r2, [r5, #0]
 8007c78:	e7ea      	b.n	8007c50 <_malloc_r+0xa0>
 8007c7a:	605a      	str	r2, [r3, #4]
 8007c7c:	e7e8      	b.n	8007c50 <_malloc_r+0xa0>
 8007c7e:	0023      	movs	r3, r4
 8007c80:	6864      	ldr	r4, [r4, #4]
 8007c82:	e7a7      	b.n	8007bd4 <_malloc_r+0x24>
 8007c84:	002c      	movs	r4, r5
 8007c86:	686d      	ldr	r5, [r5, #4]
 8007c88:	e7af      	b.n	8007bea <_malloc_r+0x3a>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	0030      	movs	r0, r6
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	f000 f9d4 	bl	800803c <__malloc_unlock>
 8007c94:	e7cd      	b.n	8007c32 <_malloc_r+0x82>
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	200004e0 	.word	0x200004e0

08007c9c <__ssputs_r>:
 8007c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9e:	688e      	ldr	r6, [r1, #8]
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	0007      	movs	r7, r0
 8007ca4:	000c      	movs	r4, r1
 8007ca6:	9203      	str	r2, [sp, #12]
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	429e      	cmp	r6, r3
 8007cac:	d83c      	bhi.n	8007d28 <__ssputs_r+0x8c>
 8007cae:	2390      	movs	r3, #144	; 0x90
 8007cb0:	898a      	ldrh	r2, [r1, #12]
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	421a      	tst	r2, r3
 8007cb6:	d034      	beq.n	8007d22 <__ssputs_r+0x86>
 8007cb8:	6909      	ldr	r1, [r1, #16]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	6960      	ldr	r0, [r4, #20]
 8007cbe:	1a5b      	subs	r3, r3, r1
 8007cc0:	9302      	str	r3, [sp, #8]
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	4343      	muls	r3, r0
 8007cc6:	0fdd      	lsrs	r5, r3, #31
 8007cc8:	18ed      	adds	r5, r5, r3
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	9802      	ldr	r0, [sp, #8]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	181b      	adds	r3, r3, r0
 8007cd2:	106d      	asrs	r5, r5, #1
 8007cd4:	42ab      	cmp	r3, r5
 8007cd6:	d900      	bls.n	8007cda <__ssputs_r+0x3e>
 8007cd8:	001d      	movs	r5, r3
 8007cda:	0553      	lsls	r3, r2, #21
 8007cdc:	d532      	bpl.n	8007d44 <__ssputs_r+0xa8>
 8007cde:	0029      	movs	r1, r5
 8007ce0:	0038      	movs	r0, r7
 8007ce2:	f7ff ff65 	bl	8007bb0 <_malloc_r>
 8007ce6:	1e06      	subs	r6, r0, #0
 8007ce8:	d109      	bne.n	8007cfe <__ssputs_r+0x62>
 8007cea:	230c      	movs	r3, #12
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	2340      	movs	r3, #64	; 0x40
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	89a2      	ldrh	r2, [r4, #12]
 8007cf4:	4240      	negs	r0, r0
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	b005      	add	sp, #20
 8007cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfe:	9a02      	ldr	r2, [sp, #8]
 8007d00:	6921      	ldr	r1, [r4, #16]
 8007d02:	f7ff fb18 	bl	8007336 <memcpy>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	4a14      	ldr	r2, [pc, #80]	; (8007d5c <__ssputs_r+0xc0>)
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	2380      	movs	r3, #128	; 0x80
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	9b02      	ldr	r3, [sp, #8]
 8007d14:	6126      	str	r6, [r4, #16]
 8007d16:	18f6      	adds	r6, r6, r3
 8007d18:	6026      	str	r6, [r4, #0]
 8007d1a:	6165      	str	r5, [r4, #20]
 8007d1c:	9e01      	ldr	r6, [sp, #4]
 8007d1e:	1aed      	subs	r5, r5, r3
 8007d20:	60a5      	str	r5, [r4, #8]
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	429e      	cmp	r6, r3
 8007d26:	d900      	bls.n	8007d2a <__ssputs_r+0x8e>
 8007d28:	9e01      	ldr	r6, [sp, #4]
 8007d2a:	0032      	movs	r2, r6
 8007d2c:	9903      	ldr	r1, [sp, #12]
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	f000 f968 	bl	8008004 <memmove>
 8007d34:	68a3      	ldr	r3, [r4, #8]
 8007d36:	2000      	movs	r0, #0
 8007d38:	1b9b      	subs	r3, r3, r6
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	199e      	adds	r6, r3, r6
 8007d40:	6026      	str	r6, [r4, #0]
 8007d42:	e7da      	b.n	8007cfa <__ssputs_r+0x5e>
 8007d44:	002a      	movs	r2, r5
 8007d46:	0038      	movs	r0, r7
 8007d48:	f000 f980 	bl	800804c <_realloc_r>
 8007d4c:	1e06      	subs	r6, r0, #0
 8007d4e:	d1e0      	bne.n	8007d12 <__ssputs_r+0x76>
 8007d50:	0038      	movs	r0, r7
 8007d52:	6921      	ldr	r1, [r4, #16]
 8007d54:	f7ff fec0 	bl	8007ad8 <_free_r>
 8007d58:	e7c7      	b.n	8007cea <__ssputs_r+0x4e>
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	fffffb7f 	.word	0xfffffb7f

08007d60 <_svfiprintf_r>:
 8007d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d62:	b0a1      	sub	sp, #132	; 0x84
 8007d64:	9003      	str	r0, [sp, #12]
 8007d66:	001d      	movs	r5, r3
 8007d68:	898b      	ldrh	r3, [r1, #12]
 8007d6a:	000f      	movs	r7, r1
 8007d6c:	0016      	movs	r6, r2
 8007d6e:	061b      	lsls	r3, r3, #24
 8007d70:	d511      	bpl.n	8007d96 <_svfiprintf_r+0x36>
 8007d72:	690b      	ldr	r3, [r1, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10e      	bne.n	8007d96 <_svfiprintf_r+0x36>
 8007d78:	2140      	movs	r1, #64	; 0x40
 8007d7a:	f7ff ff19 	bl	8007bb0 <_malloc_r>
 8007d7e:	6038      	str	r0, [r7, #0]
 8007d80:	6138      	str	r0, [r7, #16]
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d105      	bne.n	8007d92 <_svfiprintf_r+0x32>
 8007d86:	230c      	movs	r3, #12
 8007d88:	9a03      	ldr	r2, [sp, #12]
 8007d8a:	3801      	subs	r0, #1
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	b021      	add	sp, #132	; 0x84
 8007d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d92:	2340      	movs	r3, #64	; 0x40
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	2300      	movs	r3, #0
 8007d98:	ac08      	add	r4, sp, #32
 8007d9a:	6163      	str	r3, [r4, #20]
 8007d9c:	3320      	adds	r3, #32
 8007d9e:	7663      	strb	r3, [r4, #25]
 8007da0:	3310      	adds	r3, #16
 8007da2:	76a3      	strb	r3, [r4, #26]
 8007da4:	9507      	str	r5, [sp, #28]
 8007da6:	0035      	movs	r5, r6
 8007da8:	782b      	ldrb	r3, [r5, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <_svfiprintf_r+0x52>
 8007dae:	2b25      	cmp	r3, #37	; 0x25
 8007db0:	d147      	bne.n	8007e42 <_svfiprintf_r+0xe2>
 8007db2:	1bab      	subs	r3, r5, r6
 8007db4:	9305      	str	r3, [sp, #20]
 8007db6:	42b5      	cmp	r5, r6
 8007db8:	d00c      	beq.n	8007dd4 <_svfiprintf_r+0x74>
 8007dba:	0032      	movs	r2, r6
 8007dbc:	0039      	movs	r1, r7
 8007dbe:	9803      	ldr	r0, [sp, #12]
 8007dc0:	f7ff ff6c 	bl	8007c9c <__ssputs_r>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d100      	bne.n	8007dca <_svfiprintf_r+0x6a>
 8007dc8:	e0ae      	b.n	8007f28 <_svfiprintf_r+0x1c8>
 8007dca:	6962      	ldr	r2, [r4, #20]
 8007dcc:	9b05      	ldr	r3, [sp, #20]
 8007dce:	4694      	mov	ip, r2
 8007dd0:	4463      	add	r3, ip
 8007dd2:	6163      	str	r3, [r4, #20]
 8007dd4:	782b      	ldrb	r3, [r5, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d100      	bne.n	8007ddc <_svfiprintf_r+0x7c>
 8007dda:	e0a5      	b.n	8007f28 <_svfiprintf_r+0x1c8>
 8007ddc:	2201      	movs	r2, #1
 8007dde:	2300      	movs	r3, #0
 8007de0:	4252      	negs	r2, r2
 8007de2:	6062      	str	r2, [r4, #4]
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	3254      	adds	r2, #84	; 0x54
 8007de8:	1852      	adds	r2, r2, r1
 8007dea:	1c6e      	adds	r6, r5, #1
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	60e3      	str	r3, [r4, #12]
 8007df0:	60a3      	str	r3, [r4, #8]
 8007df2:	7013      	strb	r3, [r2, #0]
 8007df4:	65a3      	str	r3, [r4, #88]	; 0x58
 8007df6:	2205      	movs	r2, #5
 8007df8:	7831      	ldrb	r1, [r6, #0]
 8007dfa:	4854      	ldr	r0, [pc, #336]	; (8007f4c <_svfiprintf_r+0x1ec>)
 8007dfc:	f7ff fa90 	bl	8007320 <memchr>
 8007e00:	1c75      	adds	r5, r6, #1
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d11f      	bne.n	8007e46 <_svfiprintf_r+0xe6>
 8007e06:	6822      	ldr	r2, [r4, #0]
 8007e08:	06d3      	lsls	r3, r2, #27
 8007e0a:	d504      	bpl.n	8007e16 <_svfiprintf_r+0xb6>
 8007e0c:	2353      	movs	r3, #83	; 0x53
 8007e0e:	a904      	add	r1, sp, #16
 8007e10:	185b      	adds	r3, r3, r1
 8007e12:	2120      	movs	r1, #32
 8007e14:	7019      	strb	r1, [r3, #0]
 8007e16:	0713      	lsls	r3, r2, #28
 8007e18:	d504      	bpl.n	8007e24 <_svfiprintf_r+0xc4>
 8007e1a:	2353      	movs	r3, #83	; 0x53
 8007e1c:	a904      	add	r1, sp, #16
 8007e1e:	185b      	adds	r3, r3, r1
 8007e20:	212b      	movs	r1, #43	; 0x2b
 8007e22:	7019      	strb	r1, [r3, #0]
 8007e24:	7833      	ldrb	r3, [r6, #0]
 8007e26:	2b2a      	cmp	r3, #42	; 0x2a
 8007e28:	d016      	beq.n	8007e58 <_svfiprintf_r+0xf8>
 8007e2a:	0035      	movs	r5, r6
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	200a      	movs	r0, #10
 8007e30:	68e3      	ldr	r3, [r4, #12]
 8007e32:	782a      	ldrb	r2, [r5, #0]
 8007e34:	1c6e      	adds	r6, r5, #1
 8007e36:	3a30      	subs	r2, #48	; 0x30
 8007e38:	2a09      	cmp	r2, #9
 8007e3a:	d94e      	bls.n	8007eda <_svfiprintf_r+0x17a>
 8007e3c:	2900      	cmp	r1, #0
 8007e3e:	d111      	bne.n	8007e64 <_svfiprintf_r+0x104>
 8007e40:	e017      	b.n	8007e72 <_svfiprintf_r+0x112>
 8007e42:	3501      	adds	r5, #1
 8007e44:	e7b0      	b.n	8007da8 <_svfiprintf_r+0x48>
 8007e46:	4b41      	ldr	r3, [pc, #260]	; (8007f4c <_svfiprintf_r+0x1ec>)
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	1ac0      	subs	r0, r0, r3
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4083      	lsls	r3, r0
 8007e50:	4313      	orrs	r3, r2
 8007e52:	002e      	movs	r6, r5
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	e7ce      	b.n	8007df6 <_svfiprintf_r+0x96>
 8007e58:	9b07      	ldr	r3, [sp, #28]
 8007e5a:	1d19      	adds	r1, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9107      	str	r1, [sp, #28]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	db01      	blt.n	8007e68 <_svfiprintf_r+0x108>
 8007e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e66:	e004      	b.n	8007e72 <_svfiprintf_r+0x112>
 8007e68:	425b      	negs	r3, r3
 8007e6a:	60e3      	str	r3, [r4, #12]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	782b      	ldrb	r3, [r5, #0]
 8007e74:	2b2e      	cmp	r3, #46	; 0x2e
 8007e76:	d10a      	bne.n	8007e8e <_svfiprintf_r+0x12e>
 8007e78:	786b      	ldrb	r3, [r5, #1]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d135      	bne.n	8007eea <_svfiprintf_r+0x18a>
 8007e7e:	9b07      	ldr	r3, [sp, #28]
 8007e80:	3502      	adds	r5, #2
 8007e82:	1d1a      	adds	r2, r3, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	9207      	str	r2, [sp, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	db2b      	blt.n	8007ee4 <_svfiprintf_r+0x184>
 8007e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8e:	4e30      	ldr	r6, [pc, #192]	; (8007f50 <_svfiprintf_r+0x1f0>)
 8007e90:	2203      	movs	r2, #3
 8007e92:	0030      	movs	r0, r6
 8007e94:	7829      	ldrb	r1, [r5, #0]
 8007e96:	f7ff fa43 	bl	8007320 <memchr>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d006      	beq.n	8007eac <_svfiprintf_r+0x14c>
 8007e9e:	2340      	movs	r3, #64	; 0x40
 8007ea0:	1b80      	subs	r0, r0, r6
 8007ea2:	4083      	lsls	r3, r0
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	3501      	adds	r5, #1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	7829      	ldrb	r1, [r5, #0]
 8007eae:	2206      	movs	r2, #6
 8007eb0:	4828      	ldr	r0, [pc, #160]	; (8007f54 <_svfiprintf_r+0x1f4>)
 8007eb2:	1c6e      	adds	r6, r5, #1
 8007eb4:	7621      	strb	r1, [r4, #24]
 8007eb6:	f7ff fa33 	bl	8007320 <memchr>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d03c      	beq.n	8007f38 <_svfiprintf_r+0x1d8>
 8007ebe:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <_svfiprintf_r+0x1f8>)
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d125      	bne.n	8007f10 <_svfiprintf_r+0x1b0>
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	3307      	adds	r3, #7
 8007eca:	4393      	bics	r3, r2
 8007ecc:	3308      	adds	r3, #8
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	6963      	ldr	r3, [r4, #20]
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	6163      	str	r3, [r4, #20]
 8007ed8:	e765      	b.n	8007da6 <_svfiprintf_r+0x46>
 8007eda:	4343      	muls	r3, r0
 8007edc:	0035      	movs	r5, r6
 8007ede:	2101      	movs	r1, #1
 8007ee0:	189b      	adds	r3, r3, r2
 8007ee2:	e7a6      	b.n	8007e32 <_svfiprintf_r+0xd2>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	425b      	negs	r3, r3
 8007ee8:	e7d0      	b.n	8007e8c <_svfiprintf_r+0x12c>
 8007eea:	2300      	movs	r3, #0
 8007eec:	200a      	movs	r0, #10
 8007eee:	001a      	movs	r2, r3
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	7829      	ldrb	r1, [r5, #0]
 8007ef6:	1c6e      	adds	r6, r5, #1
 8007ef8:	3930      	subs	r1, #48	; 0x30
 8007efa:	2909      	cmp	r1, #9
 8007efc:	d903      	bls.n	8007f06 <_svfiprintf_r+0x1a6>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0c5      	beq.n	8007e8e <_svfiprintf_r+0x12e>
 8007f02:	9209      	str	r2, [sp, #36]	; 0x24
 8007f04:	e7c3      	b.n	8007e8e <_svfiprintf_r+0x12e>
 8007f06:	4342      	muls	r2, r0
 8007f08:	0035      	movs	r5, r6
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	1852      	adds	r2, r2, r1
 8007f0e:	e7f1      	b.n	8007ef4 <_svfiprintf_r+0x194>
 8007f10:	ab07      	add	r3, sp, #28
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	003a      	movs	r2, r7
 8007f16:	0021      	movs	r1, r4
 8007f18:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <_svfiprintf_r+0x1fc>)
 8007f1a:	9803      	ldr	r0, [sp, #12]
 8007f1c:	f7fd ff50 	bl	8005dc0 <_printf_float>
 8007f20:	9004      	str	r0, [sp, #16]
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	3301      	adds	r3, #1
 8007f26:	d1d3      	bne.n	8007ed0 <_svfiprintf_r+0x170>
 8007f28:	89bb      	ldrh	r3, [r7, #12]
 8007f2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f2c:	065b      	lsls	r3, r3, #25
 8007f2e:	d400      	bmi.n	8007f32 <_svfiprintf_r+0x1d2>
 8007f30:	e72d      	b.n	8007d8e <_svfiprintf_r+0x2e>
 8007f32:	2001      	movs	r0, #1
 8007f34:	4240      	negs	r0, r0
 8007f36:	e72a      	b.n	8007d8e <_svfiprintf_r+0x2e>
 8007f38:	ab07      	add	r3, sp, #28
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	003a      	movs	r2, r7
 8007f3e:	0021      	movs	r1, r4
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <_svfiprintf_r+0x1fc>)
 8007f42:	9803      	ldr	r0, [sp, #12]
 8007f44:	f7fe f9ee 	bl	8006324 <_printf_i>
 8007f48:	e7ea      	b.n	8007f20 <_svfiprintf_r+0x1c0>
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	080095b4 	.word	0x080095b4
 8007f50:	080095ba 	.word	0x080095ba
 8007f54:	080095be 	.word	0x080095be
 8007f58:	08005dc1 	.word	0x08005dc1
 8007f5c:	08007c9d 	.word	0x08007c9d

08007f60 <_sbrk_r>:
 8007f60:	2300      	movs	r3, #0
 8007f62:	b570      	push	{r4, r5, r6, lr}
 8007f64:	4d06      	ldr	r5, [pc, #24]	; (8007f80 <_sbrk_r+0x20>)
 8007f66:	0004      	movs	r4, r0
 8007f68:	0008      	movs	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7fb f96a 	bl	8003244 <_sbrk>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d103      	bne.n	8007f7c <_sbrk_r+0x1c>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d000      	beq.n	8007f7c <_sbrk_r+0x1c>
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	bd70      	pop	{r4, r5, r6, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	200004e8 	.word	0x200004e8

08007f84 <__assert_func>:
 8007f84:	b530      	push	{r4, r5, lr}
 8007f86:	0014      	movs	r4, r2
 8007f88:	001a      	movs	r2, r3
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <__assert_func+0x2c>)
 8007f8c:	0005      	movs	r5, r0
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	b085      	sub	sp, #20
 8007f92:	68d8      	ldr	r0, [r3, #12]
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <__assert_func+0x30>)
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	d101      	bne.n	8007f9e <__assert_func+0x1a>
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <__assert_func+0x34>)
 8007f9c:	001c      	movs	r4, r3
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	9100      	str	r1, [sp, #0]
 8007fa2:	002b      	movs	r3, r5
 8007fa4:	4905      	ldr	r1, [pc, #20]	; (8007fbc <__assert_func+0x38>)
 8007fa6:	9402      	str	r4, [sp, #8]
 8007fa8:	f000 f80a 	bl	8007fc0 <fiprintf>
 8007fac:	f000 faba 	bl	8008524 <abort>
 8007fb0:	20000054 	.word	0x20000054
 8007fb4:	080095c5 	.word	0x080095c5
 8007fb8:	08009600 	.word	0x08009600
 8007fbc:	080095d2 	.word	0x080095d2

08007fc0 <fiprintf>:
 8007fc0:	b40e      	push	{r1, r2, r3}
 8007fc2:	b503      	push	{r0, r1, lr}
 8007fc4:	0001      	movs	r1, r0
 8007fc6:	ab03      	add	r3, sp, #12
 8007fc8:	4804      	ldr	r0, [pc, #16]	; (8007fdc <fiprintf+0x1c>)
 8007fca:	cb04      	ldmia	r3!, {r2}
 8007fcc:	6800      	ldr	r0, [r0, #0]
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	f000 f892 	bl	80080f8 <_vfiprintf_r>
 8007fd4:	b002      	add	sp, #8
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	b003      	add	sp, #12
 8007fda:	4718      	bx	r3
 8007fdc:	20000054 	.word	0x20000054

08007fe0 <__ascii_mbtowc>:
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d100      	bne.n	8007fe8 <__ascii_mbtowc+0x8>
 8007fe6:	a901      	add	r1, sp, #4
 8007fe8:	1e10      	subs	r0, r2, #0
 8007fea:	d006      	beq.n	8007ffa <__ascii_mbtowc+0x1a>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d006      	beq.n	8007ffe <__ascii_mbtowc+0x1e>
 8007ff0:	7813      	ldrb	r3, [r2, #0]
 8007ff2:	600b      	str	r3, [r1, #0]
 8007ff4:	7810      	ldrb	r0, [r2, #0]
 8007ff6:	1e43      	subs	r3, r0, #1
 8007ff8:	4198      	sbcs	r0, r3
 8007ffa:	b002      	add	sp, #8
 8007ffc:	4770      	bx	lr
 8007ffe:	2002      	movs	r0, #2
 8008000:	4240      	negs	r0, r0
 8008002:	e7fa      	b.n	8007ffa <__ascii_mbtowc+0x1a>

08008004 <memmove>:
 8008004:	b510      	push	{r4, lr}
 8008006:	4288      	cmp	r0, r1
 8008008:	d902      	bls.n	8008010 <memmove+0xc>
 800800a:	188b      	adds	r3, r1, r2
 800800c:	4298      	cmp	r0, r3
 800800e:	d303      	bcc.n	8008018 <memmove+0x14>
 8008010:	2300      	movs	r3, #0
 8008012:	e007      	b.n	8008024 <memmove+0x20>
 8008014:	5c8b      	ldrb	r3, [r1, r2]
 8008016:	5483      	strb	r3, [r0, r2]
 8008018:	3a01      	subs	r2, #1
 800801a:	d2fb      	bcs.n	8008014 <memmove+0x10>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	5ccc      	ldrb	r4, [r1, r3]
 8008020:	54c4      	strb	r4, [r0, r3]
 8008022:	3301      	adds	r3, #1
 8008024:	429a      	cmp	r2, r3
 8008026:	d1fa      	bne.n	800801e <memmove+0x1a>
 8008028:	e7f8      	b.n	800801c <memmove+0x18>
	...

0800802c <__malloc_lock>:
 800802c:	b510      	push	{r4, lr}
 800802e:	4802      	ldr	r0, [pc, #8]	; (8008038 <__malloc_lock+0xc>)
 8008030:	f000 fc4f 	bl	80088d2 <__retarget_lock_acquire_recursive>
 8008034:	bd10      	pop	{r4, pc}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	200004ec 	.word	0x200004ec

0800803c <__malloc_unlock>:
 800803c:	b510      	push	{r4, lr}
 800803e:	4802      	ldr	r0, [pc, #8]	; (8008048 <__malloc_unlock+0xc>)
 8008040:	f000 fc48 	bl	80088d4 <__retarget_lock_release_recursive>
 8008044:	bd10      	pop	{r4, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	200004ec 	.word	0x200004ec

0800804c <_realloc_r>:
 800804c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800804e:	0007      	movs	r7, r0
 8008050:	000e      	movs	r6, r1
 8008052:	0014      	movs	r4, r2
 8008054:	2900      	cmp	r1, #0
 8008056:	d105      	bne.n	8008064 <_realloc_r+0x18>
 8008058:	0011      	movs	r1, r2
 800805a:	f7ff fda9 	bl	8007bb0 <_malloc_r>
 800805e:	0005      	movs	r5, r0
 8008060:	0028      	movs	r0, r5
 8008062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008064:	2a00      	cmp	r2, #0
 8008066:	d103      	bne.n	8008070 <_realloc_r+0x24>
 8008068:	f7ff fd36 	bl	8007ad8 <_free_r>
 800806c:	0025      	movs	r5, r4
 800806e:	e7f7      	b.n	8008060 <_realloc_r+0x14>
 8008070:	f000 fc9e 	bl	80089b0 <_malloc_usable_size_r>
 8008074:	9001      	str	r0, [sp, #4]
 8008076:	4284      	cmp	r4, r0
 8008078:	d803      	bhi.n	8008082 <_realloc_r+0x36>
 800807a:	0035      	movs	r5, r6
 800807c:	0843      	lsrs	r3, r0, #1
 800807e:	42a3      	cmp	r3, r4
 8008080:	d3ee      	bcc.n	8008060 <_realloc_r+0x14>
 8008082:	0021      	movs	r1, r4
 8008084:	0038      	movs	r0, r7
 8008086:	f7ff fd93 	bl	8007bb0 <_malloc_r>
 800808a:	1e05      	subs	r5, r0, #0
 800808c:	d0e8      	beq.n	8008060 <_realloc_r+0x14>
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	0022      	movs	r2, r4
 8008092:	429c      	cmp	r4, r3
 8008094:	d900      	bls.n	8008098 <_realloc_r+0x4c>
 8008096:	001a      	movs	r2, r3
 8008098:	0031      	movs	r1, r6
 800809a:	0028      	movs	r0, r5
 800809c:	f7ff f94b 	bl	8007336 <memcpy>
 80080a0:	0031      	movs	r1, r6
 80080a2:	0038      	movs	r0, r7
 80080a4:	f7ff fd18 	bl	8007ad8 <_free_r>
 80080a8:	e7da      	b.n	8008060 <_realloc_r+0x14>

080080aa <__sfputc_r>:
 80080aa:	6893      	ldr	r3, [r2, #8]
 80080ac:	b510      	push	{r4, lr}
 80080ae:	3b01      	subs	r3, #1
 80080b0:	6093      	str	r3, [r2, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da04      	bge.n	80080c0 <__sfputc_r+0x16>
 80080b6:	6994      	ldr	r4, [r2, #24]
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	db07      	blt.n	80080cc <__sfputc_r+0x22>
 80080bc:	290a      	cmp	r1, #10
 80080be:	d005      	beq.n	80080cc <__sfputc_r+0x22>
 80080c0:	6813      	ldr	r3, [r2, #0]
 80080c2:	1c58      	adds	r0, r3, #1
 80080c4:	6010      	str	r0, [r2, #0]
 80080c6:	7019      	strb	r1, [r3, #0]
 80080c8:	0008      	movs	r0, r1
 80080ca:	bd10      	pop	{r4, pc}
 80080cc:	f000 f94e 	bl	800836c <__swbuf_r>
 80080d0:	0001      	movs	r1, r0
 80080d2:	e7f9      	b.n	80080c8 <__sfputc_r+0x1e>

080080d4 <__sfputs_r>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	0006      	movs	r6, r0
 80080d8:	000f      	movs	r7, r1
 80080da:	0014      	movs	r4, r2
 80080dc:	18d5      	adds	r5, r2, r3
 80080de:	42ac      	cmp	r4, r5
 80080e0:	d101      	bne.n	80080e6 <__sfputs_r+0x12>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e007      	b.n	80080f6 <__sfputs_r+0x22>
 80080e6:	7821      	ldrb	r1, [r4, #0]
 80080e8:	003a      	movs	r2, r7
 80080ea:	0030      	movs	r0, r6
 80080ec:	f7ff ffdd 	bl	80080aa <__sfputc_r>
 80080f0:	3401      	adds	r4, #1
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	d1f3      	bne.n	80080de <__sfputs_r+0xa>
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080f8 <_vfiprintf_r>:
 80080f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fa:	b0a1      	sub	sp, #132	; 0x84
 80080fc:	0006      	movs	r6, r0
 80080fe:	000c      	movs	r4, r1
 8008100:	001f      	movs	r7, r3
 8008102:	9203      	str	r2, [sp, #12]
 8008104:	2800      	cmp	r0, #0
 8008106:	d004      	beq.n	8008112 <_vfiprintf_r+0x1a>
 8008108:	6983      	ldr	r3, [r0, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <_vfiprintf_r+0x1a>
 800810e:	f000 fb3f 	bl	8008790 <__sinit>
 8008112:	4b8e      	ldr	r3, [pc, #568]	; (800834c <_vfiprintf_r+0x254>)
 8008114:	429c      	cmp	r4, r3
 8008116:	d11c      	bne.n	8008152 <_vfiprintf_r+0x5a>
 8008118:	6874      	ldr	r4, [r6, #4]
 800811a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800811c:	07db      	lsls	r3, r3, #31
 800811e:	d405      	bmi.n	800812c <_vfiprintf_r+0x34>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	059b      	lsls	r3, r3, #22
 8008124:	d402      	bmi.n	800812c <_vfiprintf_r+0x34>
 8008126:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008128:	f000 fbd3 	bl	80088d2 <__retarget_lock_acquire_recursive>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	071b      	lsls	r3, r3, #28
 8008130:	d502      	bpl.n	8008138 <_vfiprintf_r+0x40>
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11d      	bne.n	8008174 <_vfiprintf_r+0x7c>
 8008138:	0021      	movs	r1, r4
 800813a:	0030      	movs	r0, r6
 800813c:	f000 f97a 	bl	8008434 <__swsetup_r>
 8008140:	2800      	cmp	r0, #0
 8008142:	d017      	beq.n	8008174 <_vfiprintf_r+0x7c>
 8008144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d50d      	bpl.n	8008166 <_vfiprintf_r+0x6e>
 800814a:	2001      	movs	r0, #1
 800814c:	4240      	negs	r0, r0
 800814e:	b021      	add	sp, #132	; 0x84
 8008150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008152:	4b7f      	ldr	r3, [pc, #508]	; (8008350 <_vfiprintf_r+0x258>)
 8008154:	429c      	cmp	r4, r3
 8008156:	d101      	bne.n	800815c <_vfiprintf_r+0x64>
 8008158:	68b4      	ldr	r4, [r6, #8]
 800815a:	e7de      	b.n	800811a <_vfiprintf_r+0x22>
 800815c:	4b7d      	ldr	r3, [pc, #500]	; (8008354 <_vfiprintf_r+0x25c>)
 800815e:	429c      	cmp	r4, r3
 8008160:	d1db      	bne.n	800811a <_vfiprintf_r+0x22>
 8008162:	68f4      	ldr	r4, [r6, #12]
 8008164:	e7d9      	b.n	800811a <_vfiprintf_r+0x22>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	059b      	lsls	r3, r3, #22
 800816a:	d4ee      	bmi.n	800814a <_vfiprintf_r+0x52>
 800816c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816e:	f000 fbb1 	bl	80088d4 <__retarget_lock_release_recursive>
 8008172:	e7ea      	b.n	800814a <_vfiprintf_r+0x52>
 8008174:	2300      	movs	r3, #0
 8008176:	ad08      	add	r5, sp, #32
 8008178:	616b      	str	r3, [r5, #20]
 800817a:	3320      	adds	r3, #32
 800817c:	766b      	strb	r3, [r5, #25]
 800817e:	3310      	adds	r3, #16
 8008180:	76ab      	strb	r3, [r5, #26]
 8008182:	9707      	str	r7, [sp, #28]
 8008184:	9f03      	ldr	r7, [sp, #12]
 8008186:	783b      	ldrb	r3, [r7, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <_vfiprintf_r+0x98>
 800818c:	2b25      	cmp	r3, #37	; 0x25
 800818e:	d14e      	bne.n	800822e <_vfiprintf_r+0x136>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	1afb      	subs	r3, r7, r3
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	429f      	cmp	r7, r3
 800819a:	d00d      	beq.n	80081b8 <_vfiprintf_r+0xc0>
 800819c:	9b05      	ldr	r3, [sp, #20]
 800819e:	0021      	movs	r1, r4
 80081a0:	0030      	movs	r0, r6
 80081a2:	9a03      	ldr	r2, [sp, #12]
 80081a4:	f7ff ff96 	bl	80080d4 <__sfputs_r>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d100      	bne.n	80081ae <_vfiprintf_r+0xb6>
 80081ac:	e0b5      	b.n	800831a <_vfiprintf_r+0x222>
 80081ae:	696a      	ldr	r2, [r5, #20]
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	4694      	mov	ip, r2
 80081b4:	4463      	add	r3, ip
 80081b6:	616b      	str	r3, [r5, #20]
 80081b8:	783b      	ldrb	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d100      	bne.n	80081c0 <_vfiprintf_r+0xc8>
 80081be:	e0ac      	b.n	800831a <_vfiprintf_r+0x222>
 80081c0:	2201      	movs	r2, #1
 80081c2:	1c7b      	adds	r3, r7, #1
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	2300      	movs	r3, #0
 80081c8:	4252      	negs	r2, r2
 80081ca:	606a      	str	r2, [r5, #4]
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	3254      	adds	r2, #84	; 0x54
 80081d0:	1852      	adds	r2, r2, r1
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	60eb      	str	r3, [r5, #12]
 80081d6:	60ab      	str	r3, [r5, #8]
 80081d8:	7013      	strb	r3, [r2, #0]
 80081da:	65ab      	str	r3, [r5, #88]	; 0x58
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	2205      	movs	r2, #5
 80081e0:	7819      	ldrb	r1, [r3, #0]
 80081e2:	485d      	ldr	r0, [pc, #372]	; (8008358 <_vfiprintf_r+0x260>)
 80081e4:	f7ff f89c 	bl	8007320 <memchr>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	1c5f      	adds	r7, r3, #1
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d120      	bne.n	8008232 <_vfiprintf_r+0x13a>
 80081f0:	682a      	ldr	r2, [r5, #0]
 80081f2:	06d3      	lsls	r3, r2, #27
 80081f4:	d504      	bpl.n	8008200 <_vfiprintf_r+0x108>
 80081f6:	2353      	movs	r3, #83	; 0x53
 80081f8:	a904      	add	r1, sp, #16
 80081fa:	185b      	adds	r3, r3, r1
 80081fc:	2120      	movs	r1, #32
 80081fe:	7019      	strb	r1, [r3, #0]
 8008200:	0713      	lsls	r3, r2, #28
 8008202:	d504      	bpl.n	800820e <_vfiprintf_r+0x116>
 8008204:	2353      	movs	r3, #83	; 0x53
 8008206:	a904      	add	r1, sp, #16
 8008208:	185b      	adds	r3, r3, r1
 800820a:	212b      	movs	r1, #43	; 0x2b
 800820c:	7019      	strb	r1, [r3, #0]
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b2a      	cmp	r3, #42	; 0x2a
 8008214:	d016      	beq.n	8008244 <_vfiprintf_r+0x14c>
 8008216:	2100      	movs	r1, #0
 8008218:	68eb      	ldr	r3, [r5, #12]
 800821a:	9f03      	ldr	r7, [sp, #12]
 800821c:	783a      	ldrb	r2, [r7, #0]
 800821e:	1c78      	adds	r0, r7, #1
 8008220:	3a30      	subs	r2, #48	; 0x30
 8008222:	4684      	mov	ip, r0
 8008224:	2a09      	cmp	r2, #9
 8008226:	d94f      	bls.n	80082c8 <_vfiprintf_r+0x1d0>
 8008228:	2900      	cmp	r1, #0
 800822a:	d111      	bne.n	8008250 <_vfiprintf_r+0x158>
 800822c:	e017      	b.n	800825e <_vfiprintf_r+0x166>
 800822e:	3701      	adds	r7, #1
 8008230:	e7a9      	b.n	8008186 <_vfiprintf_r+0x8e>
 8008232:	4b49      	ldr	r3, [pc, #292]	; (8008358 <_vfiprintf_r+0x260>)
 8008234:	682a      	ldr	r2, [r5, #0]
 8008236:	1ac0      	subs	r0, r0, r3
 8008238:	2301      	movs	r3, #1
 800823a:	4083      	lsls	r3, r0
 800823c:	4313      	orrs	r3, r2
 800823e:	602b      	str	r3, [r5, #0]
 8008240:	9703      	str	r7, [sp, #12]
 8008242:	e7cb      	b.n	80081dc <_vfiprintf_r+0xe4>
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	1d19      	adds	r1, r3, #4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	9107      	str	r1, [sp, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	db01      	blt.n	8008254 <_vfiprintf_r+0x15c>
 8008250:	930b      	str	r3, [sp, #44]	; 0x2c
 8008252:	e004      	b.n	800825e <_vfiprintf_r+0x166>
 8008254:	425b      	negs	r3, r3
 8008256:	60eb      	str	r3, [r5, #12]
 8008258:	2302      	movs	r3, #2
 800825a:	4313      	orrs	r3, r2
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	783b      	ldrb	r3, [r7, #0]
 8008260:	2b2e      	cmp	r3, #46	; 0x2e
 8008262:	d10a      	bne.n	800827a <_vfiprintf_r+0x182>
 8008264:	787b      	ldrb	r3, [r7, #1]
 8008266:	2b2a      	cmp	r3, #42	; 0x2a
 8008268:	d137      	bne.n	80082da <_vfiprintf_r+0x1e2>
 800826a:	9b07      	ldr	r3, [sp, #28]
 800826c:	3702      	adds	r7, #2
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	9207      	str	r2, [sp, #28]
 8008274:	2b00      	cmp	r3, #0
 8008276:	db2d      	blt.n	80082d4 <_vfiprintf_r+0x1dc>
 8008278:	9309      	str	r3, [sp, #36]	; 0x24
 800827a:	2203      	movs	r2, #3
 800827c:	7839      	ldrb	r1, [r7, #0]
 800827e:	4837      	ldr	r0, [pc, #220]	; (800835c <_vfiprintf_r+0x264>)
 8008280:	f7ff f84e 	bl	8007320 <memchr>
 8008284:	2800      	cmp	r0, #0
 8008286:	d007      	beq.n	8008298 <_vfiprintf_r+0x1a0>
 8008288:	4b34      	ldr	r3, [pc, #208]	; (800835c <_vfiprintf_r+0x264>)
 800828a:	682a      	ldr	r2, [r5, #0]
 800828c:	1ac0      	subs	r0, r0, r3
 800828e:	2340      	movs	r3, #64	; 0x40
 8008290:	4083      	lsls	r3, r0
 8008292:	4313      	orrs	r3, r2
 8008294:	3701      	adds	r7, #1
 8008296:	602b      	str	r3, [r5, #0]
 8008298:	7839      	ldrb	r1, [r7, #0]
 800829a:	1c7b      	adds	r3, r7, #1
 800829c:	2206      	movs	r2, #6
 800829e:	4830      	ldr	r0, [pc, #192]	; (8008360 <_vfiprintf_r+0x268>)
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	7629      	strb	r1, [r5, #24]
 80082a4:	f7ff f83c 	bl	8007320 <memchr>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d045      	beq.n	8008338 <_vfiprintf_r+0x240>
 80082ac:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <_vfiprintf_r+0x26c>)
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d127      	bne.n	8008302 <_vfiprintf_r+0x20a>
 80082b2:	2207      	movs	r2, #7
 80082b4:	9b07      	ldr	r3, [sp, #28]
 80082b6:	3307      	adds	r3, #7
 80082b8:	4393      	bics	r3, r2
 80082ba:	3308      	adds	r3, #8
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	696b      	ldr	r3, [r5, #20]
 80082c0:	9a04      	ldr	r2, [sp, #16]
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	616b      	str	r3, [r5, #20]
 80082c6:	e75d      	b.n	8008184 <_vfiprintf_r+0x8c>
 80082c8:	210a      	movs	r1, #10
 80082ca:	434b      	muls	r3, r1
 80082cc:	4667      	mov	r7, ip
 80082ce:	189b      	adds	r3, r3, r2
 80082d0:	3909      	subs	r1, #9
 80082d2:	e7a3      	b.n	800821c <_vfiprintf_r+0x124>
 80082d4:	2301      	movs	r3, #1
 80082d6:	425b      	negs	r3, r3
 80082d8:	e7ce      	b.n	8008278 <_vfiprintf_r+0x180>
 80082da:	2300      	movs	r3, #0
 80082dc:	001a      	movs	r2, r3
 80082de:	3701      	adds	r7, #1
 80082e0:	606b      	str	r3, [r5, #4]
 80082e2:	7839      	ldrb	r1, [r7, #0]
 80082e4:	1c78      	adds	r0, r7, #1
 80082e6:	3930      	subs	r1, #48	; 0x30
 80082e8:	4684      	mov	ip, r0
 80082ea:	2909      	cmp	r1, #9
 80082ec:	d903      	bls.n	80082f6 <_vfiprintf_r+0x1fe>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c3      	beq.n	800827a <_vfiprintf_r+0x182>
 80082f2:	9209      	str	r2, [sp, #36]	; 0x24
 80082f4:	e7c1      	b.n	800827a <_vfiprintf_r+0x182>
 80082f6:	230a      	movs	r3, #10
 80082f8:	435a      	muls	r2, r3
 80082fa:	4667      	mov	r7, ip
 80082fc:	1852      	adds	r2, r2, r1
 80082fe:	3b09      	subs	r3, #9
 8008300:	e7ef      	b.n	80082e2 <_vfiprintf_r+0x1ea>
 8008302:	ab07      	add	r3, sp, #28
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	0022      	movs	r2, r4
 8008308:	0029      	movs	r1, r5
 800830a:	0030      	movs	r0, r6
 800830c:	4b16      	ldr	r3, [pc, #88]	; (8008368 <_vfiprintf_r+0x270>)
 800830e:	f7fd fd57 	bl	8005dc0 <_printf_float>
 8008312:	9004      	str	r0, [sp, #16]
 8008314:	9b04      	ldr	r3, [sp, #16]
 8008316:	3301      	adds	r3, #1
 8008318:	d1d1      	bne.n	80082be <_vfiprintf_r+0x1c6>
 800831a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800831c:	07db      	lsls	r3, r3, #31
 800831e:	d405      	bmi.n	800832c <_vfiprintf_r+0x234>
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	059b      	lsls	r3, r3, #22
 8008324:	d402      	bmi.n	800832c <_vfiprintf_r+0x234>
 8008326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008328:	f000 fad4 	bl	80088d4 <__retarget_lock_release_recursive>
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	065b      	lsls	r3, r3, #25
 8008330:	d500      	bpl.n	8008334 <_vfiprintf_r+0x23c>
 8008332:	e70a      	b.n	800814a <_vfiprintf_r+0x52>
 8008334:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008336:	e70a      	b.n	800814e <_vfiprintf_r+0x56>
 8008338:	ab07      	add	r3, sp, #28
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	0022      	movs	r2, r4
 800833e:	0029      	movs	r1, r5
 8008340:	0030      	movs	r0, r6
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <_vfiprintf_r+0x270>)
 8008344:	f7fd ffee 	bl	8006324 <_printf_i>
 8008348:	e7e3      	b.n	8008312 <_vfiprintf_r+0x21a>
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	0800972c 	.word	0x0800972c
 8008350:	0800974c 	.word	0x0800974c
 8008354:	0800970c 	.word	0x0800970c
 8008358:	080095b4 	.word	0x080095b4
 800835c:	080095ba 	.word	0x080095ba
 8008360:	080095be 	.word	0x080095be
 8008364:	08005dc1 	.word	0x08005dc1
 8008368:	080080d5 	.word	0x080080d5

0800836c <__swbuf_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	0005      	movs	r5, r0
 8008370:	000e      	movs	r6, r1
 8008372:	0014      	movs	r4, r2
 8008374:	2800      	cmp	r0, #0
 8008376:	d004      	beq.n	8008382 <__swbuf_r+0x16>
 8008378:	6983      	ldr	r3, [r0, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <__swbuf_r+0x16>
 800837e:	f000 fa07 	bl	8008790 <__sinit>
 8008382:	4b22      	ldr	r3, [pc, #136]	; (800840c <__swbuf_r+0xa0>)
 8008384:	429c      	cmp	r4, r3
 8008386:	d12e      	bne.n	80083e6 <__swbuf_r+0x7a>
 8008388:	686c      	ldr	r4, [r5, #4]
 800838a:	69a3      	ldr	r3, [r4, #24]
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	071b      	lsls	r3, r3, #28
 8008392:	d532      	bpl.n	80083fa <__swbuf_r+0x8e>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d02f      	beq.n	80083fa <__swbuf_r+0x8e>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	6922      	ldr	r2, [r4, #16]
 800839e:	b2f7      	uxtb	r7, r6
 80083a0:	1a98      	subs	r0, r3, r2
 80083a2:	6963      	ldr	r3, [r4, #20]
 80083a4:	b2f6      	uxtb	r6, r6
 80083a6:	4283      	cmp	r3, r0
 80083a8:	dc05      	bgt.n	80083b6 <__swbuf_r+0x4a>
 80083aa:	0021      	movs	r1, r4
 80083ac:	0028      	movs	r0, r5
 80083ae:	f000 f94d 	bl	800864c <_fflush_r>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d127      	bne.n	8008406 <__swbuf_r+0x9a>
 80083b6:	68a3      	ldr	r3, [r4, #8]
 80083b8:	3001      	adds	r0, #1
 80083ba:	3b01      	subs	r3, #1
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	6022      	str	r2, [r4, #0]
 80083c4:	701f      	strb	r7, [r3, #0]
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	4283      	cmp	r3, r0
 80083ca:	d004      	beq.n	80083d6 <__swbuf_r+0x6a>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	d507      	bpl.n	80083e2 <__swbuf_r+0x76>
 80083d2:	2e0a      	cmp	r6, #10
 80083d4:	d105      	bne.n	80083e2 <__swbuf_r+0x76>
 80083d6:	0021      	movs	r1, r4
 80083d8:	0028      	movs	r0, r5
 80083da:	f000 f937 	bl	800864c <_fflush_r>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d111      	bne.n	8008406 <__swbuf_r+0x9a>
 80083e2:	0030      	movs	r0, r6
 80083e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e6:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <__swbuf_r+0xa4>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	d101      	bne.n	80083f0 <__swbuf_r+0x84>
 80083ec:	68ac      	ldr	r4, [r5, #8]
 80083ee:	e7cc      	b.n	800838a <__swbuf_r+0x1e>
 80083f0:	4b08      	ldr	r3, [pc, #32]	; (8008414 <__swbuf_r+0xa8>)
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d1c9      	bne.n	800838a <__swbuf_r+0x1e>
 80083f6:	68ec      	ldr	r4, [r5, #12]
 80083f8:	e7c7      	b.n	800838a <__swbuf_r+0x1e>
 80083fa:	0021      	movs	r1, r4
 80083fc:	0028      	movs	r0, r5
 80083fe:	f000 f819 	bl	8008434 <__swsetup_r>
 8008402:	2800      	cmp	r0, #0
 8008404:	d0c9      	beq.n	800839a <__swbuf_r+0x2e>
 8008406:	2601      	movs	r6, #1
 8008408:	4276      	negs	r6, r6
 800840a:	e7ea      	b.n	80083e2 <__swbuf_r+0x76>
 800840c:	0800972c 	.word	0x0800972c
 8008410:	0800974c 	.word	0x0800974c
 8008414:	0800970c 	.word	0x0800970c

08008418 <__ascii_wctomb>:
 8008418:	0003      	movs	r3, r0
 800841a:	1e08      	subs	r0, r1, #0
 800841c:	d005      	beq.n	800842a <__ascii_wctomb+0x12>
 800841e:	2aff      	cmp	r2, #255	; 0xff
 8008420:	d904      	bls.n	800842c <__ascii_wctomb+0x14>
 8008422:	228a      	movs	r2, #138	; 0x8a
 8008424:	2001      	movs	r0, #1
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	4240      	negs	r0, r0
 800842a:	4770      	bx	lr
 800842c:	2001      	movs	r0, #1
 800842e:	700a      	strb	r2, [r1, #0]
 8008430:	e7fb      	b.n	800842a <__ascii_wctomb+0x12>
	...

08008434 <__swsetup_r>:
 8008434:	4b37      	ldr	r3, [pc, #220]	; (8008514 <__swsetup_r+0xe0>)
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	0006      	movs	r6, r0
 800843c:	000c      	movs	r4, r1
 800843e:	2d00      	cmp	r5, #0
 8008440:	d005      	beq.n	800844e <__swsetup_r+0x1a>
 8008442:	69ab      	ldr	r3, [r5, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d102      	bne.n	800844e <__swsetup_r+0x1a>
 8008448:	0028      	movs	r0, r5
 800844a:	f000 f9a1 	bl	8008790 <__sinit>
 800844e:	4b32      	ldr	r3, [pc, #200]	; (8008518 <__swsetup_r+0xe4>)
 8008450:	429c      	cmp	r4, r3
 8008452:	d10f      	bne.n	8008474 <__swsetup_r+0x40>
 8008454:	686c      	ldr	r4, [r5, #4]
 8008456:	230c      	movs	r3, #12
 8008458:	5ee2      	ldrsh	r2, [r4, r3]
 800845a:	b293      	uxth	r3, r2
 800845c:	0711      	lsls	r1, r2, #28
 800845e:	d42d      	bmi.n	80084bc <__swsetup_r+0x88>
 8008460:	06d9      	lsls	r1, r3, #27
 8008462:	d411      	bmi.n	8008488 <__swsetup_r+0x54>
 8008464:	2309      	movs	r3, #9
 8008466:	2001      	movs	r0, #1
 8008468:	6033      	str	r3, [r6, #0]
 800846a:	3337      	adds	r3, #55	; 0x37
 800846c:	4313      	orrs	r3, r2
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	4240      	negs	r0, r0
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	4b29      	ldr	r3, [pc, #164]	; (800851c <__swsetup_r+0xe8>)
 8008476:	429c      	cmp	r4, r3
 8008478:	d101      	bne.n	800847e <__swsetup_r+0x4a>
 800847a:	68ac      	ldr	r4, [r5, #8]
 800847c:	e7eb      	b.n	8008456 <__swsetup_r+0x22>
 800847e:	4b28      	ldr	r3, [pc, #160]	; (8008520 <__swsetup_r+0xec>)
 8008480:	429c      	cmp	r4, r3
 8008482:	d1e8      	bne.n	8008456 <__swsetup_r+0x22>
 8008484:	68ec      	ldr	r4, [r5, #12]
 8008486:	e7e6      	b.n	8008456 <__swsetup_r+0x22>
 8008488:	075b      	lsls	r3, r3, #29
 800848a:	d513      	bpl.n	80084b4 <__swsetup_r+0x80>
 800848c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800848e:	2900      	cmp	r1, #0
 8008490:	d008      	beq.n	80084a4 <__swsetup_r+0x70>
 8008492:	0023      	movs	r3, r4
 8008494:	3344      	adds	r3, #68	; 0x44
 8008496:	4299      	cmp	r1, r3
 8008498:	d002      	beq.n	80084a0 <__swsetup_r+0x6c>
 800849a:	0030      	movs	r0, r6
 800849c:	f7ff fb1c 	bl	8007ad8 <_free_r>
 80084a0:	2300      	movs	r3, #0
 80084a2:	6363      	str	r3, [r4, #52]	; 0x34
 80084a4:	2224      	movs	r2, #36	; 0x24
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	4393      	bics	r3, r2
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	2300      	movs	r3, #0
 80084ae:	6063      	str	r3, [r4, #4]
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	2308      	movs	r3, #8
 80084b6:	89a2      	ldrh	r2, [r4, #12]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <__swsetup_r+0xa6>
 80084c2:	21a0      	movs	r1, #160	; 0xa0
 80084c4:	2280      	movs	r2, #128	; 0x80
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	0089      	lsls	r1, r1, #2
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	400b      	ands	r3, r1
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <__swsetup_r+0xa6>
 80084d2:	0021      	movs	r1, r4
 80084d4:	0030      	movs	r0, r6
 80084d6:	f000 fa27 	bl	8008928 <__smakebuf_r>
 80084da:	220c      	movs	r2, #12
 80084dc:	5ea3      	ldrsh	r3, [r4, r2]
 80084de:	2001      	movs	r0, #1
 80084e0:	001a      	movs	r2, r3
 80084e2:	b299      	uxth	r1, r3
 80084e4:	4002      	ands	r2, r0
 80084e6:	4203      	tst	r3, r0
 80084e8:	d00f      	beq.n	800850a <__swsetup_r+0xd6>
 80084ea:	2200      	movs	r2, #0
 80084ec:	60a2      	str	r2, [r4, #8]
 80084ee:	6962      	ldr	r2, [r4, #20]
 80084f0:	4252      	negs	r2, r2
 80084f2:	61a2      	str	r2, [r4, #24]
 80084f4:	2000      	movs	r0, #0
 80084f6:	6922      	ldr	r2, [r4, #16]
 80084f8:	4282      	cmp	r2, r0
 80084fa:	d1ba      	bne.n	8008472 <__swsetup_r+0x3e>
 80084fc:	060a      	lsls	r2, r1, #24
 80084fe:	d5b8      	bpl.n	8008472 <__swsetup_r+0x3e>
 8008500:	2240      	movs	r2, #64	; 0x40
 8008502:	4313      	orrs	r3, r2
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	3801      	subs	r0, #1
 8008508:	e7b3      	b.n	8008472 <__swsetup_r+0x3e>
 800850a:	0788      	lsls	r0, r1, #30
 800850c:	d400      	bmi.n	8008510 <__swsetup_r+0xdc>
 800850e:	6962      	ldr	r2, [r4, #20]
 8008510:	60a2      	str	r2, [r4, #8]
 8008512:	e7ef      	b.n	80084f4 <__swsetup_r+0xc0>
 8008514:	20000054 	.word	0x20000054
 8008518:	0800972c 	.word	0x0800972c
 800851c:	0800974c 	.word	0x0800974c
 8008520:	0800970c 	.word	0x0800970c

08008524 <abort>:
 8008524:	2006      	movs	r0, #6
 8008526:	b510      	push	{r4, lr}
 8008528:	f000 fa74 	bl	8008a14 <raise>
 800852c:	2001      	movs	r0, #1
 800852e:	f7fa fe18 	bl	8003162 <_exit>
	...

08008534 <__sflush_r>:
 8008534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008536:	898b      	ldrh	r3, [r1, #12]
 8008538:	0005      	movs	r5, r0
 800853a:	000c      	movs	r4, r1
 800853c:	071a      	lsls	r2, r3, #28
 800853e:	d45f      	bmi.n	8008600 <__sflush_r+0xcc>
 8008540:	684a      	ldr	r2, [r1, #4]
 8008542:	2a00      	cmp	r2, #0
 8008544:	dc04      	bgt.n	8008550 <__sflush_r+0x1c>
 8008546:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008548:	2a00      	cmp	r2, #0
 800854a:	dc01      	bgt.n	8008550 <__sflush_r+0x1c>
 800854c:	2000      	movs	r0, #0
 800854e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008550:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008552:	2f00      	cmp	r7, #0
 8008554:	d0fa      	beq.n	800854c <__sflush_r+0x18>
 8008556:	2200      	movs	r2, #0
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	682e      	ldr	r6, [r5, #0]
 800855c:	602a      	str	r2, [r5, #0]
 800855e:	001a      	movs	r2, r3
 8008560:	0149      	lsls	r1, r1, #5
 8008562:	400a      	ands	r2, r1
 8008564:	420b      	tst	r3, r1
 8008566:	d034      	beq.n	80085d2 <__sflush_r+0x9e>
 8008568:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	075b      	lsls	r3, r3, #29
 800856e:	d506      	bpl.n	800857e <__sflush_r+0x4a>
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	1ac0      	subs	r0, r0, r3
 8008574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <__sflush_r+0x4a>
 800857a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800857c:	1ac0      	subs	r0, r0, r3
 800857e:	0002      	movs	r2, r0
 8008580:	6a21      	ldr	r1, [r4, #32]
 8008582:	2300      	movs	r3, #0
 8008584:	0028      	movs	r0, r5
 8008586:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008588:	47b8      	blx	r7
 800858a:	89a1      	ldrh	r1, [r4, #12]
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d106      	bne.n	800859e <__sflush_r+0x6a>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	2b1d      	cmp	r3, #29
 8008594:	d831      	bhi.n	80085fa <__sflush_r+0xc6>
 8008596:	4a2c      	ldr	r2, [pc, #176]	; (8008648 <__sflush_r+0x114>)
 8008598:	40da      	lsrs	r2, r3
 800859a:	07d3      	lsls	r3, r2, #31
 800859c:	d52d      	bpl.n	80085fa <__sflush_r+0xc6>
 800859e:	2300      	movs	r3, #0
 80085a0:	6063      	str	r3, [r4, #4]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	04cb      	lsls	r3, r1, #19
 80085a8:	d505      	bpl.n	80085b6 <__sflush_r+0x82>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d102      	bne.n	80085b4 <__sflush_r+0x80>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d100      	bne.n	80085b6 <__sflush_r+0x82>
 80085b4:	6560      	str	r0, [r4, #84]	; 0x54
 80085b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b8:	602e      	str	r6, [r5, #0]
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d0c6      	beq.n	800854c <__sflush_r+0x18>
 80085be:	0023      	movs	r3, r4
 80085c0:	3344      	adds	r3, #68	; 0x44
 80085c2:	4299      	cmp	r1, r3
 80085c4:	d002      	beq.n	80085cc <__sflush_r+0x98>
 80085c6:	0028      	movs	r0, r5
 80085c8:	f7ff fa86 	bl	8007ad8 <_free_r>
 80085cc:	2000      	movs	r0, #0
 80085ce:	6360      	str	r0, [r4, #52]	; 0x34
 80085d0:	e7bd      	b.n	800854e <__sflush_r+0x1a>
 80085d2:	2301      	movs	r3, #1
 80085d4:	0028      	movs	r0, r5
 80085d6:	6a21      	ldr	r1, [r4, #32]
 80085d8:	47b8      	blx	r7
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d1c5      	bne.n	800856a <__sflush_r+0x36>
 80085de:	682b      	ldr	r3, [r5, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0c2      	beq.n	800856a <__sflush_r+0x36>
 80085e4:	2b1d      	cmp	r3, #29
 80085e6:	d001      	beq.n	80085ec <__sflush_r+0xb8>
 80085e8:	2b16      	cmp	r3, #22
 80085ea:	d101      	bne.n	80085f0 <__sflush_r+0xbc>
 80085ec:	602e      	str	r6, [r5, #0]
 80085ee:	e7ad      	b.n	800854c <__sflush_r+0x18>
 80085f0:	2340      	movs	r3, #64	; 0x40
 80085f2:	89a2      	ldrh	r2, [r4, #12]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	e7a9      	b.n	800854e <__sflush_r+0x1a>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	430b      	orrs	r3, r1
 80085fe:	e7fa      	b.n	80085f6 <__sflush_r+0xc2>
 8008600:	690f      	ldr	r7, [r1, #16]
 8008602:	2f00      	cmp	r7, #0
 8008604:	d0a2      	beq.n	800854c <__sflush_r+0x18>
 8008606:	680a      	ldr	r2, [r1, #0]
 8008608:	600f      	str	r7, [r1, #0]
 800860a:	1bd2      	subs	r2, r2, r7
 800860c:	9201      	str	r2, [sp, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	079b      	lsls	r3, r3, #30
 8008612:	d100      	bne.n	8008616 <__sflush_r+0xe2>
 8008614:	694a      	ldr	r2, [r1, #20]
 8008616:	60a2      	str	r2, [r4, #8]
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dc00      	bgt.n	8008620 <__sflush_r+0xec>
 800861e:	e795      	b.n	800854c <__sflush_r+0x18>
 8008620:	003a      	movs	r2, r7
 8008622:	0028      	movs	r0, r5
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	6a21      	ldr	r1, [r4, #32]
 8008628:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800862a:	47b0      	blx	r6
 800862c:	2800      	cmp	r0, #0
 800862e:	dc06      	bgt.n	800863e <__sflush_r+0x10a>
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	2001      	movs	r0, #1
 8008634:	89a2      	ldrh	r2, [r4, #12]
 8008636:	4240      	negs	r0, r0
 8008638:	4313      	orrs	r3, r2
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	e787      	b.n	800854e <__sflush_r+0x1a>
 800863e:	9b01      	ldr	r3, [sp, #4]
 8008640:	183f      	adds	r7, r7, r0
 8008642:	1a1b      	subs	r3, r3, r0
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	e7e7      	b.n	8008618 <__sflush_r+0xe4>
 8008648:	20400001 	.word	0x20400001

0800864c <_fflush_r>:
 800864c:	690b      	ldr	r3, [r1, #16]
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	0005      	movs	r5, r0
 8008652:	000c      	movs	r4, r1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <_fflush_r+0x12>
 8008658:	2500      	movs	r5, #0
 800865a:	0028      	movs	r0, r5
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	2800      	cmp	r0, #0
 8008660:	d004      	beq.n	800866c <_fflush_r+0x20>
 8008662:	6983      	ldr	r3, [r0, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <_fflush_r+0x20>
 8008668:	f000 f892 	bl	8008790 <__sinit>
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <_fflush_r+0x74>)
 800866e:	429c      	cmp	r4, r3
 8008670:	d11b      	bne.n	80086aa <_fflush_r+0x5e>
 8008672:	686c      	ldr	r4, [r5, #4]
 8008674:	220c      	movs	r2, #12
 8008676:	5ea3      	ldrsh	r3, [r4, r2]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0ed      	beq.n	8008658 <_fflush_r+0xc>
 800867c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800867e:	07d2      	lsls	r2, r2, #31
 8008680:	d404      	bmi.n	800868c <_fflush_r+0x40>
 8008682:	059b      	lsls	r3, r3, #22
 8008684:	d402      	bmi.n	800868c <_fflush_r+0x40>
 8008686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008688:	f000 f923 	bl	80088d2 <__retarget_lock_acquire_recursive>
 800868c:	0028      	movs	r0, r5
 800868e:	0021      	movs	r1, r4
 8008690:	f7ff ff50 	bl	8008534 <__sflush_r>
 8008694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008696:	0005      	movs	r5, r0
 8008698:	07db      	lsls	r3, r3, #31
 800869a:	d4de      	bmi.n	800865a <_fflush_r+0xe>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	059b      	lsls	r3, r3, #22
 80086a0:	d4db      	bmi.n	800865a <_fflush_r+0xe>
 80086a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086a4:	f000 f916 	bl	80088d4 <__retarget_lock_release_recursive>
 80086a8:	e7d7      	b.n	800865a <_fflush_r+0xe>
 80086aa:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <_fflush_r+0x78>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d101      	bne.n	80086b4 <_fflush_r+0x68>
 80086b0:	68ac      	ldr	r4, [r5, #8]
 80086b2:	e7df      	b.n	8008674 <_fflush_r+0x28>
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <_fflush_r+0x7c>)
 80086b6:	429c      	cmp	r4, r3
 80086b8:	d1dc      	bne.n	8008674 <_fflush_r+0x28>
 80086ba:	68ec      	ldr	r4, [r5, #12]
 80086bc:	e7da      	b.n	8008674 <_fflush_r+0x28>
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	0800972c 	.word	0x0800972c
 80086c4:	0800974c 	.word	0x0800974c
 80086c8:	0800970c 	.word	0x0800970c

080086cc <std>:
 80086cc:	2300      	movs	r3, #0
 80086ce:	b510      	push	{r4, lr}
 80086d0:	0004      	movs	r4, r0
 80086d2:	6003      	str	r3, [r0, #0]
 80086d4:	6043      	str	r3, [r0, #4]
 80086d6:	6083      	str	r3, [r0, #8]
 80086d8:	8181      	strh	r1, [r0, #12]
 80086da:	6643      	str	r3, [r0, #100]	; 0x64
 80086dc:	0019      	movs	r1, r3
 80086de:	81c2      	strh	r2, [r0, #14]
 80086e0:	6103      	str	r3, [r0, #16]
 80086e2:	6143      	str	r3, [r0, #20]
 80086e4:	6183      	str	r3, [r0, #24]
 80086e6:	2208      	movs	r2, #8
 80086e8:	305c      	adds	r0, #92	; 0x5c
 80086ea:	f7fd fab7 	bl	8005c5c <memset>
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <std+0x38>)
 80086f0:	6224      	str	r4, [r4, #32]
 80086f2:	6263      	str	r3, [r4, #36]	; 0x24
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <std+0x3c>)
 80086f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <std+0x40>)
 80086fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <std+0x44>)
 80086fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008700:	bd10      	pop	{r4, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	08008a55 	.word	0x08008a55
 8008708:	08008a7d 	.word	0x08008a7d
 800870c:	08008ab5 	.word	0x08008ab5
 8008710:	08008ae1 	.word	0x08008ae1

08008714 <_cleanup_r>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4902      	ldr	r1, [pc, #8]	; (8008720 <_cleanup_r+0xc>)
 8008718:	f000 f8ba 	bl	8008890 <_fwalk_reent>
 800871c:	bd10      	pop	{r4, pc}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	0800864d 	.word	0x0800864d

08008724 <__sfmoreglue>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	2568      	movs	r5, #104	; 0x68
 8008728:	1e4a      	subs	r2, r1, #1
 800872a:	4355      	muls	r5, r2
 800872c:	000e      	movs	r6, r1
 800872e:	0029      	movs	r1, r5
 8008730:	3174      	adds	r1, #116	; 0x74
 8008732:	f7ff fa3d 	bl	8007bb0 <_malloc_r>
 8008736:	1e04      	subs	r4, r0, #0
 8008738:	d008      	beq.n	800874c <__sfmoreglue+0x28>
 800873a:	2100      	movs	r1, #0
 800873c:	002a      	movs	r2, r5
 800873e:	6001      	str	r1, [r0, #0]
 8008740:	6046      	str	r6, [r0, #4]
 8008742:	300c      	adds	r0, #12
 8008744:	60a0      	str	r0, [r4, #8]
 8008746:	3268      	adds	r2, #104	; 0x68
 8008748:	f7fd fa88 	bl	8005c5c <memset>
 800874c:	0020      	movs	r0, r4
 800874e:	bd70      	pop	{r4, r5, r6, pc}

08008750 <__sfp_lock_acquire>:
 8008750:	b510      	push	{r4, lr}
 8008752:	4802      	ldr	r0, [pc, #8]	; (800875c <__sfp_lock_acquire+0xc>)
 8008754:	f000 f8bd 	bl	80088d2 <__retarget_lock_acquire_recursive>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	46c0      	nop			; (mov r8, r8)
 800875c:	200004ed 	.word	0x200004ed

08008760 <__sfp_lock_release>:
 8008760:	b510      	push	{r4, lr}
 8008762:	4802      	ldr	r0, [pc, #8]	; (800876c <__sfp_lock_release+0xc>)
 8008764:	f000 f8b6 	bl	80088d4 <__retarget_lock_release_recursive>
 8008768:	bd10      	pop	{r4, pc}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	200004ed 	.word	0x200004ed

08008770 <__sinit_lock_acquire>:
 8008770:	b510      	push	{r4, lr}
 8008772:	4802      	ldr	r0, [pc, #8]	; (800877c <__sinit_lock_acquire+0xc>)
 8008774:	f000 f8ad 	bl	80088d2 <__retarget_lock_acquire_recursive>
 8008778:	bd10      	pop	{r4, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	200004ee 	.word	0x200004ee

08008780 <__sinit_lock_release>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4802      	ldr	r0, [pc, #8]	; (800878c <__sinit_lock_release+0xc>)
 8008784:	f000 f8a6 	bl	80088d4 <__retarget_lock_release_recursive>
 8008788:	bd10      	pop	{r4, pc}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	200004ee 	.word	0x200004ee

08008790 <__sinit>:
 8008790:	b513      	push	{r0, r1, r4, lr}
 8008792:	0004      	movs	r4, r0
 8008794:	f7ff ffec 	bl	8008770 <__sinit_lock_acquire>
 8008798:	69a3      	ldr	r3, [r4, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <__sinit+0x14>
 800879e:	f7ff ffef 	bl	8008780 <__sinit_lock_release>
 80087a2:	bd13      	pop	{r0, r1, r4, pc}
 80087a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80087a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80087a8:	6523      	str	r3, [r4, #80]	; 0x50
 80087aa:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <__sinit+0x68>)
 80087ac:	4a13      	ldr	r2, [pc, #76]	; (80087fc <__sinit+0x6c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	d101      	bne.n	80087bc <__sinit+0x2c>
 80087b8:	2301      	movs	r3, #1
 80087ba:	61a3      	str	r3, [r4, #24]
 80087bc:	0020      	movs	r0, r4
 80087be:	f000 f81f 	bl	8008800 <__sfp>
 80087c2:	6060      	str	r0, [r4, #4]
 80087c4:	0020      	movs	r0, r4
 80087c6:	f000 f81b 	bl	8008800 <__sfp>
 80087ca:	60a0      	str	r0, [r4, #8]
 80087cc:	0020      	movs	r0, r4
 80087ce:	f000 f817 	bl	8008800 <__sfp>
 80087d2:	2200      	movs	r2, #0
 80087d4:	2104      	movs	r1, #4
 80087d6:	60e0      	str	r0, [r4, #12]
 80087d8:	6860      	ldr	r0, [r4, #4]
 80087da:	f7ff ff77 	bl	80086cc <std>
 80087de:	2201      	movs	r2, #1
 80087e0:	2109      	movs	r1, #9
 80087e2:	68a0      	ldr	r0, [r4, #8]
 80087e4:	f7ff ff72 	bl	80086cc <std>
 80087e8:	2202      	movs	r2, #2
 80087ea:	2112      	movs	r1, #18
 80087ec:	68e0      	ldr	r0, [r4, #12]
 80087ee:	f7ff ff6d 	bl	80086cc <std>
 80087f2:	2301      	movs	r3, #1
 80087f4:	61a3      	str	r3, [r4, #24]
 80087f6:	e7d2      	b.n	800879e <__sinit+0xe>
 80087f8:	08009394 	.word	0x08009394
 80087fc:	08008715 	.word	0x08008715

08008800 <__sfp>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	0007      	movs	r7, r0
 8008804:	f7ff ffa4 	bl	8008750 <__sfp_lock_acquire>
 8008808:	4b1f      	ldr	r3, [pc, #124]	; (8008888 <__sfp+0x88>)
 800880a:	681e      	ldr	r6, [r3, #0]
 800880c:	69b3      	ldr	r3, [r6, #24]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <__sfp+0x18>
 8008812:	0030      	movs	r0, r6
 8008814:	f7ff ffbc 	bl	8008790 <__sinit>
 8008818:	3648      	adds	r6, #72	; 0x48
 800881a:	68b4      	ldr	r4, [r6, #8]
 800881c:	6873      	ldr	r3, [r6, #4]
 800881e:	3b01      	subs	r3, #1
 8008820:	d504      	bpl.n	800882c <__sfp+0x2c>
 8008822:	6833      	ldr	r3, [r6, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d022      	beq.n	800886e <__sfp+0x6e>
 8008828:	6836      	ldr	r6, [r6, #0]
 800882a:	e7f6      	b.n	800881a <__sfp+0x1a>
 800882c:	220c      	movs	r2, #12
 800882e:	5ea5      	ldrsh	r5, [r4, r2]
 8008830:	2d00      	cmp	r5, #0
 8008832:	d11a      	bne.n	800886a <__sfp+0x6a>
 8008834:	0020      	movs	r0, r4
 8008836:	4b15      	ldr	r3, [pc, #84]	; (800888c <__sfp+0x8c>)
 8008838:	3058      	adds	r0, #88	; 0x58
 800883a:	60e3      	str	r3, [r4, #12]
 800883c:	6665      	str	r5, [r4, #100]	; 0x64
 800883e:	f000 f847 	bl	80088d0 <__retarget_lock_init_recursive>
 8008842:	f7ff ff8d 	bl	8008760 <__sfp_lock_release>
 8008846:	0020      	movs	r0, r4
 8008848:	2208      	movs	r2, #8
 800884a:	0029      	movs	r1, r5
 800884c:	6025      	str	r5, [r4, #0]
 800884e:	60a5      	str	r5, [r4, #8]
 8008850:	6065      	str	r5, [r4, #4]
 8008852:	6125      	str	r5, [r4, #16]
 8008854:	6165      	str	r5, [r4, #20]
 8008856:	61a5      	str	r5, [r4, #24]
 8008858:	305c      	adds	r0, #92	; 0x5c
 800885a:	f7fd f9ff 	bl	8005c5c <memset>
 800885e:	6365      	str	r5, [r4, #52]	; 0x34
 8008860:	63a5      	str	r5, [r4, #56]	; 0x38
 8008862:	64a5      	str	r5, [r4, #72]	; 0x48
 8008864:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008866:	0020      	movs	r0, r4
 8008868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800886a:	3468      	adds	r4, #104	; 0x68
 800886c:	e7d7      	b.n	800881e <__sfp+0x1e>
 800886e:	2104      	movs	r1, #4
 8008870:	0038      	movs	r0, r7
 8008872:	f7ff ff57 	bl	8008724 <__sfmoreglue>
 8008876:	1e04      	subs	r4, r0, #0
 8008878:	6030      	str	r0, [r6, #0]
 800887a:	d1d5      	bne.n	8008828 <__sfp+0x28>
 800887c:	f7ff ff70 	bl	8008760 <__sfp_lock_release>
 8008880:	230c      	movs	r3, #12
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	e7ef      	b.n	8008866 <__sfp+0x66>
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	08009394 	.word	0x08009394
 800888c:	ffff0001 	.word	0xffff0001

08008890 <_fwalk_reent>:
 8008890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008892:	0004      	movs	r4, r0
 8008894:	0006      	movs	r6, r0
 8008896:	2700      	movs	r7, #0
 8008898:	9101      	str	r1, [sp, #4]
 800889a:	3448      	adds	r4, #72	; 0x48
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	68a5      	ldr	r5, [r4, #8]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	9b00      	ldr	r3, [sp, #0]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	d504      	bpl.n	80088b4 <_fwalk_reent+0x24>
 80088aa:	6824      	ldr	r4, [r4, #0]
 80088ac:	2c00      	cmp	r4, #0
 80088ae:	d1f5      	bne.n	800889c <_fwalk_reent+0xc>
 80088b0:	0038      	movs	r0, r7
 80088b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088b4:	89ab      	ldrh	r3, [r5, #12]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d908      	bls.n	80088cc <_fwalk_reent+0x3c>
 80088ba:	220e      	movs	r2, #14
 80088bc:	5eab      	ldrsh	r3, [r5, r2]
 80088be:	3301      	adds	r3, #1
 80088c0:	d004      	beq.n	80088cc <_fwalk_reent+0x3c>
 80088c2:	0029      	movs	r1, r5
 80088c4:	0030      	movs	r0, r6
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	4798      	blx	r3
 80088ca:	4307      	orrs	r7, r0
 80088cc:	3568      	adds	r5, #104	; 0x68
 80088ce:	e7e8      	b.n	80088a2 <_fwalk_reent+0x12>

080088d0 <__retarget_lock_init_recursive>:
 80088d0:	4770      	bx	lr

080088d2 <__retarget_lock_acquire_recursive>:
 80088d2:	4770      	bx	lr

080088d4 <__retarget_lock_release_recursive>:
 80088d4:	4770      	bx	lr
	...

080088d8 <__swhatbuf_r>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	000e      	movs	r6, r1
 80088dc:	001d      	movs	r5, r3
 80088de:	230e      	movs	r3, #14
 80088e0:	5ec9      	ldrsh	r1, [r1, r3]
 80088e2:	0014      	movs	r4, r2
 80088e4:	b096      	sub	sp, #88	; 0x58
 80088e6:	2900      	cmp	r1, #0
 80088e8:	da08      	bge.n	80088fc <__swhatbuf_r+0x24>
 80088ea:	220c      	movs	r2, #12
 80088ec:	5eb3      	ldrsh	r3, [r6, r2]
 80088ee:	2200      	movs	r2, #0
 80088f0:	602a      	str	r2, [r5, #0]
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	d411      	bmi.n	800891a <__swhatbuf_r+0x42>
 80088f6:	2380      	movs	r3, #128	; 0x80
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	e00f      	b.n	800891c <__swhatbuf_r+0x44>
 80088fc:	466a      	mov	r2, sp
 80088fe:	f000 f91b 	bl	8008b38 <_fstat_r>
 8008902:	2800      	cmp	r0, #0
 8008904:	dbf1      	blt.n	80088ea <__swhatbuf_r+0x12>
 8008906:	23f0      	movs	r3, #240	; 0xf0
 8008908:	9901      	ldr	r1, [sp, #4]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	4019      	ands	r1, r3
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <__swhatbuf_r+0x4c>)
 8008910:	18c9      	adds	r1, r1, r3
 8008912:	424b      	negs	r3, r1
 8008914:	4159      	adcs	r1, r3
 8008916:	6029      	str	r1, [r5, #0]
 8008918:	e7ed      	b.n	80088f6 <__swhatbuf_r+0x1e>
 800891a:	2340      	movs	r3, #64	; 0x40
 800891c:	2000      	movs	r0, #0
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	b016      	add	sp, #88	; 0x58
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	ffffe000 	.word	0xffffe000

08008928 <__smakebuf_r>:
 8008928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800892a:	2602      	movs	r6, #2
 800892c:	898b      	ldrh	r3, [r1, #12]
 800892e:	0005      	movs	r5, r0
 8008930:	000c      	movs	r4, r1
 8008932:	4233      	tst	r3, r6
 8008934:	d006      	beq.n	8008944 <__smakebuf_r+0x1c>
 8008936:	0023      	movs	r3, r4
 8008938:	3347      	adds	r3, #71	; 0x47
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	2301      	movs	r3, #1
 8008940:	6163      	str	r3, [r4, #20]
 8008942:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008944:	466a      	mov	r2, sp
 8008946:	ab01      	add	r3, sp, #4
 8008948:	f7ff ffc6 	bl	80088d8 <__swhatbuf_r>
 800894c:	9900      	ldr	r1, [sp, #0]
 800894e:	0007      	movs	r7, r0
 8008950:	0028      	movs	r0, r5
 8008952:	f7ff f92d 	bl	8007bb0 <_malloc_r>
 8008956:	2800      	cmp	r0, #0
 8008958:	d108      	bne.n	800896c <__smakebuf_r+0x44>
 800895a:	220c      	movs	r2, #12
 800895c:	5ea3      	ldrsh	r3, [r4, r2]
 800895e:	059a      	lsls	r2, r3, #22
 8008960:	d4ef      	bmi.n	8008942 <__smakebuf_r+0x1a>
 8008962:	2203      	movs	r2, #3
 8008964:	4393      	bics	r3, r2
 8008966:	431e      	orrs	r6, r3
 8008968:	81a6      	strh	r6, [r4, #12]
 800896a:	e7e4      	b.n	8008936 <__smakebuf_r+0xe>
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <__smakebuf_r+0x84>)
 800896e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	89a2      	ldrh	r2, [r4, #12]
 8008974:	6020      	str	r0, [r4, #0]
 8008976:	4313      	orrs	r3, r2
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	9b00      	ldr	r3, [sp, #0]
 800897c:	6120      	str	r0, [r4, #16]
 800897e:	6163      	str	r3, [r4, #20]
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00d      	beq.n	80089a2 <__smakebuf_r+0x7a>
 8008986:	0028      	movs	r0, r5
 8008988:	230e      	movs	r3, #14
 800898a:	5ee1      	ldrsh	r1, [r4, r3]
 800898c:	f000 f8e6 	bl	8008b5c <_isatty_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	d006      	beq.n	80089a2 <__smakebuf_r+0x7a>
 8008994:	2203      	movs	r2, #3
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	4393      	bics	r3, r2
 800899a:	001a      	movs	r2, r3
 800899c:	2301      	movs	r3, #1
 800899e:	4313      	orrs	r3, r2
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	89a0      	ldrh	r0, [r4, #12]
 80089a4:	4307      	orrs	r7, r0
 80089a6:	81a7      	strh	r7, [r4, #12]
 80089a8:	e7cb      	b.n	8008942 <__smakebuf_r+0x1a>
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	08008715 	.word	0x08008715

080089b0 <_malloc_usable_size_r>:
 80089b0:	1f0b      	subs	r3, r1, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	1f18      	subs	r0, r3, #4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da01      	bge.n	80089be <_malloc_usable_size_r+0xe>
 80089ba:	580b      	ldr	r3, [r1, r0]
 80089bc:	18c0      	adds	r0, r0, r3
 80089be:	4770      	bx	lr

080089c0 <_raise_r>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	0004      	movs	r4, r0
 80089c4:	000d      	movs	r5, r1
 80089c6:	291f      	cmp	r1, #31
 80089c8:	d904      	bls.n	80089d4 <_raise_r+0x14>
 80089ca:	2316      	movs	r3, #22
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	2001      	movs	r0, #1
 80089d0:	4240      	negs	r0, r0
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <_raise_r+0x24>
 80089da:	008a      	lsls	r2, r1, #2
 80089dc:	189b      	adds	r3, r3, r2
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	d108      	bne.n	80089f6 <_raise_r+0x36>
 80089e4:	0020      	movs	r0, r4
 80089e6:	f000 f831 	bl	8008a4c <_getpid_r>
 80089ea:	002a      	movs	r2, r5
 80089ec:	0001      	movs	r1, r0
 80089ee:	0020      	movs	r0, r4
 80089f0:	f000 f81a 	bl	8008a28 <_kill_r>
 80089f4:	e7ed      	b.n	80089d2 <_raise_r+0x12>
 80089f6:	2000      	movs	r0, #0
 80089f8:	2a01      	cmp	r2, #1
 80089fa:	d0ea      	beq.n	80089d2 <_raise_r+0x12>
 80089fc:	1c51      	adds	r1, r2, #1
 80089fe:	d103      	bne.n	8008a08 <_raise_r+0x48>
 8008a00:	2316      	movs	r3, #22
 8008a02:	3001      	adds	r0, #1
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	e7e4      	b.n	80089d2 <_raise_r+0x12>
 8008a08:	2400      	movs	r4, #0
 8008a0a:	0028      	movs	r0, r5
 8008a0c:	601c      	str	r4, [r3, #0]
 8008a0e:	4790      	blx	r2
 8008a10:	0020      	movs	r0, r4
 8008a12:	e7de      	b.n	80089d2 <_raise_r+0x12>

08008a14 <raise>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4b03      	ldr	r3, [pc, #12]	; (8008a24 <raise+0x10>)
 8008a18:	0001      	movs	r1, r0
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	f7ff ffd0 	bl	80089c0 <_raise_r>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	20000054 	.word	0x20000054

08008a28 <_kill_r>:
 8008a28:	2300      	movs	r3, #0
 8008a2a:	b570      	push	{r4, r5, r6, lr}
 8008a2c:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_kill_r+0x20>)
 8008a2e:	0004      	movs	r4, r0
 8008a30:	0008      	movs	r0, r1
 8008a32:	0011      	movs	r1, r2
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	f7fa fb84 	bl	8003142 <_kill>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d103      	bne.n	8008a46 <_kill_r+0x1e>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d000      	beq.n	8008a46 <_kill_r+0x1e>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	200004e8 	.word	0x200004e8

08008a4c <_getpid_r>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	f7fa fb72 	bl	8003136 <_getpid>
 8008a52:	bd10      	pop	{r4, pc}

08008a54 <__sread>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	000c      	movs	r4, r1
 8008a58:	250e      	movs	r5, #14
 8008a5a:	5f49      	ldrsh	r1, [r1, r5]
 8008a5c:	f000 f8a4 	bl	8008ba8 <_read_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	db03      	blt.n	8008a6c <__sread+0x18>
 8008a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a66:	181b      	adds	r3, r3, r0
 8008a68:	6563      	str	r3, [r4, #84]	; 0x54
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	4a02      	ldr	r2, [pc, #8]	; (8008a78 <__sread+0x24>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	e7f9      	b.n	8008a6a <__sread+0x16>
 8008a76:	46c0      	nop			; (mov r8, r8)
 8008a78:	ffffefff 	.word	0xffffefff

08008a7c <__swrite>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	001f      	movs	r7, r3
 8008a80:	898b      	ldrh	r3, [r1, #12]
 8008a82:	0005      	movs	r5, r0
 8008a84:	000c      	movs	r4, r1
 8008a86:	0016      	movs	r6, r2
 8008a88:	05db      	lsls	r3, r3, #23
 8008a8a:	d505      	bpl.n	8008a98 <__swrite+0x1c>
 8008a8c:	230e      	movs	r3, #14
 8008a8e:	5ec9      	ldrsh	r1, [r1, r3]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2302      	movs	r3, #2
 8008a94:	f000 f874 	bl	8008b80 <_lseek_r>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <__swrite+0x34>)
 8008a9c:	0028      	movs	r0, r5
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	0032      	movs	r2, r6
 8008aa4:	230e      	movs	r3, #14
 8008aa6:	5ee1      	ldrsh	r1, [r4, r3]
 8008aa8:	003b      	movs	r3, r7
 8008aaa:	f000 f81f 	bl	8008aec <_write_r>
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab0:	ffffefff 	.word	0xffffefff

08008ab4 <__sseek>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	000c      	movs	r4, r1
 8008ab8:	250e      	movs	r5, #14
 8008aba:	5f49      	ldrsh	r1, [r1, r5]
 8008abc:	f000 f860 	bl	8008b80 <_lseek_r>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	1c42      	adds	r2, r0, #1
 8008ac4:	d103      	bne.n	8008ace <__sseek+0x1a>
 8008ac6:	4a05      	ldr	r2, [pc, #20]	; (8008adc <__sseek+0x28>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	bd70      	pop	{r4, r5, r6, pc}
 8008ace:	2280      	movs	r2, #128	; 0x80
 8008ad0:	0152      	lsls	r2, r2, #5
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ad8:	e7f8      	b.n	8008acc <__sseek+0x18>
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	ffffefff 	.word	0xffffefff

08008ae0 <__sclose>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	230e      	movs	r3, #14
 8008ae4:	5ec9      	ldrsh	r1, [r1, r3]
 8008ae6:	f000 f815 	bl	8008b14 <_close_r>
 8008aea:	bd10      	pop	{r4, pc}

08008aec <_write_r>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	0004      	movs	r4, r0
 8008af0:	0008      	movs	r0, r1
 8008af2:	0011      	movs	r1, r2
 8008af4:	001a      	movs	r2, r3
 8008af6:	2300      	movs	r3, #0
 8008af8:	4d05      	ldr	r5, [pc, #20]	; (8008b10 <_write_r+0x24>)
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7fa fb5a 	bl	80031b4 <_write>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d103      	bne.n	8008b0c <_write_r+0x20>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d000      	beq.n	8008b0c <_write_r+0x20>
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	200004e8 	.word	0x200004e8

08008b14 <_close_r>:
 8008b14:	2300      	movs	r3, #0
 8008b16:	b570      	push	{r4, r5, r6, lr}
 8008b18:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_close_r+0x20>)
 8008b1a:	0004      	movs	r4, r0
 8008b1c:	0008      	movs	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7fa fb64 	bl	80031ec <_close>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d103      	bne.n	8008b30 <_close_r+0x1c>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d000      	beq.n	8008b30 <_close_r+0x1c>
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	bd70      	pop	{r4, r5, r6, pc}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	200004e8 	.word	0x200004e8

08008b38 <_fstat_r>:
 8008b38:	2300      	movs	r3, #0
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	4d06      	ldr	r5, [pc, #24]	; (8008b58 <_fstat_r+0x20>)
 8008b3e:	0004      	movs	r4, r0
 8008b40:	0008      	movs	r0, r1
 8008b42:	0011      	movs	r1, r2
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	f7fa fb5b 	bl	8003200 <_fstat>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d103      	bne.n	8008b56 <_fstat_r+0x1e>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d000      	beq.n	8008b56 <_fstat_r+0x1e>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	200004e8 	.word	0x200004e8

08008b5c <_isatty_r>:
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	4d06      	ldr	r5, [pc, #24]	; (8008b7c <_isatty_r+0x20>)
 8008b62:	0004      	movs	r4, r0
 8008b64:	0008      	movs	r0, r1
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7fa fb58 	bl	800321c <_isatty>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d103      	bne.n	8008b78 <_isatty_r+0x1c>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d000      	beq.n	8008b78 <_isatty_r+0x1c>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	200004e8 	.word	0x200004e8

08008b80 <_lseek_r>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	0004      	movs	r4, r0
 8008b84:	0008      	movs	r0, r1
 8008b86:	0011      	movs	r1, r2
 8008b88:	001a      	movs	r2, r3
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4d05      	ldr	r5, [pc, #20]	; (8008ba4 <_lseek_r+0x24>)
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7fa fb4d 	bl	800322e <_lseek>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_lseek_r+0x20>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d000      	beq.n	8008ba0 <_lseek_r+0x20>
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	200004e8 	.word	0x200004e8

08008ba8 <_read_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	0004      	movs	r4, r0
 8008bac:	0008      	movs	r0, r1
 8008bae:	0011      	movs	r1, r2
 8008bb0:	001a      	movs	r2, r3
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4d05      	ldr	r5, [pc, #20]	; (8008bcc <_read_r+0x24>)
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7fa fadf 	bl	800317a <_read>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <_read_r+0x20>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d000      	beq.n	8008bc8 <_read_r+0x20>
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	bd70      	pop	{r4, r5, r6, pc}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	200004e8 	.word	0x200004e8

08008bd0 <log>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	0004      	movs	r4, r0
 8008bd4:	000d      	movs	r5, r1
 8008bd6:	f000 f831 	bl	8008c3c <__ieee754_log>
 8008bda:	0022      	movs	r2, r4
 8008bdc:	0006      	movs	r6, r0
 8008bde:	000f      	movs	r7, r1
 8008be0:	002b      	movs	r3, r5
 8008be2:	0020      	movs	r0, r4
 8008be4:	0029      	movs	r1, r5
 8008be6:	f7fa f889 	bl	8002cfc <__aeabi_dcmpun>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d115      	bne.n	8008c1a <log+0x4a>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	0020      	movs	r0, r4
 8008bf4:	0029      	movs	r1, r5
 8008bf6:	f7f7 fc43 	bl	8000480 <__aeabi_dcmpgt>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d10d      	bne.n	8008c1a <log+0x4a>
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2300      	movs	r3, #0
 8008c02:	0020      	movs	r0, r4
 8008c04:	0029      	movs	r1, r5
 8008c06:	f7f7 fc21 	bl	800044c <__aeabi_dcmpeq>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d008      	beq.n	8008c20 <log+0x50>
 8008c0e:	f7fc fffb 	bl	8005c08 <__errno>
 8008c12:	2322      	movs	r3, #34	; 0x22
 8008c14:	2600      	movs	r6, #0
 8008c16:	4f07      	ldr	r7, [pc, #28]	; (8008c34 <log+0x64>)
 8008c18:	6003      	str	r3, [r0, #0]
 8008c1a:	0030      	movs	r0, r6
 8008c1c:	0039      	movs	r1, r7
 8008c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c20:	f7fc fff2 	bl	8005c08 <__errno>
 8008c24:	2321      	movs	r3, #33	; 0x21
 8008c26:	6003      	str	r3, [r0, #0]
 8008c28:	4803      	ldr	r0, [pc, #12]	; (8008c38 <log+0x68>)
 8008c2a:	f000 f9b7 	bl	8008f9c <nan>
 8008c2e:	0006      	movs	r6, r0
 8008c30:	000f      	movs	r7, r1
 8008c32:	e7f2      	b.n	8008c1a <log+0x4a>
 8008c34:	fff00000 	.word	0xfff00000
 8008c38:	08009600 	.word	0x08009600

08008c3c <__ieee754_log>:
 8008c3c:	2280      	movs	r2, #128	; 0x80
 8008c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c40:	000b      	movs	r3, r1
 8008c42:	b08d      	sub	sp, #52	; 0x34
 8008c44:	0352      	lsls	r2, r2, #13
 8008c46:	4291      	cmp	r1, r2
 8008c48:	da22      	bge.n	8008c90 <__ieee754_log+0x54>
 8008c4a:	004a      	lsls	r2, r1, #1
 8008c4c:	0852      	lsrs	r2, r2, #1
 8008c4e:	4302      	orrs	r2, r0
 8008c50:	d107      	bne.n	8008c62 <__ieee754_log+0x26>
 8008c52:	2200      	movs	r2, #0
 8008c54:	2300      	movs	r3, #0
 8008c56:	2000      	movs	r0, #0
 8008c58:	49b3      	ldr	r1, [pc, #716]	; (8008f28 <__ieee754_log+0x2ec>)
 8008c5a:	f7f8 fe4f 	bl	80018fc <__aeabi_ddiv>
 8008c5e:	b00d      	add	sp, #52	; 0x34
 8008c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c62:	2900      	cmp	r1, #0
 8008c64:	da05      	bge.n	8008c72 <__ieee754_log+0x36>
 8008c66:	0002      	movs	r2, r0
 8008c68:	f7f9 fcb6 	bl	80025d8 <__aeabi_dsub>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e7f3      	b.n	8008c5a <__ieee754_log+0x1e>
 8008c72:	4bae      	ldr	r3, [pc, #696]	; (8008f2c <__ieee754_log+0x2f0>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	f7f9 fa43 	bl	8002100 <__aeabi_dmul>
 8008c7a:	2436      	movs	r4, #54	; 0x36
 8008c7c:	000b      	movs	r3, r1
 8008c7e:	4264      	negs	r4, r4
 8008c80:	4aab      	ldr	r2, [pc, #684]	; (8008f30 <__ieee754_log+0x2f4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	dd06      	ble.n	8008c94 <__ieee754_log+0x58>
 8008c86:	0002      	movs	r2, r0
 8008c88:	000b      	movs	r3, r1
 8008c8a:	f7f8 fafb 	bl	8001284 <__aeabi_dadd>
 8008c8e:	e7e6      	b.n	8008c5e <__ieee754_log+0x22>
 8008c90:	2400      	movs	r4, #0
 8008c92:	e7f5      	b.n	8008c80 <__ieee754_log+0x44>
 8008c94:	4da7      	ldr	r5, [pc, #668]	; (8008f34 <__ieee754_log+0x2f8>)
 8008c96:	151a      	asrs	r2, r3, #20
 8008c98:	1952      	adds	r2, r2, r5
 8008c9a:	1912      	adds	r2, r2, r4
 8008c9c:	031b      	lsls	r3, r3, #12
 8008c9e:	4ca6      	ldr	r4, [pc, #664]	; (8008f38 <__ieee754_log+0x2fc>)
 8008ca0:	0b1b      	lsrs	r3, r3, #12
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	191c      	adds	r4, r3, r4
 8008ca6:	2380      	movs	r3, #128	; 0x80
 8008ca8:	035b      	lsls	r3, r3, #13
 8008caa:	4023      	ands	r3, r4
 8008cac:	4ca3      	ldr	r4, [pc, #652]	; (8008f3c <__ieee754_log+0x300>)
 8008cae:	9d02      	ldr	r5, [sp, #8]
 8008cb0:	405c      	eors	r4, r3
 8008cb2:	151b      	asrs	r3, r3, #20
 8008cb4:	189b      	adds	r3, r3, r2
 8008cb6:	4325      	orrs	r5, r4
 8008cb8:	2200      	movs	r2, #0
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	0029      	movs	r1, r5
 8008cbe:	4b9f      	ldr	r3, [pc, #636]	; (8008f3c <__ieee754_log+0x300>)
 8008cc0:	f7f9 fc8a 	bl	80025d8 <__aeabi_dsub>
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	0006      	movs	r6, r0
 8008cc8:	3302      	adds	r3, #2
 8008cca:	031b      	lsls	r3, r3, #12
 8008ccc:	000f      	movs	r7, r1
 8008cce:	2200      	movs	r2, #0
 8008cd0:	0b1b      	lsrs	r3, r3, #12
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	dc64      	bgt.n	8008da0 <__ieee754_log+0x164>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f7f7 fbb8 	bl	800044c <__aeabi_dcmpeq>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d019      	beq.n	8008d14 <__ieee754_log+0xd8>
 8008ce0:	9b00      	ldr	r3, [sp, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d100      	bne.n	8008ce8 <__ieee754_log+0xac>
 8008ce6:	e11c      	b.n	8008f22 <__ieee754_log+0x2e6>
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f7fa f85b 	bl	8002da4 <__aeabi_i2d>
 8008cee:	4a94      	ldr	r2, [pc, #592]	; (8008f40 <__ieee754_log+0x304>)
 8008cf0:	4b94      	ldr	r3, [pc, #592]	; (8008f44 <__ieee754_log+0x308>)
 8008cf2:	0004      	movs	r4, r0
 8008cf4:	000d      	movs	r5, r1
 8008cf6:	f7f9 fa03 	bl	8002100 <__aeabi_dmul>
 8008cfa:	4a93      	ldr	r2, [pc, #588]	; (8008f48 <__ieee754_log+0x30c>)
 8008cfc:	0006      	movs	r6, r0
 8008cfe:	000f      	movs	r7, r1
 8008d00:	4b92      	ldr	r3, [pc, #584]	; (8008f4c <__ieee754_log+0x310>)
 8008d02:	0020      	movs	r0, r4
 8008d04:	0029      	movs	r1, r5
 8008d06:	f7f9 f9fb 	bl	8002100 <__aeabi_dmul>
 8008d0a:	0002      	movs	r2, r0
 8008d0c:	000b      	movs	r3, r1
 8008d0e:	0030      	movs	r0, r6
 8008d10:	0039      	movs	r1, r7
 8008d12:	e7ba      	b.n	8008c8a <__ieee754_log+0x4e>
 8008d14:	4a8e      	ldr	r2, [pc, #568]	; (8008f50 <__ieee754_log+0x314>)
 8008d16:	4b8f      	ldr	r3, [pc, #572]	; (8008f54 <__ieee754_log+0x318>)
 8008d18:	0030      	movs	r0, r6
 8008d1a:	0039      	movs	r1, r7
 8008d1c:	f7f9 f9f0 	bl	8002100 <__aeabi_dmul>
 8008d20:	0002      	movs	r2, r0
 8008d22:	000b      	movs	r3, r1
 8008d24:	2000      	movs	r0, #0
 8008d26:	498c      	ldr	r1, [pc, #560]	; (8008f58 <__ieee754_log+0x31c>)
 8008d28:	f7f9 fc56 	bl	80025d8 <__aeabi_dsub>
 8008d2c:	0032      	movs	r2, r6
 8008d2e:	0004      	movs	r4, r0
 8008d30:	000d      	movs	r5, r1
 8008d32:	003b      	movs	r3, r7
 8008d34:	0030      	movs	r0, r6
 8008d36:	0039      	movs	r1, r7
 8008d38:	f7f9 f9e2 	bl	8002100 <__aeabi_dmul>
 8008d3c:	000b      	movs	r3, r1
 8008d3e:	0002      	movs	r2, r0
 8008d40:	0029      	movs	r1, r5
 8008d42:	0020      	movs	r0, r4
 8008d44:	f7f9 f9dc 	bl	8002100 <__aeabi_dmul>
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	9002      	str	r0, [sp, #8]
 8008d4c:	9103      	str	r1, [sp, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <__ieee754_log+0x124>
 8008d52:	0002      	movs	r2, r0
 8008d54:	000b      	movs	r3, r1
 8008d56:	0030      	movs	r0, r6
 8008d58:	0039      	movs	r1, r7
 8008d5a:	f7f9 fc3d 	bl	80025d8 <__aeabi_dsub>
 8008d5e:	e77e      	b.n	8008c5e <__ieee754_log+0x22>
 8008d60:	9800      	ldr	r0, [sp, #0]
 8008d62:	f7fa f81f 	bl	8002da4 <__aeabi_i2d>
 8008d66:	4a76      	ldr	r2, [pc, #472]	; (8008f40 <__ieee754_log+0x304>)
 8008d68:	4b76      	ldr	r3, [pc, #472]	; (8008f44 <__ieee754_log+0x308>)
 8008d6a:	0004      	movs	r4, r0
 8008d6c:	000d      	movs	r5, r1
 8008d6e:	f7f9 f9c7 	bl	8002100 <__aeabi_dmul>
 8008d72:	4a75      	ldr	r2, [pc, #468]	; (8008f48 <__ieee754_log+0x30c>)
 8008d74:	9000      	str	r0, [sp, #0]
 8008d76:	9101      	str	r1, [sp, #4]
 8008d78:	4b74      	ldr	r3, [pc, #464]	; (8008f4c <__ieee754_log+0x310>)
 8008d7a:	0020      	movs	r0, r4
 8008d7c:	0029      	movs	r1, r5
 8008d7e:	f7f9 f9bf 	bl	8002100 <__aeabi_dmul>
 8008d82:	0002      	movs	r2, r0
 8008d84:	000b      	movs	r3, r1
 8008d86:	9802      	ldr	r0, [sp, #8]
 8008d88:	9903      	ldr	r1, [sp, #12]
 8008d8a:	f7f9 fc25 	bl	80025d8 <__aeabi_dsub>
 8008d8e:	0032      	movs	r2, r6
 8008d90:	003b      	movs	r3, r7
 8008d92:	f7f9 fc21 	bl	80025d8 <__aeabi_dsub>
 8008d96:	0002      	movs	r2, r0
 8008d98:	000b      	movs	r3, r1
 8008d9a:	9800      	ldr	r0, [sp, #0]
 8008d9c:	9901      	ldr	r1, [sp, #4]
 8008d9e:	e7dc      	b.n	8008d5a <__ieee754_log+0x11e>
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	05db      	lsls	r3, r3, #23
 8008da4:	f7f8 fa6e 	bl	8001284 <__aeabi_dadd>
 8008da8:	0002      	movs	r2, r0
 8008daa:	000b      	movs	r3, r1
 8008dac:	0030      	movs	r0, r6
 8008dae:	0039      	movs	r1, r7
 8008db0:	f7f8 fda4 	bl	80018fc <__aeabi_ddiv>
 8008db4:	9004      	str	r0, [sp, #16]
 8008db6:	9105      	str	r1, [sp, #20]
 8008db8:	9800      	ldr	r0, [sp, #0]
 8008dba:	f7f9 fff3 	bl	8002da4 <__aeabi_i2d>
 8008dbe:	9a04      	ldr	r2, [sp, #16]
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	9006      	str	r0, [sp, #24]
 8008dc4:	9107      	str	r1, [sp, #28]
 8008dc6:	0010      	movs	r0, r2
 8008dc8:	0019      	movs	r1, r3
 8008dca:	f7f9 f999 	bl	8002100 <__aeabi_dmul>
 8008dce:	4a63      	ldr	r2, [pc, #396]	; (8008f5c <__ieee754_log+0x320>)
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	4694      	mov	ip, r2
 8008dd4:	4463      	add	r3, ip
 8008dd6:	0002      	movs	r2, r0
 8008dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dda:	000b      	movs	r3, r1
 8008ddc:	9008      	str	r0, [sp, #32]
 8008dde:	9109      	str	r1, [sp, #36]	; 0x24
 8008de0:	f7f9 f98e 	bl	8002100 <__aeabi_dmul>
 8008de4:	0004      	movs	r4, r0
 8008de6:	000d      	movs	r5, r1
 8008de8:	4a5d      	ldr	r2, [pc, #372]	; (8008f60 <__ieee754_log+0x324>)
 8008dea:	4b5e      	ldr	r3, [pc, #376]	; (8008f64 <__ieee754_log+0x328>)
 8008dec:	f7f9 f988 	bl	8002100 <__aeabi_dmul>
 8008df0:	4a5d      	ldr	r2, [pc, #372]	; (8008f68 <__ieee754_log+0x32c>)
 8008df2:	4b5e      	ldr	r3, [pc, #376]	; (8008f6c <__ieee754_log+0x330>)
 8008df4:	f7f8 fa46 	bl	8001284 <__aeabi_dadd>
 8008df8:	0022      	movs	r2, r4
 8008dfa:	002b      	movs	r3, r5
 8008dfc:	f7f9 f980 	bl	8002100 <__aeabi_dmul>
 8008e00:	4a5b      	ldr	r2, [pc, #364]	; (8008f70 <__ieee754_log+0x334>)
 8008e02:	4b5c      	ldr	r3, [pc, #368]	; (8008f74 <__ieee754_log+0x338>)
 8008e04:	f7f8 fa3e 	bl	8001284 <__aeabi_dadd>
 8008e08:	0022      	movs	r2, r4
 8008e0a:	002b      	movs	r3, r5
 8008e0c:	f7f9 f978 	bl	8002100 <__aeabi_dmul>
 8008e10:	4a59      	ldr	r2, [pc, #356]	; (8008f78 <__ieee754_log+0x33c>)
 8008e12:	4b5a      	ldr	r3, [pc, #360]	; (8008f7c <__ieee754_log+0x340>)
 8008e14:	f7f8 fa36 	bl	8001284 <__aeabi_dadd>
 8008e18:	9a08      	ldr	r2, [sp, #32]
 8008e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1c:	f7f9 f970 	bl	8002100 <__aeabi_dmul>
 8008e20:	4a57      	ldr	r2, [pc, #348]	; (8008f80 <__ieee754_log+0x344>)
 8008e22:	9008      	str	r0, [sp, #32]
 8008e24:	9109      	str	r1, [sp, #36]	; 0x24
 8008e26:	4b57      	ldr	r3, [pc, #348]	; (8008f84 <__ieee754_log+0x348>)
 8008e28:	0020      	movs	r0, r4
 8008e2a:	0029      	movs	r1, r5
 8008e2c:	f7f9 f968 	bl	8002100 <__aeabi_dmul>
 8008e30:	4a55      	ldr	r2, [pc, #340]	; (8008f88 <__ieee754_log+0x34c>)
 8008e32:	4b56      	ldr	r3, [pc, #344]	; (8008f8c <__ieee754_log+0x350>)
 8008e34:	f7f8 fa26 	bl	8001284 <__aeabi_dadd>
 8008e38:	0022      	movs	r2, r4
 8008e3a:	002b      	movs	r3, r5
 8008e3c:	f7f9 f960 	bl	8002100 <__aeabi_dmul>
 8008e40:	4a53      	ldr	r2, [pc, #332]	; (8008f90 <__ieee754_log+0x354>)
 8008e42:	4b54      	ldr	r3, [pc, #336]	; (8008f94 <__ieee754_log+0x358>)
 8008e44:	f7f8 fa1e 	bl	8001284 <__aeabi_dadd>
 8008e48:	0022      	movs	r2, r4
 8008e4a:	002b      	movs	r3, r5
 8008e4c:	f7f9 f958 	bl	8002100 <__aeabi_dmul>
 8008e50:	0002      	movs	r2, r0
 8008e52:	000b      	movs	r3, r1
 8008e54:	9808      	ldr	r0, [sp, #32]
 8008e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e58:	f7f8 fa14 	bl	8001284 <__aeabi_dadd>
 8008e5c:	9a02      	ldr	r2, [sp, #8]
 8008e5e:	4b4e      	ldr	r3, [pc, #312]	; (8008f98 <__ieee754_log+0x35c>)
 8008e60:	0004      	movs	r4, r0
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e66:	000d      	movs	r5, r1
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dd34      	ble.n	8008ed8 <__ieee754_log+0x29c>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4b39      	ldr	r3, [pc, #228]	; (8008f58 <__ieee754_log+0x31c>)
 8008e72:	0030      	movs	r0, r6
 8008e74:	0039      	movs	r1, r7
 8008e76:	f7f9 f943 	bl	8002100 <__aeabi_dmul>
 8008e7a:	0032      	movs	r2, r6
 8008e7c:	003b      	movs	r3, r7
 8008e7e:	f7f9 f93f 	bl	8002100 <__aeabi_dmul>
 8008e82:	0002      	movs	r2, r0
 8008e84:	000b      	movs	r3, r1
 8008e86:	9002      	str	r0, [sp, #8]
 8008e88:	9103      	str	r1, [sp, #12]
 8008e8a:	0020      	movs	r0, r4
 8008e8c:	0029      	movs	r1, r5
 8008e8e:	f7f8 f9f9 	bl	8001284 <__aeabi_dadd>
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	f7f9 f933 	bl	8002100 <__aeabi_dmul>
 8008e9a:	9b00      	ldr	r3, [sp, #0]
 8008e9c:	0004      	movs	r4, r0
 8008e9e:	000d      	movs	r5, r1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <__ieee754_log+0x276>
 8008ea4:	0002      	movs	r2, r0
 8008ea6:	000b      	movs	r3, r1
 8008ea8:	9802      	ldr	r0, [sp, #8]
 8008eaa:	9903      	ldr	r1, [sp, #12]
 8008eac:	f7f9 fb94 	bl	80025d8 <__aeabi_dsub>
 8008eb0:	e74f      	b.n	8008d52 <__ieee754_log+0x116>
 8008eb2:	4a23      	ldr	r2, [pc, #140]	; (8008f40 <__ieee754_log+0x304>)
 8008eb4:	4b23      	ldr	r3, [pc, #140]	; (8008f44 <__ieee754_log+0x308>)
 8008eb6:	9806      	ldr	r0, [sp, #24]
 8008eb8:	9907      	ldr	r1, [sp, #28]
 8008eba:	f7f9 f921 	bl	8002100 <__aeabi_dmul>
 8008ebe:	4a22      	ldr	r2, [pc, #136]	; (8008f48 <__ieee754_log+0x30c>)
 8008ec0:	9000      	str	r0, [sp, #0]
 8008ec2:	9101      	str	r1, [sp, #4]
 8008ec4:	9806      	ldr	r0, [sp, #24]
 8008ec6:	9907      	ldr	r1, [sp, #28]
 8008ec8:	4b20      	ldr	r3, [pc, #128]	; (8008f4c <__ieee754_log+0x310>)
 8008eca:	f7f9 f919 	bl	8002100 <__aeabi_dmul>
 8008ece:	0022      	movs	r2, r4
 8008ed0:	002b      	movs	r3, r5
 8008ed2:	f7f8 f9d7 	bl	8001284 <__aeabi_dadd>
 8008ed6:	e754      	b.n	8008d82 <__ieee754_log+0x146>
 8008ed8:	0002      	movs	r2, r0
 8008eda:	000b      	movs	r3, r1
 8008edc:	0030      	movs	r0, r6
 8008ede:	0039      	movs	r1, r7
 8008ee0:	f7f9 fb7a 	bl	80025d8 <__aeabi_dsub>
 8008ee4:	9a04      	ldr	r2, [sp, #16]
 8008ee6:	9b05      	ldr	r3, [sp, #20]
 8008ee8:	f7f9 f90a 	bl	8002100 <__aeabi_dmul>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	0004      	movs	r4, r0
 8008ef0:	000d      	movs	r5, r1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <__ieee754_log+0x2c0>
 8008ef6:	0002      	movs	r2, r0
 8008ef8:	000b      	movs	r3, r1
 8008efa:	e72c      	b.n	8008d56 <__ieee754_log+0x11a>
 8008efc:	4a10      	ldr	r2, [pc, #64]	; (8008f40 <__ieee754_log+0x304>)
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <__ieee754_log+0x308>)
 8008f00:	9806      	ldr	r0, [sp, #24]
 8008f02:	9907      	ldr	r1, [sp, #28]
 8008f04:	f7f9 f8fc 	bl	8002100 <__aeabi_dmul>
 8008f08:	4a0f      	ldr	r2, [pc, #60]	; (8008f48 <__ieee754_log+0x30c>)
 8008f0a:	9000      	str	r0, [sp, #0]
 8008f0c:	9101      	str	r1, [sp, #4]
 8008f0e:	9806      	ldr	r0, [sp, #24]
 8008f10:	9907      	ldr	r1, [sp, #28]
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <__ieee754_log+0x310>)
 8008f14:	f7f9 f8f4 	bl	8002100 <__aeabi_dmul>
 8008f18:	0002      	movs	r2, r0
 8008f1a:	000b      	movs	r3, r1
 8008f1c:	0020      	movs	r0, r4
 8008f1e:	0029      	movs	r1, r5
 8008f20:	e733      	b.n	8008d8a <__ieee754_log+0x14e>
 8008f22:	2000      	movs	r0, #0
 8008f24:	2100      	movs	r1, #0
 8008f26:	e69a      	b.n	8008c5e <__ieee754_log+0x22>
 8008f28:	c3500000 	.word	0xc3500000
 8008f2c:	43500000 	.word	0x43500000
 8008f30:	7fefffff 	.word	0x7fefffff
 8008f34:	fffffc01 	.word	0xfffffc01
 8008f38:	00095f64 	.word	0x00095f64
 8008f3c:	3ff00000 	.word	0x3ff00000
 8008f40:	fee00000 	.word	0xfee00000
 8008f44:	3fe62e42 	.word	0x3fe62e42
 8008f48:	35793c76 	.word	0x35793c76
 8008f4c:	3dea39ef 	.word	0x3dea39ef
 8008f50:	55555555 	.word	0x55555555
 8008f54:	3fd55555 	.word	0x3fd55555
 8008f58:	3fe00000 	.word	0x3fe00000
 8008f5c:	fff9eb86 	.word	0xfff9eb86
 8008f60:	df3e5244 	.word	0xdf3e5244
 8008f64:	3fc2f112 	.word	0x3fc2f112
 8008f68:	96cb03de 	.word	0x96cb03de
 8008f6c:	3fc74664 	.word	0x3fc74664
 8008f70:	94229359 	.word	0x94229359
 8008f74:	3fd24924 	.word	0x3fd24924
 8008f78:	55555593 	.word	0x55555593
 8008f7c:	3fe55555 	.word	0x3fe55555
 8008f80:	d078c69f 	.word	0xd078c69f
 8008f84:	3fc39a09 	.word	0x3fc39a09
 8008f88:	1d8e78af 	.word	0x1d8e78af
 8008f8c:	3fcc71c5 	.word	0x3fcc71c5
 8008f90:	9997fa04 	.word	0x9997fa04
 8008f94:	3fd99999 	.word	0x3fd99999
 8008f98:	0006b851 	.word	0x0006b851

08008f9c <nan>:
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	4901      	ldr	r1, [pc, #4]	; (8008fa4 <nan+0x8>)
 8008fa0:	4770      	bx	lr
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	7ff80000 	.word	0x7ff80000

08008fa8 <_init>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr

08008fb4 <_fini>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr
